
emeles_erzekelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00006190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0000619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000070  08005210  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005210  00007378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e79  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a07  00000000  00000000  00018f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cba  00000000  00000000  0001c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e99  00000000  00000000  0001d63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c57  00000000  00000000  000414d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6d4b  00000000  00000000  0005512a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012be75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  0012beb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00130a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005124 	.word	0x08005124

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005124 	.word	0x08005124

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Start_buzzer>:
void Start_buzzer();
void Stop_buzzer();
void Display_limit(int16_t limit, Orientation facing);
void Display_tilt(int16_t tilt, Orientation facing);

void Start_buzzer(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <Start_buzzer+0x10>)
 80005a6:	f002 fa37 	bl	8002a18 <HAL_TIM_Base_Start_IT>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000130 	.word	0x20000130

080005b4 <Stop_buzzer>:

void Stop_buzzer(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <Stop_buzzer+0x10>)
 80005ba:	f002 fa9d 	bl	8002af8 <HAL_TIM_Base_Stop_IT>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000130 	.word	0x20000130

080005c8 <Display_limit>:

void Display_limit(int16_t limit, Orientation facing){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	80fb      	strh	r3, [r7, #6]
 80005d4:	4613      	mov	r3, r2
 80005d6:	717b      	strb	r3, [r7, #5]

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <Display_tilt>:

void Display_tilt(int16_t tilt, Orientation facing){
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	4613      	mov	r3, r2
 80005f2:	717b      	strb	r3, [r7, #5]

}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <Measure_tilt>:

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&Accelometer);
}

int Measure_tilt(){
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	if(i == 90){
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <Measure_tilt+0x38>)
 8000606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060a:	2b5a      	cmp	r3, #90	@ 0x5a
 800060c:	d103      	bne.n	8000616 <Measure_tilt+0x16>
		i = -91;
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <Measure_tilt+0x38>)
 8000610:	f64f 72a5 	movw	r2, #65445	@ 0xffa5
 8000614:	801a      	strh	r2, [r3, #0]
	}
	i++;
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <Measure_tilt+0x38>)
 8000618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3301      	adds	r3, #1
 8000620:	b29b      	uxth	r3, r3
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <Measure_tilt+0x38>)
 8000626:	801a      	strh	r2, [r3, #0]
	return i;
 8000628:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <Measure_tilt+0x38>)
 800062a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	2000008c 	.word	0x2000008c

0800063c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, LED_Pin);

	if (htim->Instance == TIM4){ // measuring the accelerometer
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a09      	ldr	r2, [pc, #36]	@ (8000670 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d102      	bne.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x18>
		measure = 1;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM10){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d103      	bne.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_GPIO_TogglePin(GPIOC, buzzer_Pin); // generate 4kHz square wave for the buzzer
 800065e:	2101      	movs	r1, #1
 8000660:	4806      	ldr	r0, [pc, #24]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000662:	f001 f9c4 	bl	80019ee <HAL_GPIO_TogglePin>
	}

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40000800 	.word	0x40000800
 8000674:	200001c0 	.word	0x200001c0
 8000678:	40014400 	.word	0x40014400
 800067c:	40020800 	.word	0x40020800

08000680 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button_up_Pin) {
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d10d      	bne.n	80006ac <HAL_GPIO_EXTI_Callback+0x2c>
		if(limit < 90){
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	b21b      	sxth	r3, r3
 8000696:	2b59      	cmp	r3, #89	@ 0x59
 8000698:	dc08      	bgt.n	80006ac <HAL_GPIO_EXTI_Callback+0x2c>
			limit++;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x5c>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	3301      	adds	r3, #1
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80006aa:	801a      	strh	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == button_down_Pin) {
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d10d      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x4e>
		if(0 < limit){
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dd08      	ble.n	80006ce <HAL_GPIO_EXTI_Callback+0x4e>
			limit--;
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80006cc:	801a      	strh	r2, [r3, #0]
		}
	}

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80006e4:	f000 fdc0 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f884 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f9c0 	bl	8000a70 <MX_GPIO_Init>
  MX_SPI3_Init();
 80006f0:	f000 f8ec 	bl	80008cc <MX_SPI3_Init>
  MX_TIM4_Init();
 80006f4:	f000 f920 	bl	8000938 <MX_TIM4_Init>
  MX_TIM10_Init();
 80006f8:	f000 f96c 	bl	80009d4 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 f98e 	bl	8000a1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_SPI2_Init();
 8000700:	f000 fc10 	bl	8000f24 <BSP_SPI2_Init>
  //MEMS_Init();

  HAL_TIM_Base_Start_IT(&htim4); // measure accelerometer every 100 ms
 8000704:	4833      	ldr	r0, [pc, #204]	@ (80007d4 <main+0xf4>)
 8000706:	f002 f987 	bl	8002a18 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (measure) {
 800070a:	4b33      	ldr	r3, [pc, #204]	@ (80007d8 <main+0xf8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0fa      	beq.n	800070a <main+0x2a>
			measure = 0;
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <main+0xf8>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

			current_limit = limit;     // Sampling the data
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <main+0xfc>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b21a      	sxth	r2, r3
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <main+0x100>)
 8000722:	801a      	strh	r2, [r3, #0]
			degree = Measure_tilt();
 8000724:	f7ff ff6c 	bl	8000600 <Measure_tilt>
 8000728:	4603      	mov	r3, r0
 800072a:	b21a      	sxth	r2, r3
 800072c:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <main+0x104>)
 800072e:	801a      	strh	r2, [r3, #0]
			if(degree < 0){
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <main+0x104>)
 8000732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	da03      	bge.n	8000742 <main+0x62>
				facing = DOWN;
 800073a:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <main+0x108>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e002      	b.n	8000748 <main+0x68>
			}
			else{
				facing = UP;
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <main+0x108>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
			}
			degree = abs(degree);
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <main+0x104>)
 800074a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	bfb8      	it	lt
 8000752:	425b      	neglt	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	b21a      	sxth	r2, r3
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <main+0x104>)
 800075a:	801a      	strh	r2, [r3, #0]

			if(degree > current_limit){
 800075c:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <main+0x104>)
 800075e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <main+0x100>)
 8000764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000768:	429a      	cmp	r2, r3
 800076a:	dd02      	ble.n	8000772 <main+0x92>
				Start_buzzer();
 800076c:	f7ff ff18 	bl	80005a0 <Start_buzzer>
 8000770:	e001      	b.n	8000776 <main+0x96>
			}
			else{
				Stop_buzzer();
 8000772:	f7ff ff1f 	bl	80005b4 <Stop_buzzer>
			}

			printf("%d\r\n", degree);        // Send data to the PC
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <main+0x104>)
 8000778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077c:	4619      	mov	r1, r3
 800077e:	481b      	ldr	r0, [pc, #108]	@ (80007ec <main+0x10c>)
 8000780:	f003 fe62 	bl	8004448 <iprintf>
			printf("%d\r\n", current_limit);
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <main+0x100>)
 8000786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078a:	4619      	mov	r1, r3
 800078c:	4817      	ldr	r0, [pc, #92]	@ (80007ec <main+0x10c>)
 800078e:	f003 fe5b 	bl	8004448 <iprintf>

			if(previous_limit != current_limit){         // When the limit changes display the new value,
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <main+0x110>)
 8000794:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <main+0x100>)
 800079a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d009      	beq.n	80007b6 <main+0xd6>
				Display_limit(current_limit, facing);    // otherwise display the current tilt on the 7seg
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <main+0x100>)
 80007a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a8:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <main+0x108>)
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff0a 	bl	80005c8 <Display_limit>
 80007b4:	e008      	b.n	80007c8 <main+0xe8>
			}
			else{
				Display_tilt(degree, facing);
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <main+0x104>)
 80007b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <main+0x108>)
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff0e 	bl	80005e4 <Display_tilt>
			}

			previous_limit = current_limit;
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <main+0x100>)
 80007ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <main+0x110>)
 80007d0:	801a      	strh	r2, [r3, #0]
		if (measure) {
 80007d2:	e79a      	b.n	800070a <main+0x2a>
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	200001c0 	.word	0x200001c0
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000002 	.word	0x20000002
 80007e4:	200001c2 	.word	0x200001c2
 80007e8:	200001c4 	.word	0x200001c4
 80007ec:	0800513c 	.word	0x0800513c
 80007f0:	20000004 	.word	0x20000004

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	@ 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fe75 	bl	80044f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <SystemClock_Config+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a28      	ldr	r2, [pc, #160]	@ (80008c4 <SystemClock_Config+0xd0>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <SystemClock_Config+0xd0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <SystemClock_Config+0xd4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000840:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <SystemClock_Config+0xd4>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <SystemClock_Config+0xd4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000858:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800085c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800086c:	2348      	movs	r3, #72	@ 0x48
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000874:	2303      	movs	r3, #3
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fc31 	bl	80020e8 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800088c:	f000 f9c8 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2102      	movs	r1, #2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f8d1 	bl	8001a54 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008b8:	f000 f9b2 	bl	8000c20 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <MX_SPI3_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI3_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI3_Init+0x64>)
 8000900:	2218      	movs	r2, #24
 8000902:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <MX_SPI3_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI3_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <MX_SPI3_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI3_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_SPI3_Init+0x64>)
 800091e:	f001 fe81 	bl	8002624 <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f97a 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000090 	.word	0x20000090
 8000934:	40003c00 	.word	0x40003c00

08000938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TIM4_Init+0x94>)
 8000956:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <MX_TIM4_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 69;
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_TIM4_Init+0x94>)
 800095c:	2245      	movs	r2, #69	@ 0x45
 800095e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM4_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <MX_TIM4_Init+0x94>)
 8000968:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800096c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_TIM4_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_TIM4_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <MX_TIM4_Init+0x94>)
 800097c:	f001 fffc 	bl	8002978 <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f94b 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <MX_TIM4_Init+0x94>)
 8000998:	f002 f9cd 	bl	8002d36 <HAL_TIM_ConfigClockSource>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f93d 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <MX_TIM4_Init+0x94>)
 80009b4:	f002 fbf4 	bl	80031a0 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80009be:	f000 f92f 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e8 	.word	0x200000e8
 80009d0:	40000800 	.word	0x40000800

080009d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_TIM10_Init+0x40>)
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <MX_TIM10_Init+0x44>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <MX_TIM10_Init+0x40>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_TIM10_Init+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 11250;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <MX_TIM10_Init+0x40>)
 80009ec:	f642 32f2 	movw	r2, #11250	@ 0x2bf2
 80009f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_TIM10_Init+0x40>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_TIM10_Init+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_TIM10_Init+0x40>)
 8000a00:	f001 ffba 	bl	8002978 <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000a0a:	f000 f909 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000130 	.word	0x20000130
 8000a18:	40014400 	.word	0x40014400

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f002 fc34 	bl	80032c0 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f8df 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000178 	.word	0x20000178
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b55      	ldr	r3, [pc, #340]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a54      	ldr	r2, [pc, #336]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b52      	ldr	r3, [pc, #328]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b47      	ldr	r3, [pc, #284]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a46      	ldr	r2, [pc, #280]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b44      	ldr	r3, [pc, #272]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b40      	ldr	r3, [pc, #256]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b3d      	ldr	r3, [pc, #244]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b39      	ldr	r3, [pc, #228]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a38      	ldr	r2, [pc, #224]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <MX_GPIO_Init+0x170>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, buzzer_Pin|SS_7seg_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2121      	movs	r1, #33	@ 0x21
 8000b16:	4833      	ldr	r0, [pc, #204]	@ (8000be4 <MX_GPIO_Init+0x174>)
 8000b18:	f000 ff50 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4831      	ldr	r0, [pc, #196]	@ (8000be8 <MX_GPIO_Init+0x178>)
 8000b22:	f000 ff4b 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin|OE_7seg_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2103      	movs	r1, #3
 8000b2a:	4830      	ldr	r0, [pc, #192]	@ (8000bec <MX_GPIO_Init+0x17c>)
 8000b2c:	f000 ff46 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : buzzer_Pin SS_7seg_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|SS_7seg_Pin;
 8000b30:	2321      	movs	r3, #33	@ 0x21
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4827      	ldr	r0, [pc, #156]	@ (8000be4 <MX_GPIO_Init+0x174>)
 8000b48:	f000 fda4 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <MX_GPIO_Init+0x178>)
 8000b64:	f000 fd96 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_accel_Pin OE_7seg_Pin */
  GPIO_InitStruct.Pin = SS_accel_Pin|OE_7seg_Pin;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481b      	ldr	r0, [pc, #108]	@ (8000bec <MX_GPIO_Init+0x17c>)
 8000b80:	f000 fd88 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_up_Pin */
  GPIO_InitStruct.Pin = button_up_Pin;
 8000b84:	2304      	movs	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_up_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4815      	ldr	r0, [pc, #84]	@ (8000bf0 <MX_GPIO_Init+0x180>)
 8000b9a:	f000 fd7b 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_down_Pin */
  GPIO_InitStruct.Pin = button_down_Pin;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_down_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <MX_GPIO_Init+0x17c>)
 8000bb4:	f000 fd6e 	bl	8001694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2008      	movs	r0, #8
 8000bbe:	f000 fca0 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000bc2:	2008      	movs	r0, #8
 8000bc4:	f000 fcb9 	bl	800153a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2017      	movs	r0, #23
 8000bce:	f000 fc98 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bd2:	2017      	movs	r0, #23
 8000bd4:	f000 fcb1 	bl	800153a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <_write>:

/* USER CODE BEGIN 4 */

// Redirect the printf to COM port
int _write(int fd, char * ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <_write+0x28>)
 8000c0c:	f002 fba8 	bl	8003360 <HAL_UART_Transmit>
  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000178 	.word	0x20000178

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6a:	2007      	movs	r0, #7
 8000c6c:	f000 fc3e 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a21      	ldr	r2, [pc, #132]	@ (8000d20 <HAL_SPI_MspInit+0xa4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d13c      	bne.n	8000d18 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <HAL_SPI_MspInit+0xa8>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d24 <HAL_SPI_MspInit+0xa8>)
 8000ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <HAL_SPI_MspInit+0xa8>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <HAL_SPI_MspInit+0xa8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <HAL_SPI_MspInit+0xa8>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <HAL_SPI_MspInit+0xa8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <HAL_SPI_MspInit+0xac>)
 8000cf2:	f000 fccf 	bl	8001694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d08:	2306      	movs	r3, #6
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_SPI_MspInit+0xac>)
 8000d14:	f000 fcbe 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40003c00 	.word	0x40003c00
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020800 	.word	0x40020800

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <HAL_TIM_Base_MspInit+0x80>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d116      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <HAL_TIM_Base_MspInit+0x84>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a1a      	ldr	r2, [pc, #104]	@ (8000db0 <HAL_TIM_Base_MspInit+0x84>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_TIM_Base_MspInit+0x84>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	201e      	movs	r0, #30
 8000d60:	f000 fbcf 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d64:	201e      	movs	r0, #30
 8000d66:	f000 fbe8 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000d6a:	e01a      	b.n	8000da2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <HAL_TIM_Base_MspInit+0x88>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <HAL_TIM_Base_MspInit+0x84>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <HAL_TIM_Base_MspInit+0x84>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_TIM_Base_MspInit+0x84>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2019      	movs	r0, #25
 8000d98:	f000 fbb3 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d9c:	2019      	movs	r0, #25
 8000d9e:	f000 fbcc 	bl	800153a <HAL_NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40000800 	.word	0x40000800
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40014400 	.word	0x40014400

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e4c <HAL_UART_MspInit+0x94>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d133      	bne.n	8000e42 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <HAL_UART_MspInit+0x98>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_UART_MspInit+0x98>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_UART_MspInit+0x98>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_UART_MspInit+0x98>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <HAL_UART_MspInit+0x98>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_UART_MspInit+0x98>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e12:	230c      	movs	r3, #12
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e22:	2307      	movs	r3, #7
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <HAL_UART_MspInit+0x9c>)
 8000e2e:	f000 fc31 	bl	8001694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2026      	movs	r0, #38	@ 0x26
 8000e38:	f000 fb63 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e3c:	2026      	movs	r0, #38	@ 0x26
 8000e3e:	f000 fb7c 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 fa2d 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_up_Pin);
 8000eba:	2004      	movs	r0, #4
 8000ebc:	f000 fdb2 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_down_Pin);
 8000ec8:	2020      	movs	r0, #32
 8000eca:	f000 fdab 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000eda:	f001 fe3c 	bl	8002b56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000130 	.word	0x20000130

08000ee8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM4_IRQHandler+0x10>)
 8000eee:	f001 fe32 	bl	8002b56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000e8 	.word	0x200000e8

08000efc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <SPI2_IRQHandler+0x10>)
 8000f02:	f001 fc19 	bl	8002738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001c8 	.word	0x200001c8

08000f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <USART2_IRQHandler+0x10>)
 8000f16:	f002 faaf 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000178 	.word	0x20000178

08000f24 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <BSP_SPI2_Init+0x54>)
 8000f30:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <BSP_SPI2_Init+0x58>)
 8000f32:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <BSP_SPI2_Init+0x5c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	4911      	ldr	r1, [pc, #68]	@ (8000f80 <BSP_SPI2_Init+0x5c>)
 8000f3c:	600a      	str	r2, [r1, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d114      	bne.n	8000f6c <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000f42:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <BSP_SPI2_Init+0x54>)
 8000f44:	f001 fcf6 	bl	8002934 <HAL_SPI_GetState>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10e      	bne.n	8000f6c <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8000f4e:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <BSP_SPI2_Init+0x54>)
 8000f50:	f000 f854 	bl	8000ffc <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d108      	bne.n	8000f6c <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000f5a:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <BSP_SPI2_Init+0x54>)
 8000f5c:	f000 f812 	bl	8000f84 <MX_SPI2_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000f66:	f06f 0307 	mvn.w	r3, #7
 8000f6a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001c8 	.word	0x200001c8
 8000f7c:	40003800 	.word	0x40003800
 8000f80:	20000220 	.word	0x20000220

08000f84 <MX_SPI2_Init>:
}

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <MX_SPI2_Init+0x74>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2218      	movs	r2, #24
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 fb21 	bl	8002624 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40003800 	.word	0x40003800

08000ffc <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	4b32      	ldr	r3, [pc, #200]	@ (80010d4 <SPI2_MspInit+0xd8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a31      	ldr	r2, [pc, #196]	@ (80010d4 <SPI2_MspInit+0xd8>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <SPI2_MspInit+0xd8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <SPI2_MspInit+0xd8>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <SPI2_MspInit+0xd8>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001030:	4b28      	ldr	r3, [pc, #160]	@ (80010d4 <SPI2_MspInit+0xd8>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <SPI2_MspInit+0xd8>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4a23      	ldr	r2, [pc, #140]	@ (80010d4 <SPI2_MspInit+0xd8>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	6313      	str	r3, [r2, #48]	@ 0x30
 800104c:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <SPI2_MspInit+0xd8>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8001058:	2304      	movs	r3, #4
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8001068:	2305      	movs	r3, #5
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4819      	ldr	r0, [pc, #100]	@ (80010d8 <SPI2_MspInit+0xdc>)
 8001074:	f000 fb0e 	bl	8001694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001078:	2308      	movs	r3, #8
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8001088:	2305      	movs	r3, #5
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <SPI2_MspInit+0xdc>)
 8001094:	f000 fafe 	bl	8001694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 80010aa:	2305      	movs	r3, #5
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <SPI2_MspInit+0xe0>)
 80010b6:	f000 faed 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2024      	movs	r0, #36	@ 0x24
 80010c0:	f000 fa1f 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010c4:	2024      	movs	r0, #36	@ 0x24
 80010c6:	f000 fa38 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400

080010e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00a      	b.n	8001108 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f2:	f3af 8000 	nop.w
 80010f6:	4601      	mov	r1, r0
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	b2ca      	uxtb	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf0      	blt.n	80010f2 <_read+0x12>
  }

  return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:
  }
  return len;
}

int _close(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001142:	605a      	str	r2, [r3, #4]
  return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f003 f9ec 	bl	8004590 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20020000 	.word	0x20020000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20000224 	.word	0x20000224
 80011ec:	20000378 	.word	0x20000378

080011f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	@ (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800124c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001218:	f7ff ffea 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	@ (8001254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	@ (8001260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001242:	f003 f9ab 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fa4b 	bl	80006e0 <main>
  bx  lr    
 800124a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001258:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 800125c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001260:	20000378 	.word	0x20000378

08001264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <HAL_Init+0x40>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <HAL_Init+0x40>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <HAL_Init+0x40>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f92b 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f808 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff fcc6 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f943 	bl	8001556 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f000 f90b 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	@ (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000008 	.word	0x20000008
 8001304:	20000010 	.word	0x20000010
 8001308:	2000000c 	.word	0x2000000c

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000010 	.word	0x20000010
 8001330:	20000228 	.word	0x20000228

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000228 	.word	0x20000228

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	@ (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	@ (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff3e 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff8e 	bl	8001440 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff feda 	bl	8001334 <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e052      	b.n	8001646 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0216 	bic.w	r2, r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <HAL_DMA_Abort+0x62>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0208 	bic.w	r2, r2, #8
 80015de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	e013      	b.n	800161a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f2:	f7ff fe9f 	bl	8001334 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d90c      	bls.n	800161a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e015      	b.n	8001646 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e4      	bne.n	80015f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	223f      	movs	r2, #63	@ 0x3f
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d004      	beq.n	800166c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e00c      	b.n	8001686 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2205      	movs	r2, #5
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e165      	b.n	800197c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8154 	bne.w	8001976 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d005      	beq.n	80016e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d130      	bne.n	8001748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0201 	and.w	r2, r3, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b03      	cmp	r3, #3
 8001752:	d017      	beq.n	8001784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d123      	bne.n	80017d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80ae 	beq.w	8001976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b5d      	ldr	r3, [pc, #372]	@ (8001994 <HAL_GPIO_Init+0x300>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a5c      	ldr	r2, [pc, #368]	@ (8001994 <HAL_GPIO_Init+0x300>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b5a      	ldr	r3, [pc, #360]	@ (8001994 <HAL_GPIO_Init+0x300>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a58      	ldr	r2, [pc, #352]	@ (8001998 <HAL_GPIO_Init+0x304>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4f      	ldr	r2, [pc, #316]	@ (800199c <HAL_GPIO_Init+0x308>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x21a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4e      	ldr	r2, [pc, #312]	@ (80019a0 <HAL_GPIO_Init+0x30c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x216>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4d      	ldr	r2, [pc, #308]	@ (80019a4 <HAL_GPIO_Init+0x310>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x212>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4c      	ldr	r2, [pc, #304]	@ (80019a8 <HAL_GPIO_Init+0x314>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x20e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4b      	ldr	r2, [pc, #300]	@ (80019ac <HAL_GPIO_Init+0x318>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x20a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	@ (80019b0 <HAL_GPIO_Init+0x31c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x206>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a49      	ldr	r2, [pc, #292]	@ (80019b4 <HAL_GPIO_Init+0x320>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x202>
 8001892:	2306      	movs	r3, #6
 8001894:	e00c      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 8001896:	2307      	movs	r3, #7
 8001898:	e00a      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 800189a:	2305      	movs	r3, #5
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 800189e:	2304      	movs	r3, #4
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x21c>
 80018ae:	2300      	movs	r3, #0
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c0:	4935      	ldr	r1, [pc, #212]	@ (8001998 <HAL_GPIO_Init+0x304>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ce:	4b3a      	ldr	r3, [pc, #232]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f2:	4a31      	ldr	r2, [pc, #196]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f8:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800191c:	4a26      	ldr	r2, [pc, #152]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001946:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001970:	4a11      	ldr	r2, [pc, #68]	@ (80019b8 <HAL_GPIO_Init+0x324>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	f67f ae96 	bls.w	80016b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40013800 	.word	0x40013800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40021400 	.word	0x40021400
 80019b4:	40021800 	.word	0x40021800
 80019b8:	40013c00 	.word	0x40013c00

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d8:	e003      	b.n	80019e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	041a      	lsls	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a00:	887a      	ldrh	r2, [r7, #2]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	400b      	ands	r3, r1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fe1c 	bl	8000680 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0cc      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b68      	ldr	r3, [pc, #416]	@ (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90c      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b65      	ldr	r3, [pc, #404]	@ (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a58      	ldr	r2, [pc, #352]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d044      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d119      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b3f      	ldr	r3, [pc, #252]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e067      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4934      	ldr	r1, [pc, #208]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b44:	f7ff fbf6 	bl	8001334 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff fbf2 	bl	8001334 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e04f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d20c      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f855 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490a      	ldr	r1, [pc, #40]	@ (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fb56 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08005144 	.word	0x08005144
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08005154 	.word	0x08005154

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffdc 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0b5b      	lsrs	r3, r3, #13
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	@ (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08005154 	.word	0x08005154

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c8c:	b0ae      	sub	sp, #184	@ 0xb8
 8001c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cae:	4bcb      	ldr	r3, [pc, #812]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	f200 8206 	bhi.w	80020c8 <HAL_RCC_GetSysClockFreq+0x440>
 8001cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	08001cf9 	.word	0x08001cf9
 8001cc8:	080020c9 	.word	0x080020c9
 8001ccc:	080020c9 	.word	0x080020c9
 8001cd0:	080020c9 	.word	0x080020c9
 8001cd4:	08001d01 	.word	0x08001d01
 8001cd8:	080020c9 	.word	0x080020c9
 8001cdc:	080020c9 	.word	0x080020c9
 8001ce0:	080020c9 	.word	0x080020c9
 8001ce4:	08001d09 	.word	0x08001d09
 8001ce8:	080020c9 	.word	0x080020c9
 8001cec:	080020c9 	.word	0x080020c9
 8001cf0:	080020c9 	.word	0x080020c9
 8001cf4:	08001ef9 	.word	0x08001ef9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001cfe:	e1e7      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d00:	4bb8      	ldr	r3, [pc, #736]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d06:	e1e3      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d08:	4bb4      	ldr	r3, [pc, #720]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d14:	4bb1      	ldr	r3, [pc, #708]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d071      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d20:	4bae      	ldr	r3, [pc, #696]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d46:	4622      	mov	r2, r4
 8001d48:	462b      	mov	r3, r5
 8001d4a:	f04f 0000 	mov.w	r0, #0
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	0159      	lsls	r1, r3, #5
 8001d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d58:	0150      	lsls	r0, r2, #5
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4621      	mov	r1, r4
 8001d60:	1a51      	subs	r1, r2, r1
 8001d62:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d64:	4629      	mov	r1, r5
 8001d66:	eb63 0301 	sbc.w	r3, r3, r1
 8001d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d78:	4649      	mov	r1, r9
 8001d7a:	018b      	lsls	r3, r1, #6
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d82:	4641      	mov	r1, r8
 8001d84:	018a      	lsls	r2, r1, #6
 8001d86:	4641      	mov	r1, r8
 8001d88:	1a51      	subs	r1, r2, r1
 8001d8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001da0:	4649      	mov	r1, r9
 8001da2:	00cb      	lsls	r3, r1, #3
 8001da4:	4641      	mov	r1, r8
 8001da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001daa:	4641      	mov	r1, r8
 8001dac:	00ca      	lsls	r2, r1, #3
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	4622      	mov	r2, r4
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dba:	462b      	mov	r3, r5
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	eb42 0303 	adc.w	r3, r2, r3
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	024b      	lsls	r3, r1, #9
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dda:	4621      	mov	r1, r4
 8001ddc:	024a      	lsls	r2, r1, #9
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001de6:	2200      	movs	r2, #0
 8001de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001dec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001df0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001df4:	f7fe fa5c 	bl	80002b0 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e02:	e067      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e04:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e1e:	2300      	movs	r3, #0
 8001e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e26:	4622      	mov	r2, r4
 8001e28:	462b      	mov	r3, r5
 8001e2a:	f04f 0000 	mov.w	r0, #0
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	0159      	lsls	r1, r3, #5
 8001e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e38:	0150      	lsls	r0, r2, #5
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4621      	mov	r1, r4
 8001e40:	1a51      	subs	r1, r2, r1
 8001e42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e44:	4629      	mov	r1, r5
 8001e46:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e58:	4649      	mov	r1, r9
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e62:	4641      	mov	r1, r8
 8001e64:	018a      	lsls	r2, r1, #6
 8001e66:	4641      	mov	r1, r8
 8001e68:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e86:	4692      	mov	sl, r2
 8001e88:	469b      	mov	fp, r3
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	eb1a 0303 	adds.w	r3, sl, r3
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	462b      	mov	r3, r5
 8001e94:	eb4b 0303 	adc.w	r3, fp, r3
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	028b      	lsls	r3, r1, #10
 8001eaa:	4621      	mov	r1, r4
 8001eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	028a      	lsls	r2, r1, #10
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ec0:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ec2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ec6:	f7fe f9f3 	bl	80002b0 <__aeabi_uldivmod>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4613      	mov	r3, r2
 8001ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ed4:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ef6:	e0eb      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef8:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f04:	4b35      	ldr	r3, [pc, #212]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d06b      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	2200      	movs	r2, #0
 8001f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f22:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f24:	2300      	movs	r3, #0
 8001f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	462b      	mov	r3, r5
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	0159      	lsls	r1, r3, #5
 8001f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3e:	0150      	lsls	r0, r2, #5
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4621      	mov	r1, r4
 8001f46:	1a51      	subs	r1, r2, r1
 8001f48:	61b9      	str	r1, [r7, #24]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f5e:	4659      	mov	r1, fp
 8001f60:	018b      	lsls	r3, r1, #6
 8001f62:	4651      	mov	r1, sl
 8001f64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f68:	4651      	mov	r1, sl
 8001f6a:	018a      	lsls	r2, r1, #6
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	ebb2 0801 	subs.w	r8, r2, r1
 8001f72:	4659      	mov	r1, fp
 8001f74:	eb63 0901 	sbc.w	r9, r3, r1
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	4699      	mov	r9, r3
 8001f90:	4623      	mov	r3, r4
 8001f92:	eb18 0303 	adds.w	r3, r8, r3
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	462b      	mov	r3, r5
 8001f9a:	eb49 0303 	adc.w	r3, r9, r3
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fac:	4629      	mov	r1, r5
 8001fae:	024b      	lsls	r3, r1, #9
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	024a      	lsls	r2, r1, #9
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fda:	e065      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x420>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ffe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002002:	4642      	mov	r2, r8
 8002004:	464b      	mov	r3, r9
 8002006:	f04f 0000 	mov.w	r0, #0
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	0159      	lsls	r1, r3, #5
 8002010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002014:	0150      	lsls	r0, r2, #5
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4641      	mov	r1, r8
 800201c:	1a51      	subs	r1, r2, r1
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	4649      	mov	r1, r9
 8002022:	eb63 0301 	sbc.w	r3, r3, r1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002034:	4659      	mov	r1, fp
 8002036:	018b      	lsls	r3, r1, #6
 8002038:	4651      	mov	r1, sl
 800203a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800203e:	4651      	mov	r1, sl
 8002040:	018a      	lsls	r2, r1, #6
 8002042:	4651      	mov	r1, sl
 8002044:	1a54      	subs	r4, r2, r1
 8002046:	4659      	mov	r1, fp
 8002048:	eb63 0501 	sbc.w	r5, r3, r1
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	00eb      	lsls	r3, r5, #3
 8002056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205a:	00e2      	lsls	r2, r4, #3
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4643      	mov	r3, r8
 8002062:	18e3      	adds	r3, r4, r3
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	464b      	mov	r3, r9
 8002068:	eb45 0303 	adc.w	r3, r5, r3
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800207a:	4629      	mov	r1, r5
 800207c:	028b      	lsls	r3, r1, #10
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002084:	4621      	mov	r1, r4
 8002086:	028a      	lsls	r2, r1, #10
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002090:	2200      	movs	r2, #0
 8002092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002094:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002096:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800209a:	f7fe f909 	bl	80002b0 <__aeabi_uldivmod>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4613      	mov	r3, r2
 80020a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020a8:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	0f1b      	lsrs	r3, r3, #28
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80020b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020c6:	e003      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	37b8      	adds	r7, #184	@ 0xb8
 80020d8:	46bd      	mov	sp, r7
 80020da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	00f42400 	.word	0x00f42400

080020e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e28d      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8083 	beq.w	800220e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002108:	4b94      	ldr	r3, [pc, #592]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b04      	cmp	r3, #4
 8002112:	d019      	beq.n	8002148 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002114:	4b91      	ldr	r3, [pc, #580]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800211c:	2b08      	cmp	r3, #8
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002120:	4b8e      	ldr	r3, [pc, #568]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800212c:	d00c      	beq.n	8002148 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212e:	4b8b      	ldr	r3, [pc, #556]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d112      	bne.n	8002160 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213a:	4b88      	ldr	r3, [pc, #544]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002146:	d10b      	bne.n	8002160 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4b84      	ldr	r3, [pc, #528]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d05b      	beq.n	800220c <HAL_RCC_OscConfig+0x124>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d157      	bne.n	800220c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e25a      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x90>
 800216a:	4b7c      	ldr	r3, [pc, #496]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7b      	ldr	r2, [pc, #492]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xcc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0xb4>
 8002182:	4b76      	ldr	r3, [pc, #472]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a75      	ldr	r2, [pc, #468]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b73      	ldr	r3, [pc, #460]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a72      	ldr	r2, [pc, #456]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xcc>
 800219c:	4b6f      	ldr	r3, [pc, #444]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6e      	ldr	r2, [pc, #440]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6b      	ldr	r2, [pc, #428]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f8ba 	bl	8001334 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff f8b6 	bl	8001334 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e21f      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b61      	ldr	r3, [pc, #388]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xdc>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff f8a6 	bl	8001334 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff f8a2 	bl	8001334 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	@ 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e20b      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b57      	ldr	r3, [pc, #348]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x104>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d06f      	beq.n	80022fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800221a:	4b50      	ldr	r3, [pc, #320]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002226:	4b4d      	ldr	r3, [pc, #308]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800222e:	2b08      	cmp	r3, #8
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002232:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223e:	4b47      	ldr	r3, [pc, #284]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224a:	4b44      	ldr	r3, [pc, #272]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x186>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1d3      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4937      	ldr	r1, [pc, #220]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_RCC_OscConfig+0x278>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7ff f84f 	bl	8001334 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff f84b 	bl	8001334 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1b4      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b28      	ldr	r3, [pc, #160]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4925      	ldr	r1, [pc, #148]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCC_OscConfig+0x278>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f82e 	bl	8001334 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff f82a 	bl	8001334 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e193      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d036      	beq.n	8002374 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_RCC_OscConfig+0x27c>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff f80e 	bl	8001334 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff f80a 	bl	8001334 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e173      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 8002330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x234>
 800233a:	e01b      	b.n	8002374 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233c:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <HAL_RCC_OscConfig+0x27c>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7fe fff7 	bl	8001334 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	e00e      	b.n	8002368 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234a:	f7fe fff3 	bl	8001334 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d907      	bls.n	8002368 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e15c      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
 800235c:	40023800 	.word	0x40023800
 8002360:	42470000 	.word	0x42470000
 8002364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	4b8a      	ldr	r3, [pc, #552]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ea      	bne.n	800234a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8097 	beq.w	80024b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b83      	ldr	r3, [pc, #524]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b7f      	ldr	r3, [pc, #508]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a7e      	ldr	r2, [pc, #504]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ae:	2301      	movs	r3, #1
 80023b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b79      	ldr	r3, [pc, #484]	@ (8002598 <HAL_RCC_OscConfig+0x4b0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023be:	4b76      	ldr	r3, [pc, #472]	@ (8002598 <HAL_RCC_OscConfig+0x4b0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a75      	ldr	r2, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x4b0>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ca:	f7fe ffb3 	bl	8001334 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7fe ffaf 	bl	8001334 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e118      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002598 <HAL_RCC_OscConfig+0x4b0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x31e>
 80023f8:	4b66      	ldr	r3, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fc:	4a65      	ldr	r2, [pc, #404]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6713      	str	r3, [r2, #112]	@ 0x70
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x358>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b05      	cmp	r3, #5
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x340>
 800240e:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	4a60      	ldr	r2, [pc, #384]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	6713      	str	r3, [r2, #112]	@ 0x70
 800241a:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241e:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6713      	str	r3, [r2, #112]	@ 0x70
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0x358>
 8002428:	4b5a      	ldr	r3, [pc, #360]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a59      	ldr	r2, [pc, #356]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
 8002434:	4b57      	ldr	r3, [pc, #348]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002438:	4a56      	ldr	r2, [pc, #344]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800243a:	f023 0304 	bic.w	r3, r3, #4
 800243e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7fe ff74 	bl	8001334 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe ff70 	bl	8001334 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0d7      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ee      	beq.n	8002450 <HAL_RCC_OscConfig+0x368>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe ff5e 	bl	8001334 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe ff5a 	bl	8001334 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0c1      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002492:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ee      	bne.n	800247c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80024aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80ad 	beq.w	8002614 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ba:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d060      	beq.n	8002588 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d145      	bne.n	800255a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x4b4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe ff2e 	bl	8001334 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe ff2a 	bl	8001334 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e093      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	019b      	lsls	r3, r3, #6
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	3b01      	subs	r3, #1
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	061b      	lsls	r3, r3, #24
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	071b      	lsls	r3, r3, #28
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4b4>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe feff 	bl	8001334 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fefb 	bl	8001334 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e064      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x452>
 8002558:	e05c      	b.n	8002614 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x4b4>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fee8 	bl	8001334 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fee4 	bl	8001334 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e04d      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x480>
 8002586:	e045      	b.n	8002614 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e040      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
 8002594:	40023800 	.word	0x40023800
 8002598:	40007000 	.word	0x40007000
 800259c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <HAL_RCC_OscConfig+0x538>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d030      	beq.n	8002610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d129      	bne.n	8002610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d122      	bne.n	8002610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d8:	4293      	cmp	r3, r2
 80025da:	d119      	bne.n	8002610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10f      	bne.n	8002610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07b      	b.n	800272e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002646:	d009      	beq.n	800265c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
 800264e:	e005      	b.n	800265c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fb00 	bl	8000c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002692:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e0:	ea42 0103 	orr.w	r1, r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0104 	and.w	r1, r3, #4
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	f003 0210 	and.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10e      	bne.n	8002778 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    return;
 8002776:	e0ce      	b.n	8002916 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_SPI_IRQHandler+0x5e>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
    return;
 8002794:	e0bf      	b.n	8002916 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_SPI_IRQHandler+0x7e>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80b0 	beq.w	8002916 <HAL_SPI_IRQHandler+0x1de>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80aa 	beq.w	8002916 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d011      	beq.n	80027fc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	e00b      	b.n	8002814 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
        return;
 8002812:	e080      	b.n	8002916 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d014      	beq.n	8002848 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	2b00      	cmp	r3, #0
 8002872:	d04f      	beq.n	8002914 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002882:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_SPI_IRQHandler+0x168>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d034      	beq.n	800290a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0203 	bic.w	r2, r2, #3
 80028ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d011      	beq.n	80028dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028bc:	4a17      	ldr	r2, [pc, #92]	@ (800291c <HAL_SPI_IRQHandler+0x1e4>)
 80028be:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fec2 	bl	800164e <HAL_DMA_Abort_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d016      	beq.n	8002912 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <HAL_SPI_IRQHandler+0x1e4>)
 80028ea:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe feac 	bl	800164e <HAL_DMA_Abort_IT>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002908:	e003      	b.n	8002912 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f808 	bl	8002920 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002910:	e000      	b.n	8002914 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002912:	bf00      	nop
    return;
 8002914:	bf00      	nop
  }
}
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	08002951 	.word	0x08002951

08002920 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002942:	b2db      	uxtb	r3, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ffd8 	bl	8002920 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e041      	b.n	8002a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f9c4 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f000 faac 	bl	8002f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d001      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e04e      	b.n	8002ace <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a23      	ldr	r2, [pc, #140]	@ (8002adc <HAL_TIM_Base_Start_IT+0xc4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d022      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5a:	d01d      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002aec <HAL_TIM_Base_Start_IT+0xd4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x80>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d010      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	e007      	b.n	8002acc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40000c00 	.word	0x40000c00
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40001800 	.word	0x40001800

08002af8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <HAL_TIM_Base_Stop_IT+0x48>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_TIM_Base_Stop_IT+0x48>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01b      	beq.n	8002bba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0202 	mvn.w	r2, #2
 8002b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f999 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002ba6:	e005      	b.n	8002bb4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f98b 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f99c 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01b      	beq.n	8002c06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0204 	mvn.w	r2, #4
 8002bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f973 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002bf2:	e005      	b.n	8002c00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f965 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f976 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01b      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0208 	mvn.w	r2, #8
 8002c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2204      	movs	r2, #4
 8002c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f94d 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f93f 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f950 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01b      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0210 	mvn.w	r2, #16
 8002c6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2208      	movs	r2, #8
 8002c74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f927 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002c8a:	e005      	b.n	8002c98 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f919 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f92a 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0201 	mvn.w	r2, #1
 8002cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fd fcbd 	bl	800063c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fae3 	bl	80032ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8fb 	bl	8002f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00c      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0220 	mvn.w	r2, #32
 8002d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fab5 	bl	8003298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_ConfigClockSource+0x1c>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0b4      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x186>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8a:	d03e      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xd4>
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d90:	f200 8087 	bhi.w	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d98:	f000 8086 	beq.w	8002ea8 <HAL_TIM_ConfigClockSource+0x172>
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da0:	d87f      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002da2:	2b70      	cmp	r3, #112	@ 0x70
 8002da4:	d01a      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0xa6>
 8002da6:	2b70      	cmp	r3, #112	@ 0x70
 8002da8:	d87b      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002daa:	2b60      	cmp	r3, #96	@ 0x60
 8002dac:	d050      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x11a>
 8002dae:	2b60      	cmp	r3, #96	@ 0x60
 8002db0:	d877      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002db2:	2b50      	cmp	r3, #80	@ 0x50
 8002db4:	d03c      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0xfa>
 8002db6:	2b50      	cmp	r3, #80	@ 0x50
 8002db8:	d873      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002dba:	2b40      	cmp	r3, #64	@ 0x40
 8002dbc:	d058      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0x13a>
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d86f      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc2:	2b30      	cmp	r3, #48	@ 0x30
 8002dc4:	d064      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc6:	2b30      	cmp	r3, #48	@ 0x30
 8002dc8:	d86b      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d060      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x15a>
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d867      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d05c      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x15a>
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d05a      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x15a>
 8002dda:	e062      	b.n	8002ea2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dec:	f000 f9b8 	bl	8003160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dfe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]
      break;
 8002e08:	e04f      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	f000 f9a1 	bl	8003160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e2c:	609a      	str	r2, [r3, #8]
      break;
 8002e2e:	e03c      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f000 f915 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2150      	movs	r1, #80	@ 0x50
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f96e 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002e4e:	e02c      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f000 f934 	bl	80030ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2160      	movs	r1, #96	@ 0x60
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f95e 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002e6e:	e01c      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f000 f8f5 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2140      	movs	r1, #64	@ 0x40
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f94e 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002e8e:	e00c      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 f945 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e003      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ea8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a46      	ldr	r2, [pc, #280]	@ (8003040 <TIM_Base_SetConfig+0x12c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f32:	d00f      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a43      	ldr	r2, [pc, #268]	@ (8003044 <TIM_Base_SetConfig+0x130>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a42      	ldr	r2, [pc, #264]	@ (8003048 <TIM_Base_SetConfig+0x134>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a41      	ldr	r2, [pc, #260]	@ (800304c <TIM_Base_SetConfig+0x138>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a40      	ldr	r2, [pc, #256]	@ (8003050 <TIM_Base_SetConfig+0x13c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d108      	bne.n	8002f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a35      	ldr	r2, [pc, #212]	@ (8003040 <TIM_Base_SetConfig+0x12c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f74:	d027      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a32      	ldr	r2, [pc, #200]	@ (8003044 <TIM_Base_SetConfig+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d023      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a31      	ldr	r2, [pc, #196]	@ (8003048 <TIM_Base_SetConfig+0x134>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01f      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a30      	ldr	r2, [pc, #192]	@ (800304c <TIM_Base_SetConfig+0x138>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01b      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2f      	ldr	r2, [pc, #188]	@ (8003050 <TIM_Base_SetConfig+0x13c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d017      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	@ (8003054 <TIM_Base_SetConfig+0x140>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <TIM_Base_SetConfig+0x144>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00f      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800305c <TIM_Base_SetConfig+0x148>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003060 <TIM_Base_SetConfig+0x14c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003064 <TIM_Base_SetConfig+0x150>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a29      	ldr	r2, [pc, #164]	@ (8003068 <TIM_Base_SetConfig+0x154>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <TIM_Base_SetConfig+0x12c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0xf8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <TIM_Base_SetConfig+0x13c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d103      	bne.n	8003014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
  }
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40010400 	.word	0x40010400
 8003054:	40014000 	.word	0x40014000
 8003058:	40014400 	.word	0x40014400
 800305c:	40014800 	.word	0x40014800
 8003060:	40001800 	.word	0x40001800
 8003064:	40001c00 	.word	0x40001c00
 8003068:	40002000 	.word	0x40002000

0800306c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0201 	bic.w	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 030a 	bic.w	r3, r3, #10
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 0210 	bic.w	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	031b      	lsls	r3, r3, #12
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003106:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	f043 0307 	orr.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800317a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	021a      	lsls	r2, r3, #8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	431a      	orrs	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e05a      	b.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a21      	ldr	r2, [pc, #132]	@ (800327c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003204:	d01d      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1a      	ldr	r2, [pc, #104]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a18      	ldr	r2, [pc, #96]	@ (800328c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10c      	bne.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4313      	orrs	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40010400 	.word	0x40010400
 8003290:	40014000 	.word	0x40014000
 8003294:	40001800 	.word	0x40001800

08003298 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e042      	b.n	8003358 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fd66 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fd69 	bl	8003ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	@ 0x28
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b20      	cmp	r3, #32
 800337e:	d175      	bne.n	800346c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_UART_Transmit+0x2c>
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e06e      	b.n	800346e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2221      	movs	r2, #33	@ 0x21
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fd ffc9 	bl	8001334 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b8:	d108      	bne.n	80033cc <HAL_UART_Transmit+0x6c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e003      	b.n	80033d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033d4:	e02e      	b.n	8003434 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb05 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e03a      	b.n	800346e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	3302      	adds	r3, #2
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e007      	b.n	8003426 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	3301      	adds	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1cb      	bne.n	80033d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	2140      	movs	r1, #64	@ 0x40
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fad1 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e006      	b.n	800346e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0ba      	sub	sp, #232	@ 0xe8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80034b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_UART_IRQHandler+0x66>
 80034ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fbc2 	bl	8003c60 <UART_Receive_IT>
      return;
 80034dc:	e25b      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80de 	beq.w	80036a4 <HAL_UART_IRQHandler+0x22c>
 80034e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80d1 	beq.w	80036a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_UART_IRQHandler+0xae>
 800350e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_UART_IRQHandler+0xd2>
 8003532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_UART_IRQHandler+0xf6>
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <HAL_UART_IRQHandler+0x126>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f043 0208 	orr.w	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 81f2 	beq.w	800398c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x14e>
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fb4d 	bl	8003c60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_UART_IRQHandler+0x17a>
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04f      	beq.n	8003692 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa55 	bl	8003aa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d141      	bne.n	800368a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800361c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003632:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800363e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800364a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1d9      	bne.n	8003606 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365e:	4a7e      	ldr	r2, [pc, #504]	@ (8003858 <HAL_UART_IRQHandler+0x3e0>)
 8003660:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fff1 	bl	800164e <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e00e      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f99e 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00a      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f99a 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e006      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f996 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800369e:	e175      	b.n	800398c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	bf00      	nop
    return;
 80036a2:	e173      	b.n	800398c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 814f 	bne.w	800394c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8148 	beq.w	800394c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8141 	beq.w	800394c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b40      	cmp	r3, #64	@ 0x40
 80036ec:	f040 80b6 	bne.w	800385c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8145 	beq.w	8003990 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800370a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800370e:	429a      	cmp	r2, r3
 8003710:	f080 813e 	bcs.w	8003990 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800371a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003726:	f000 8088 	beq.w	800383a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003756:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800375a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003762:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800376e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d9      	bne.n	800372a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003786:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800379a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800379e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e1      	bne.n	8003776 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e3      	bne.n	80037b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380a:	f023 0310 	bic.w	r3, r3, #16
 800380e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800381c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800381e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800382a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e3      	bne.n	80037f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fe9a 	bl	800156e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003848:	b29b      	uxth	r3, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	b29b      	uxth	r3, r3
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8c1 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003856:	e09b      	b.n	8003990 <HAL_UART_IRQHandler+0x518>
 8003858:	08003b69 	.word	0x08003b69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003864:	b29b      	uxth	r3, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 808e 	beq.w	8003994 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8089 	beq.w	8003994 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e3      	bne.n	8003882 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	623b      	str	r3, [r7, #32]
   return(result);
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3314      	adds	r3, #20
 80038da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038de:	633a      	str	r2, [r7, #48]	@ 0x30
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e3      	bne.n	80038ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003924:	61fa      	str	r2, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	617b      	str	r3, [r7, #20]
   return(result);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e3      	bne.n	8003900 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800393e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f847 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394a:	e023      	b.n	8003994 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_UART_IRQHandler+0x4f4>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f913 	bl	8003b90 <UART_Transmit_IT>
    return;
 800396a:	e014      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00e      	beq.n	8003996 <HAL_UART_IRQHandler+0x51e>
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f953 	bl	8003c30 <UART_EndTransmit_IT>
    return;
 800398a:	e004      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
    return;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
      return;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_UART_IRQHandler+0x51e>
      return;
 8003994:	bf00      	nop
  }
}
 8003996:	37e8      	adds	r7, #232	@ 0xe8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	e03b      	b.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d037      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fd fc93 	bl	8001334 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e03a      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d023      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d020      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d01d      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d116      	bne.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f81d 	bl	8003aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	bf0c      	ite	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	2300      	movne	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d0b4      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b095      	sub	sp, #84	@ 0x54
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aca:	643a      	str	r2, [r7, #64]	@ 0x40
 8003acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e5      	bne.n	8003aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d119      	bne.n	8003b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0310 	bic.w	r3, r3, #16
 8003b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b3a:	61ba      	str	r2, [r7, #24]
 8003b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	613b      	str	r3, [r7, #16]
   return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e5      	bne.n	8003b1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b5c:	bf00      	nop
 8003b5e:	3754      	adds	r7, #84	@ 0x54
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff ff1e 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b21      	cmp	r3, #33	@ 0x21
 8003ba2:	d13e      	bne.n	8003c22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bac:	d114      	bne.n	8003bd8 <UART_Transmit_IT+0x48>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d110      	bne.n	8003bd8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	621a      	str	r2, [r3, #32]
 8003bd6:	e008      	b.n	8003bea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	1c59      	adds	r1, r3, #1
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6211      	str	r1, [r2, #32]
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fea3 	bl	800399c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	@ 0x30
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b22      	cmp	r3, #34	@ 0x22
 8003c72:	f040 80ae 	bne.w	8003dd2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7e:	d117      	bne.n	8003cb0 <UART_Receive_IT+0x50>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	1c9a      	adds	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cae:	e026      	b.n	8003cfe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc2:	d007      	beq.n	8003cd4 <UART_Receive_IT+0x74>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <UART_Receive_IT+0x82>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e008      	b.n	8003cf4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d15d      	bne.n	8003dce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0220 	bic.w	r2, r2, #32
 8003d20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d135      	bne.n	8003dc4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f023 0310 	bic.w	r3, r3, #16
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7e:	623a      	str	r2, [r7, #32]
 8003d80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	69f9      	ldr	r1, [r7, #28]
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d10a      	bne.n	8003db6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fe0b 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
 8003dc2:	e002      	b.n	8003dca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fdf3 	bl	80039b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e002      	b.n	8003dd4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3730      	adds	r7, #48	@ 0x30
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b0c0      	sub	sp, #256	@ 0x100
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	68d9      	ldr	r1, [r3, #12]
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	ea40 0301 	orr.w	r3, r0, r1
 8003e04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e34:	f021 010c 	bic.w	r1, r1, #12
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e42:	430b      	orrs	r3, r1
 8003e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	6999      	ldr	r1, [r3, #24]
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	ea40 0301 	orr.w	r3, r0, r1
 8003e62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b8f      	ldr	r3, [pc, #572]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d005      	beq.n	8003e7c <UART_SetConfig+0xa0>
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b8d      	ldr	r3, [pc, #564]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d104      	bne.n	8003e86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e7c:	f7fd fef0 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 8003e80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e84:	e003      	b.n	8003e8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e86:	f7fd fed7 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8003e8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e98:	f040 810c 	bne.w	80040b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ea6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	1891      	adds	r1, r2, r2
 8003eb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	eb12 0801 	adds.w	r8, r2, r1
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	eb43 0901 	adc.w	r9, r3, r1
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ede:	4690      	mov	r8, r2
 8003ee0:	4699      	mov	r9, r3
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	eb18 0303 	adds.w	r3, r8, r3
 8003ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003eec:	462b      	mov	r3, r5
 8003eee:	eb49 0303 	adc.w	r3, r9, r3
 8003ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	18db      	adds	r3, r3, r3
 8003f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f10:	4613      	mov	r3, r2
 8003f12:	eb42 0303 	adc.w	r3, r2, r3
 8003f16:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f20:	f7fc f9c6 	bl	80002b0 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4b61      	ldr	r3, [pc, #388]	@ (80040b0 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	011c      	lsls	r4, r3, #4
 8003f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f44:	4642      	mov	r2, r8
 8003f46:	464b      	mov	r3, r9
 8003f48:	1891      	adds	r1, r2, r2
 8003f4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f4c:	415b      	adcs	r3, r3
 8003f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f54:	4641      	mov	r1, r8
 8003f56:	eb12 0a01 	adds.w	sl, r2, r1
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f74:	4692      	mov	sl, r2
 8003f76:	469b      	mov	fp, r3
 8003f78:	4643      	mov	r3, r8
 8003f7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f82:	464b      	mov	r3, r9
 8003f84:	eb4b 0303 	adc.w	r3, fp, r3
 8003f88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	18db      	adds	r3, r3, r3
 8003fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fb6:	f7fc f97b 	bl	80002b0 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80040b0 <UART_SetConfig+0x2d4>)
 8003fc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	2264      	movs	r2, #100	@ 0x64
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	1acb      	subs	r3, r1, r3
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fd6:	4b36      	ldr	r3, [pc, #216]	@ (80040b0 <UART_SetConfig+0x2d4>)
 8003fd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fe4:	441c      	add	r4, r3
 8003fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ff4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	1891      	adds	r1, r2, r2
 8003ffe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004000:	415b      	adcs	r3, r3
 8004002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004008:	4641      	mov	r1, r8
 800400a:	1851      	adds	r1, r2, r1
 800400c:	6339      	str	r1, [r7, #48]	@ 0x30
 800400e:	4649      	mov	r1, r9
 8004010:	414b      	adcs	r3, r1
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004020:	4659      	mov	r1, fp
 8004022:	00cb      	lsls	r3, r1, #3
 8004024:	4651      	mov	r1, sl
 8004026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800402a:	4651      	mov	r1, sl
 800402c:	00ca      	lsls	r2, r1, #3
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	4603      	mov	r3, r0
 8004034:	4642      	mov	r2, r8
 8004036:	189b      	adds	r3, r3, r2
 8004038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800403c:	464b      	mov	r3, r9
 800403e:	460a      	mov	r2, r1
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004054:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004058:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800405c:	460b      	mov	r3, r1
 800405e:	18db      	adds	r3, r3, r3
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004062:	4613      	mov	r3, r2
 8004064:	eb42 0303 	adc.w	r3, r2, r3
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800406e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004072:	f7fc f91d 	bl	80002b0 <__aeabi_uldivmod>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <UART_SetConfig+0x2d4>)
 800407c:	fba3 1302 	umull	r1, r3, r3, r2
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	2164      	movs	r1, #100	@ 0x64
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	3332      	adds	r3, #50	@ 0x32
 800408e:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <UART_SetConfig+0x2d4>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	f003 0207 	and.w	r2, r3, #7
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4422      	add	r2, r4
 80040a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040a4:	e106      	b.n	80042b4 <UART_SetConfig+0x4d8>
 80040a6:	bf00      	nop
 80040a8:	40011000 	.word	0x40011000
 80040ac:	40011400 	.word	0x40011400
 80040b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040c6:	4642      	mov	r2, r8
 80040c8:	464b      	mov	r3, r9
 80040ca:	1891      	adds	r1, r2, r2
 80040cc:	6239      	str	r1, [r7, #32]
 80040ce:	415b      	adcs	r3, r3
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040d6:	4641      	mov	r1, r8
 80040d8:	1854      	adds	r4, r2, r1
 80040da:	4649      	mov	r1, r9
 80040dc:	eb43 0501 	adc.w	r5, r3, r1
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	00eb      	lsls	r3, r5, #3
 80040ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ee:	00e2      	lsls	r2, r4, #3
 80040f0:	4614      	mov	r4, r2
 80040f2:	461d      	mov	r5, r3
 80040f4:	4643      	mov	r3, r8
 80040f6:	18e3      	adds	r3, r4, r3
 80040f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040fc:	464b      	mov	r3, r9
 80040fe:	eb45 0303 	adc.w	r3, r5, r3
 8004102:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004122:	4629      	mov	r1, r5
 8004124:	008b      	lsls	r3, r1, #2
 8004126:	4621      	mov	r1, r4
 8004128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800412c:	4621      	mov	r1, r4
 800412e:	008a      	lsls	r2, r1, #2
 8004130:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004134:	f7fc f8bc 	bl	80002b0 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4b60      	ldr	r3, [pc, #384]	@ (80042c0 <UART_SetConfig+0x4e4>)
 800413e:	fba3 2302 	umull	r2, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	011c      	lsls	r4, r3, #4
 8004146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004150:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004154:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004158:	4642      	mov	r2, r8
 800415a:	464b      	mov	r3, r9
 800415c:	1891      	adds	r1, r2, r2
 800415e:	61b9      	str	r1, [r7, #24]
 8004160:	415b      	adcs	r3, r3
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004168:	4641      	mov	r1, r8
 800416a:	1851      	adds	r1, r2, r1
 800416c:	6139      	str	r1, [r7, #16]
 800416e:	4649      	mov	r1, r9
 8004170:	414b      	adcs	r3, r1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004180:	4659      	mov	r1, fp
 8004182:	00cb      	lsls	r3, r1, #3
 8004184:	4651      	mov	r1, sl
 8004186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418a:	4651      	mov	r1, sl
 800418c:	00ca      	lsls	r2, r1, #3
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	4603      	mov	r3, r0
 8004194:	4642      	mov	r2, r8
 8004196:	189b      	adds	r3, r3, r2
 8004198:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800419c:	464b      	mov	r3, r9
 800419e:	460a      	mov	r2, r1
 80041a0:	eb42 0303 	adc.w	r3, r2, r3
 80041a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041c0:	4649      	mov	r1, r9
 80041c2:	008b      	lsls	r3, r1, #2
 80041c4:	4641      	mov	r1, r8
 80041c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ca:	4641      	mov	r1, r8
 80041cc:	008a      	lsls	r2, r1, #2
 80041ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041d2:	f7fc f86d 	bl	80002b0 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <UART_SetConfig+0x4e4>)
 80041de:	fba3 2301 	umull	r2, r3, r3, r1
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2264      	movs	r2, #100	@ 0x64
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	1acb      	subs	r3, r1, r3
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	3332      	adds	r3, #50	@ 0x32
 80041f0:	4a33      	ldr	r2, [pc, #204]	@ (80042c0 <UART_SetConfig+0x4e4>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041fc:	441c      	add	r4, r3
 80041fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004202:	2200      	movs	r2, #0
 8004204:	673b      	str	r3, [r7, #112]	@ 0x70
 8004206:	677a      	str	r2, [r7, #116]	@ 0x74
 8004208:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	415b      	adcs	r3, r3
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421c:	4641      	mov	r1, r8
 800421e:	1851      	adds	r1, r2, r1
 8004220:	6039      	str	r1, [r7, #0]
 8004222:	4649      	mov	r1, r9
 8004224:	414b      	adcs	r3, r1
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004234:	4659      	mov	r1, fp
 8004236:	00cb      	lsls	r3, r1, #3
 8004238:	4651      	mov	r1, sl
 800423a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423e:	4651      	mov	r1, sl
 8004240:	00ca      	lsls	r2, r1, #3
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4603      	mov	r3, r0
 8004248:	4642      	mov	r2, r8
 800424a:	189b      	adds	r3, r3, r2
 800424c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424e:	464b      	mov	r3, r9
 8004250:	460a      	mov	r2, r1
 8004252:	eb42 0303 	adc.w	r3, r2, r3
 8004256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	663b      	str	r3, [r7, #96]	@ 0x60
 8004262:	667a      	str	r2, [r7, #100]	@ 0x64
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004270:	4649      	mov	r1, r9
 8004272:	008b      	lsls	r3, r1, #2
 8004274:	4641      	mov	r1, r8
 8004276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427a:	4641      	mov	r1, r8
 800427c:	008a      	lsls	r2, r1, #2
 800427e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004282:	f7fc f815 	bl	80002b0 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <UART_SetConfig+0x4e4>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	@ 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	3332      	adds	r3, #50	@ 0x32
 800429e:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <UART_SetConfig+0x4e4>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4422      	add	r2, r4
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042ba:	46bd      	mov	sp, r7
 80042bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <std>:
 80042c4:	2300      	movs	r3, #0
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	e9c0 3300 	strd	r3, r3, [r0]
 80042ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042d2:	6083      	str	r3, [r0, #8]
 80042d4:	8181      	strh	r1, [r0, #12]
 80042d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d8:	81c2      	strh	r2, [r0, #14]
 80042da:	6183      	str	r3, [r0, #24]
 80042dc:	4619      	mov	r1, r3
 80042de:	2208      	movs	r2, #8
 80042e0:	305c      	adds	r0, #92	@ 0x5c
 80042e2:	f000 f906 	bl	80044f2 <memset>
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x58>)
 80042e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x5c>)
 80042ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x60>)
 80042f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x64>)
 80042f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x68>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d006      	beq.n	800430c <std+0x48>
 80042fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004302:	4294      	cmp	r4, r2
 8004304:	d002      	beq.n	800430c <std+0x48>
 8004306:	33d0      	adds	r3, #208	@ 0xd0
 8004308:	429c      	cmp	r4, r3
 800430a:	d105      	bne.n	8004318 <std+0x54>
 800430c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004314:	f000 b966 	b.w	80045e4 <__retarget_lock_init_recursive>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	0800446d 	.word	0x0800446d
 8004320:	0800448f 	.word	0x0800448f
 8004324:	080044c7 	.word	0x080044c7
 8004328:	080044eb 	.word	0x080044eb
 800432c:	2000022c 	.word	0x2000022c

08004330 <stdio_exit_handler>:
 8004330:	4a02      	ldr	r2, [pc, #8]	@ (800433c <stdio_exit_handler+0xc>)
 8004332:	4903      	ldr	r1, [pc, #12]	@ (8004340 <stdio_exit_handler+0x10>)
 8004334:	4803      	ldr	r0, [pc, #12]	@ (8004344 <stdio_exit_handler+0x14>)
 8004336:	f000 b869 	b.w	800440c <_fwalk_sglue>
 800433a:	bf00      	nop
 800433c:	20000014 	.word	0x20000014
 8004340:	08004e85 	.word	0x08004e85
 8004344:	20000024 	.word	0x20000024

08004348 <cleanup_stdio>:
 8004348:	6841      	ldr	r1, [r0, #4]
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <cleanup_stdio+0x34>)
 800434c:	4299      	cmp	r1, r3
 800434e:	b510      	push	{r4, lr}
 8004350:	4604      	mov	r4, r0
 8004352:	d001      	beq.n	8004358 <cleanup_stdio+0x10>
 8004354:	f000 fd96 	bl	8004e84 <_fflush_r>
 8004358:	68a1      	ldr	r1, [r4, #8]
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <cleanup_stdio+0x38>)
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <cleanup_stdio+0x1e>
 8004360:	4620      	mov	r0, r4
 8004362:	f000 fd8f 	bl	8004e84 <_fflush_r>
 8004366:	68e1      	ldr	r1, [r4, #12]
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <cleanup_stdio+0x3c>)
 800436a:	4299      	cmp	r1, r3
 800436c:	d004      	beq.n	8004378 <cleanup_stdio+0x30>
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004374:	f000 bd86 	b.w	8004e84 <_fflush_r>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	2000022c 	.word	0x2000022c
 8004380:	20000294 	.word	0x20000294
 8004384:	200002fc 	.word	0x200002fc

08004388 <global_stdio_init.part.0>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <global_stdio_init.part.0+0x30>)
 800438c:	4c0b      	ldr	r4, [pc, #44]	@ (80043bc <global_stdio_init.part.0+0x34>)
 800438e:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <global_stdio_init.part.0+0x38>)
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	4620      	mov	r0, r4
 8004394:	2200      	movs	r2, #0
 8004396:	2104      	movs	r1, #4
 8004398:	f7ff ff94 	bl	80042c4 <std>
 800439c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043a0:	2201      	movs	r2, #1
 80043a2:	2109      	movs	r1, #9
 80043a4:	f7ff ff8e 	bl	80042c4 <std>
 80043a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043ac:	2202      	movs	r2, #2
 80043ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b2:	2112      	movs	r1, #18
 80043b4:	f7ff bf86 	b.w	80042c4 <std>
 80043b8:	20000364 	.word	0x20000364
 80043bc:	2000022c 	.word	0x2000022c
 80043c0:	08004331 	.word	0x08004331

080043c4 <__sfp_lock_acquire>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__sfp_lock_acquire+0x8>)
 80043c6:	f000 b90e 	b.w	80045e6 <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	2000036d 	.word	0x2000036d

080043d0 <__sfp_lock_release>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__sfp_lock_release+0x8>)
 80043d2:	f000 b909 	b.w	80045e8 <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	2000036d 	.word	0x2000036d

080043dc <__sinit>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4604      	mov	r4, r0
 80043e0:	f7ff fff0 	bl	80043c4 <__sfp_lock_acquire>
 80043e4:	6a23      	ldr	r3, [r4, #32]
 80043e6:	b11b      	cbz	r3, 80043f0 <__sinit+0x14>
 80043e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ec:	f7ff bff0 	b.w	80043d0 <__sfp_lock_release>
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <__sinit+0x28>)
 80043f2:	6223      	str	r3, [r4, #32]
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__sinit+0x2c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f5      	bne.n	80043e8 <__sinit+0xc>
 80043fc:	f7ff ffc4 	bl	8004388 <global_stdio_init.part.0>
 8004400:	e7f2      	b.n	80043e8 <__sinit+0xc>
 8004402:	bf00      	nop
 8004404:	08004349 	.word	0x08004349
 8004408:	20000364 	.word	0x20000364

0800440c <_fwalk_sglue>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	4607      	mov	r7, r0
 8004412:	4688      	mov	r8, r1
 8004414:	4614      	mov	r4, r2
 8004416:	2600      	movs	r6, #0
 8004418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800441c:	f1b9 0901 	subs.w	r9, r9, #1
 8004420:	d505      	bpl.n	800442e <_fwalk_sglue+0x22>
 8004422:	6824      	ldr	r4, [r4, #0]
 8004424:	2c00      	cmp	r4, #0
 8004426:	d1f7      	bne.n	8004418 <_fwalk_sglue+0xc>
 8004428:	4630      	mov	r0, r6
 800442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442e:	89ab      	ldrh	r3, [r5, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d907      	bls.n	8004444 <_fwalk_sglue+0x38>
 8004434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004438:	3301      	adds	r3, #1
 800443a:	d003      	beq.n	8004444 <_fwalk_sglue+0x38>
 800443c:	4629      	mov	r1, r5
 800443e:	4638      	mov	r0, r7
 8004440:	47c0      	blx	r8
 8004442:	4306      	orrs	r6, r0
 8004444:	3568      	adds	r5, #104	@ 0x68
 8004446:	e7e9      	b.n	800441c <_fwalk_sglue+0x10>

08004448 <iprintf>:
 8004448:	b40f      	push	{r0, r1, r2, r3}
 800444a:	b507      	push	{r0, r1, r2, lr}
 800444c:	4906      	ldr	r1, [pc, #24]	@ (8004468 <iprintf+0x20>)
 800444e:	ab04      	add	r3, sp, #16
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	f853 2b04 	ldr.w	r2, [r3], #4
 8004456:	6881      	ldr	r1, [r0, #8]
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	f000 f9e9 	bl	8004830 <_vfiprintf_r>
 800445e:	b003      	add	sp, #12
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr
 8004468:	20000020 	.word	0x20000020

0800446c <__sread>:
 800446c:	b510      	push	{r4, lr}
 800446e:	460c      	mov	r4, r1
 8004470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004474:	f000 f868 	bl	8004548 <_read_r>
 8004478:	2800      	cmp	r0, #0
 800447a:	bfab      	itete	ge
 800447c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800447e:	89a3      	ldrhlt	r3, [r4, #12]
 8004480:	181b      	addge	r3, r3, r0
 8004482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004486:	bfac      	ite	ge
 8004488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800448a:	81a3      	strhlt	r3, [r4, #12]
 800448c:	bd10      	pop	{r4, pc}

0800448e <__swrite>:
 800448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	461f      	mov	r7, r3
 8004494:	898b      	ldrh	r3, [r1, #12]
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	4605      	mov	r5, r0
 800449a:	460c      	mov	r4, r1
 800449c:	4616      	mov	r6, r2
 800449e:	d505      	bpl.n	80044ac <__swrite+0x1e>
 80044a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a4:	2302      	movs	r3, #2
 80044a6:	2200      	movs	r2, #0
 80044a8:	f000 f83c 	bl	8004524 <_lseek_r>
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	4632      	mov	r2, r6
 80044ba:	463b      	mov	r3, r7
 80044bc:	4628      	mov	r0, r5
 80044be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c2:	f000 b853 	b.w	800456c <_write_r>

080044c6 <__sseek>:
 80044c6:	b510      	push	{r4, lr}
 80044c8:	460c      	mov	r4, r1
 80044ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ce:	f000 f829 	bl	8004524 <_lseek_r>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	bf15      	itete	ne
 80044d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044e2:	81a3      	strheq	r3, [r4, #12]
 80044e4:	bf18      	it	ne
 80044e6:	81a3      	strhne	r3, [r4, #12]
 80044e8:	bd10      	pop	{r4, pc}

080044ea <__sclose>:
 80044ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ee:	f000 b809 	b.w	8004504 <_close_r>

080044f2 <memset>:
 80044f2:	4402      	add	r2, r0
 80044f4:	4603      	mov	r3, r0
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d100      	bne.n	80044fc <memset+0xa>
 80044fa:	4770      	bx	lr
 80044fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004500:	e7f9      	b.n	80044f6 <memset+0x4>
	...

08004504 <_close_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d06      	ldr	r5, [pc, #24]	@ (8004520 <_close_r+0x1c>)
 8004508:	2300      	movs	r3, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc fe03 	bl	800111a <_close>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_close_r+0x1a>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_close_r+0x1a>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	20000368 	.word	0x20000368

08004524 <_lseek_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d07      	ldr	r5, [pc, #28]	@ (8004544 <_lseek_r+0x20>)
 8004528:	4604      	mov	r4, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	602a      	str	r2, [r5, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fc fe18 	bl	8001168 <_lseek>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_lseek_r+0x1e>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_lseek_r+0x1e>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20000368 	.word	0x20000368

08004548 <_read_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d07      	ldr	r5, [pc, #28]	@ (8004568 <_read_r+0x20>)
 800454c:	4604      	mov	r4, r0
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	2200      	movs	r2, #0
 8004554:	602a      	str	r2, [r5, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f7fc fdc2 	bl	80010e0 <_read>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_read_r+0x1e>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_read_r+0x1e>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000368 	.word	0x20000368

0800456c <_write_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	@ (800458c <_write_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fb3a 	bl	8000bf4 <_write>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_write_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_write_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000368 	.word	0x20000368

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	@ (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000020 	.word	0x20000020

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	@ (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	@ (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	@ (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	@ (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 fdb8 	bl	8005124 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	08005198 	.word	0x08005198
 80045d8:	08005198 	.word	0x08005198
 80045dc:	08005198 	.word	0x08005198
 80045e0:	0800519c 	.word	0x0800519c

080045e4 <__retarget_lock_init_recursive>:
 80045e4:	4770      	bx	lr

080045e6 <__retarget_lock_acquire_recursive>:
 80045e6:	4770      	bx	lr

080045e8 <__retarget_lock_release_recursive>:
 80045e8:	4770      	bx	lr
	...

080045ec <_free_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4605      	mov	r5, r0
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d041      	beq.n	8004678 <_free_r+0x8c>
 80045f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f8:	1f0c      	subs	r4, r1, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bfb8      	it	lt
 80045fe:	18e4      	addlt	r4, r4, r3
 8004600:	f000 f8e0 	bl	80047c4 <__malloc_lock>
 8004604:	4a1d      	ldr	r2, [pc, #116]	@ (800467c <_free_r+0x90>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	b933      	cbnz	r3, 8004618 <_free_r+0x2c>
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	6014      	str	r4, [r2, #0]
 800460e:	4628      	mov	r0, r5
 8004610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004614:	f000 b8dc 	b.w	80047d0 <__malloc_unlock>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d908      	bls.n	800462e <_free_r+0x42>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	1821      	adds	r1, r4, r0
 8004620:	428b      	cmp	r3, r1
 8004622:	bf01      	itttt	eq
 8004624:	6819      	ldreq	r1, [r3, #0]
 8004626:	685b      	ldreq	r3, [r3, #4]
 8004628:	1809      	addeq	r1, r1, r0
 800462a:	6021      	streq	r1, [r4, #0]
 800462c:	e7ed      	b.n	800460a <_free_r+0x1e>
 800462e:	461a      	mov	r2, r3
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b10b      	cbz	r3, 8004638 <_free_r+0x4c>
 8004634:	42a3      	cmp	r3, r4
 8004636:	d9fa      	bls.n	800462e <_free_r+0x42>
 8004638:	6811      	ldr	r1, [r2, #0]
 800463a:	1850      	adds	r0, r2, r1
 800463c:	42a0      	cmp	r0, r4
 800463e:	d10b      	bne.n	8004658 <_free_r+0x6c>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	4401      	add	r1, r0
 8004644:	1850      	adds	r0, r2, r1
 8004646:	4283      	cmp	r3, r0
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	d1e0      	bne.n	800460e <_free_r+0x22>
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	6053      	str	r3, [r2, #4]
 8004652:	4408      	add	r0, r1
 8004654:	6010      	str	r0, [r2, #0]
 8004656:	e7da      	b.n	800460e <_free_r+0x22>
 8004658:	d902      	bls.n	8004660 <_free_r+0x74>
 800465a:	230c      	movs	r3, #12
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	e7d6      	b.n	800460e <_free_r+0x22>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428b      	cmp	r3, r1
 8004666:	bf04      	itt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	6063      	str	r3, [r4, #4]
 800466e:	bf04      	itt	eq
 8004670:	1809      	addeq	r1, r1, r0
 8004672:	6021      	streq	r1, [r4, #0]
 8004674:	6054      	str	r4, [r2, #4]
 8004676:	e7ca      	b.n	800460e <_free_r+0x22>
 8004678:	bd38      	pop	{r3, r4, r5, pc}
 800467a:	bf00      	nop
 800467c:	20000374 	.word	0x20000374

08004680 <sbrk_aligned>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4e0f      	ldr	r6, [pc, #60]	@ (80046c0 <sbrk_aligned+0x40>)
 8004684:	460c      	mov	r4, r1
 8004686:	6831      	ldr	r1, [r6, #0]
 8004688:	4605      	mov	r5, r0
 800468a:	b911      	cbnz	r1, 8004692 <sbrk_aligned+0x12>
 800468c:	f000 fcb6 	bl	8004ffc <_sbrk_r>
 8004690:	6030      	str	r0, [r6, #0]
 8004692:	4621      	mov	r1, r4
 8004694:	4628      	mov	r0, r5
 8004696:	f000 fcb1 	bl	8004ffc <_sbrk_r>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	d103      	bne.n	80046a6 <sbrk_aligned+0x26>
 800469e:	f04f 34ff 	mov.w	r4, #4294967295
 80046a2:	4620      	mov	r0, r4
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d0f8      	beq.n	80046a2 <sbrk_aligned+0x22>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fca2 	bl	8004ffc <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d1f2      	bne.n	80046a2 <sbrk_aligned+0x22>
 80046bc:	e7ef      	b.n	800469e <sbrk_aligned+0x1e>
 80046be:	bf00      	nop
 80046c0:	20000370 	.word	0x20000370

080046c4 <_malloc_r>:
 80046c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c8:	1ccd      	adds	r5, r1, #3
 80046ca:	f025 0503 	bic.w	r5, r5, #3
 80046ce:	3508      	adds	r5, #8
 80046d0:	2d0c      	cmp	r5, #12
 80046d2:	bf38      	it	cc
 80046d4:	250c      	movcc	r5, #12
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	4606      	mov	r6, r0
 80046da:	db01      	blt.n	80046e0 <_malloc_r+0x1c>
 80046dc:	42a9      	cmp	r1, r5
 80046de:	d904      	bls.n	80046ea <_malloc_r+0x26>
 80046e0:	230c      	movs	r3, #12
 80046e2:	6033      	str	r3, [r6, #0]
 80046e4:	2000      	movs	r0, #0
 80046e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c0 <_malloc_r+0xfc>
 80046ee:	f000 f869 	bl	80047c4 <__malloc_lock>
 80046f2:	f8d8 3000 	ldr.w	r3, [r8]
 80046f6:	461c      	mov	r4, r3
 80046f8:	bb44      	cbnz	r4, 800474c <_malloc_r+0x88>
 80046fa:	4629      	mov	r1, r5
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7ff ffbf 	bl	8004680 <sbrk_aligned>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	4604      	mov	r4, r0
 8004706:	d158      	bne.n	80047ba <_malloc_r+0xf6>
 8004708:	f8d8 4000 	ldr.w	r4, [r8]
 800470c:	4627      	mov	r7, r4
 800470e:	2f00      	cmp	r7, #0
 8004710:	d143      	bne.n	800479a <_malloc_r+0xd6>
 8004712:	2c00      	cmp	r4, #0
 8004714:	d04b      	beq.n	80047ae <_malloc_r+0xea>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	4639      	mov	r1, r7
 800471a:	4630      	mov	r0, r6
 800471c:	eb04 0903 	add.w	r9, r4, r3
 8004720:	f000 fc6c 	bl	8004ffc <_sbrk_r>
 8004724:	4581      	cmp	r9, r0
 8004726:	d142      	bne.n	80047ae <_malloc_r+0xea>
 8004728:	6821      	ldr	r1, [r4, #0]
 800472a:	1a6d      	subs	r5, r5, r1
 800472c:	4629      	mov	r1, r5
 800472e:	4630      	mov	r0, r6
 8004730:	f7ff ffa6 	bl	8004680 <sbrk_aligned>
 8004734:	3001      	adds	r0, #1
 8004736:	d03a      	beq.n	80047ae <_malloc_r+0xea>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	442b      	add	r3, r5
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	f8d8 3000 	ldr.w	r3, [r8]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	bb62      	cbnz	r2, 80047a0 <_malloc_r+0xdc>
 8004746:	f8c8 7000 	str.w	r7, [r8]
 800474a:	e00f      	b.n	800476c <_malloc_r+0xa8>
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	1b52      	subs	r2, r2, r5
 8004750:	d420      	bmi.n	8004794 <_malloc_r+0xd0>
 8004752:	2a0b      	cmp	r2, #11
 8004754:	d917      	bls.n	8004786 <_malloc_r+0xc2>
 8004756:	1961      	adds	r1, r4, r5
 8004758:	42a3      	cmp	r3, r4
 800475a:	6025      	str	r5, [r4, #0]
 800475c:	bf18      	it	ne
 800475e:	6059      	strne	r1, [r3, #4]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	bf08      	it	eq
 8004764:	f8c8 1000 	streq.w	r1, [r8]
 8004768:	5162      	str	r2, [r4, r5]
 800476a:	604b      	str	r3, [r1, #4]
 800476c:	4630      	mov	r0, r6
 800476e:	f000 f82f 	bl	80047d0 <__malloc_unlock>
 8004772:	f104 000b 	add.w	r0, r4, #11
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	f020 0007 	bic.w	r0, r0, #7
 800477c:	1ac2      	subs	r2, r0, r3
 800477e:	bf1c      	itt	ne
 8004780:	1a1b      	subne	r3, r3, r0
 8004782:	50a3      	strne	r3, [r4, r2]
 8004784:	e7af      	b.n	80046e6 <_malloc_r+0x22>
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	42a3      	cmp	r3, r4
 800478a:	bf0c      	ite	eq
 800478c:	f8c8 2000 	streq.w	r2, [r8]
 8004790:	605a      	strne	r2, [r3, #4]
 8004792:	e7eb      	b.n	800476c <_malloc_r+0xa8>
 8004794:	4623      	mov	r3, r4
 8004796:	6864      	ldr	r4, [r4, #4]
 8004798:	e7ae      	b.n	80046f8 <_malloc_r+0x34>
 800479a:	463c      	mov	r4, r7
 800479c:	687f      	ldr	r7, [r7, #4]
 800479e:	e7b6      	b.n	800470e <_malloc_r+0x4a>
 80047a0:	461a      	mov	r2, r3
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d1fb      	bne.n	80047a0 <_malloc_r+0xdc>
 80047a8:	2300      	movs	r3, #0
 80047aa:	6053      	str	r3, [r2, #4]
 80047ac:	e7de      	b.n	800476c <_malloc_r+0xa8>
 80047ae:	230c      	movs	r3, #12
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	4630      	mov	r0, r6
 80047b4:	f000 f80c 	bl	80047d0 <__malloc_unlock>
 80047b8:	e794      	b.n	80046e4 <_malloc_r+0x20>
 80047ba:	6005      	str	r5, [r0, #0]
 80047bc:	e7d6      	b.n	800476c <_malloc_r+0xa8>
 80047be:	bf00      	nop
 80047c0:	20000374 	.word	0x20000374

080047c4 <__malloc_lock>:
 80047c4:	4801      	ldr	r0, [pc, #4]	@ (80047cc <__malloc_lock+0x8>)
 80047c6:	f7ff bf0e 	b.w	80045e6 <__retarget_lock_acquire_recursive>
 80047ca:	bf00      	nop
 80047cc:	2000036c 	.word	0x2000036c

080047d0 <__malloc_unlock>:
 80047d0:	4801      	ldr	r0, [pc, #4]	@ (80047d8 <__malloc_unlock+0x8>)
 80047d2:	f7ff bf09 	b.w	80045e8 <__retarget_lock_release_recursive>
 80047d6:	bf00      	nop
 80047d8:	2000036c 	.word	0x2000036c

080047dc <__sfputc_r>:
 80047dc:	6893      	ldr	r3, [r2, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	b410      	push	{r4}
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	da08      	bge.n	80047fa <__sfputc_r+0x1e>
 80047e8:	6994      	ldr	r4, [r2, #24]
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	db01      	blt.n	80047f2 <__sfputc_r+0x16>
 80047ee:	290a      	cmp	r1, #10
 80047f0:	d103      	bne.n	80047fa <__sfputc_r+0x1e>
 80047f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f6:	f000 bb6d 	b.w	8004ed4 <__swbuf_r>
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	1c58      	adds	r0, r3, #1
 80047fe:	6010      	str	r0, [r2, #0]
 8004800:	7019      	strb	r1, [r3, #0]
 8004802:	4608      	mov	r0, r1
 8004804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004808:	4770      	bx	lr

0800480a <__sfputs_r>:
 800480a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480c:	4606      	mov	r6, r0
 800480e:	460f      	mov	r7, r1
 8004810:	4614      	mov	r4, r2
 8004812:	18d5      	adds	r5, r2, r3
 8004814:	42ac      	cmp	r4, r5
 8004816:	d101      	bne.n	800481c <__sfputs_r+0x12>
 8004818:	2000      	movs	r0, #0
 800481a:	e007      	b.n	800482c <__sfputs_r+0x22>
 800481c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004820:	463a      	mov	r2, r7
 8004822:	4630      	mov	r0, r6
 8004824:	f7ff ffda 	bl	80047dc <__sfputc_r>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d1f3      	bne.n	8004814 <__sfputs_r+0xa>
 800482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004830 <_vfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	460d      	mov	r5, r1
 8004836:	b09d      	sub	sp, #116	@ 0x74
 8004838:	4614      	mov	r4, r2
 800483a:	4698      	mov	r8, r3
 800483c:	4606      	mov	r6, r0
 800483e:	b118      	cbz	r0, 8004848 <_vfiprintf_r+0x18>
 8004840:	6a03      	ldr	r3, [r0, #32]
 8004842:	b90b      	cbnz	r3, 8004848 <_vfiprintf_r+0x18>
 8004844:	f7ff fdca 	bl	80043dc <__sinit>
 8004848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800484a:	07d9      	lsls	r1, r3, #31
 800484c:	d405      	bmi.n	800485a <_vfiprintf_r+0x2a>
 800484e:	89ab      	ldrh	r3, [r5, #12]
 8004850:	059a      	lsls	r2, r3, #22
 8004852:	d402      	bmi.n	800485a <_vfiprintf_r+0x2a>
 8004854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004856:	f7ff fec6 	bl	80045e6 <__retarget_lock_acquire_recursive>
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	071b      	lsls	r3, r3, #28
 800485e:	d501      	bpl.n	8004864 <_vfiprintf_r+0x34>
 8004860:	692b      	ldr	r3, [r5, #16]
 8004862:	b99b      	cbnz	r3, 800488c <_vfiprintf_r+0x5c>
 8004864:	4629      	mov	r1, r5
 8004866:	4630      	mov	r0, r6
 8004868:	f000 fb72 	bl	8004f50 <__swsetup_r>
 800486c:	b170      	cbz	r0, 800488c <_vfiprintf_r+0x5c>
 800486e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004870:	07dc      	lsls	r4, r3, #31
 8004872:	d504      	bpl.n	800487e <_vfiprintf_r+0x4e>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	b01d      	add	sp, #116	@ 0x74
 800487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	0598      	lsls	r0, r3, #22
 8004882:	d4f7      	bmi.n	8004874 <_vfiprintf_r+0x44>
 8004884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004886:	f7ff feaf 	bl	80045e8 <__retarget_lock_release_recursive>
 800488a:	e7f3      	b.n	8004874 <_vfiprintf_r+0x44>
 800488c:	2300      	movs	r3, #0
 800488e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004890:	2320      	movs	r3, #32
 8004892:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004896:	f8cd 800c 	str.w	r8, [sp, #12]
 800489a:	2330      	movs	r3, #48	@ 0x30
 800489c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a4c <_vfiprintf_r+0x21c>
 80048a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048a4:	f04f 0901 	mov.w	r9, #1
 80048a8:	4623      	mov	r3, r4
 80048aa:	469a      	mov	sl, r3
 80048ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b0:	b10a      	cbz	r2, 80048b6 <_vfiprintf_r+0x86>
 80048b2:	2a25      	cmp	r2, #37	@ 0x25
 80048b4:	d1f9      	bne.n	80048aa <_vfiprintf_r+0x7a>
 80048b6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ba:	d00b      	beq.n	80048d4 <_vfiprintf_r+0xa4>
 80048bc:	465b      	mov	r3, fp
 80048be:	4622      	mov	r2, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ffa1 	bl	800480a <__sfputs_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	f000 80a7 	beq.w	8004a1c <_vfiprintf_r+0x1ec>
 80048ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048d0:	445a      	add	r2, fp
 80048d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80048d4:	f89a 3000 	ldrb.w	r3, [sl]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 809f 	beq.w	8004a1c <_vfiprintf_r+0x1ec>
 80048de:	2300      	movs	r3, #0
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e8:	f10a 0a01 	add.w	sl, sl, #1
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9307      	str	r3, [sp, #28]
 80048f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80048f6:	4654      	mov	r4, sl
 80048f8:	2205      	movs	r2, #5
 80048fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fe:	4853      	ldr	r0, [pc, #332]	@ (8004a4c <_vfiprintf_r+0x21c>)
 8004900:	f7fb fc86 	bl	8000210 <memchr>
 8004904:	9a04      	ldr	r2, [sp, #16]
 8004906:	b9d8      	cbnz	r0, 8004940 <_vfiprintf_r+0x110>
 8004908:	06d1      	lsls	r1, r2, #27
 800490a:	bf44      	itt	mi
 800490c:	2320      	movmi	r3, #32
 800490e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004912:	0713      	lsls	r3, r2, #28
 8004914:	bf44      	itt	mi
 8004916:	232b      	movmi	r3, #43	@ 0x2b
 8004918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800491c:	f89a 3000 	ldrb.w	r3, [sl]
 8004920:	2b2a      	cmp	r3, #42	@ 0x2a
 8004922:	d015      	beq.n	8004950 <_vfiprintf_r+0x120>
 8004924:	9a07      	ldr	r2, [sp, #28]
 8004926:	4654      	mov	r4, sl
 8004928:	2000      	movs	r0, #0
 800492a:	f04f 0c0a 	mov.w	ip, #10
 800492e:	4621      	mov	r1, r4
 8004930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004934:	3b30      	subs	r3, #48	@ 0x30
 8004936:	2b09      	cmp	r3, #9
 8004938:	d94b      	bls.n	80049d2 <_vfiprintf_r+0x1a2>
 800493a:	b1b0      	cbz	r0, 800496a <_vfiprintf_r+0x13a>
 800493c:	9207      	str	r2, [sp, #28]
 800493e:	e014      	b.n	800496a <_vfiprintf_r+0x13a>
 8004940:	eba0 0308 	sub.w	r3, r0, r8
 8004944:	fa09 f303 	lsl.w	r3, r9, r3
 8004948:	4313      	orrs	r3, r2
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	46a2      	mov	sl, r4
 800494e:	e7d2      	b.n	80048f6 <_vfiprintf_r+0xc6>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	1d19      	adds	r1, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	9103      	str	r1, [sp, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	bfbb      	ittet	lt
 800495c:	425b      	neglt	r3, r3
 800495e:	f042 0202 	orrlt.w	r2, r2, #2
 8004962:	9307      	strge	r3, [sp, #28]
 8004964:	9307      	strlt	r3, [sp, #28]
 8004966:	bfb8      	it	lt
 8004968:	9204      	strlt	r2, [sp, #16]
 800496a:	7823      	ldrb	r3, [r4, #0]
 800496c:	2b2e      	cmp	r3, #46	@ 0x2e
 800496e:	d10a      	bne.n	8004986 <_vfiprintf_r+0x156>
 8004970:	7863      	ldrb	r3, [r4, #1]
 8004972:	2b2a      	cmp	r3, #42	@ 0x2a
 8004974:	d132      	bne.n	80049dc <_vfiprintf_r+0x1ac>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	9203      	str	r2, [sp, #12]
 800497e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004982:	3402      	adds	r4, #2
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a5c <_vfiprintf_r+0x22c>
 800498a:	7821      	ldrb	r1, [r4, #0]
 800498c:	2203      	movs	r2, #3
 800498e:	4650      	mov	r0, sl
 8004990:	f7fb fc3e 	bl	8000210 <memchr>
 8004994:	b138      	cbz	r0, 80049a6 <_vfiprintf_r+0x176>
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	eba0 000a 	sub.w	r0, r0, sl
 800499c:	2240      	movs	r2, #64	@ 0x40
 800499e:	4082      	lsls	r2, r0
 80049a0:	4313      	orrs	r3, r2
 80049a2:	3401      	adds	r4, #1
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049aa:	4829      	ldr	r0, [pc, #164]	@ (8004a50 <_vfiprintf_r+0x220>)
 80049ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049b0:	2206      	movs	r2, #6
 80049b2:	f7fb fc2d 	bl	8000210 <memchr>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d03f      	beq.n	8004a3a <_vfiprintf_r+0x20a>
 80049ba:	4b26      	ldr	r3, [pc, #152]	@ (8004a54 <_vfiprintf_r+0x224>)
 80049bc:	bb1b      	cbnz	r3, 8004a06 <_vfiprintf_r+0x1d6>
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	3307      	adds	r3, #7
 80049c2:	f023 0307 	bic.w	r3, r3, #7
 80049c6:	3308      	adds	r3, #8
 80049c8:	9303      	str	r3, [sp, #12]
 80049ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049cc:	443b      	add	r3, r7
 80049ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d0:	e76a      	b.n	80048a8 <_vfiprintf_r+0x78>
 80049d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049d6:	460c      	mov	r4, r1
 80049d8:	2001      	movs	r0, #1
 80049da:	e7a8      	b.n	800492e <_vfiprintf_r+0xfe>
 80049dc:	2300      	movs	r3, #0
 80049de:	3401      	adds	r4, #1
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	4619      	mov	r1, r3
 80049e4:	f04f 0c0a 	mov.w	ip, #10
 80049e8:	4620      	mov	r0, r4
 80049ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ee:	3a30      	subs	r2, #48	@ 0x30
 80049f0:	2a09      	cmp	r2, #9
 80049f2:	d903      	bls.n	80049fc <_vfiprintf_r+0x1cc>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0c6      	beq.n	8004986 <_vfiprintf_r+0x156>
 80049f8:	9105      	str	r1, [sp, #20]
 80049fa:	e7c4      	b.n	8004986 <_vfiprintf_r+0x156>
 80049fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a00:	4604      	mov	r4, r0
 8004a02:	2301      	movs	r3, #1
 8004a04:	e7f0      	b.n	80049e8 <_vfiprintf_r+0x1b8>
 8004a06:	ab03      	add	r3, sp, #12
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	462a      	mov	r2, r5
 8004a0c:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <_vfiprintf_r+0x228>)
 8004a0e:	a904      	add	r1, sp, #16
 8004a10:	4630      	mov	r0, r6
 8004a12:	f3af 8000 	nop.w
 8004a16:	4607      	mov	r7, r0
 8004a18:	1c78      	adds	r0, r7, #1
 8004a1a:	d1d6      	bne.n	80049ca <_vfiprintf_r+0x19a>
 8004a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a1e:	07d9      	lsls	r1, r3, #31
 8004a20:	d405      	bmi.n	8004a2e <_vfiprintf_r+0x1fe>
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	059a      	lsls	r2, r3, #22
 8004a26:	d402      	bmi.n	8004a2e <_vfiprintf_r+0x1fe>
 8004a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a2a:	f7ff fddd 	bl	80045e8 <__retarget_lock_release_recursive>
 8004a2e:	89ab      	ldrh	r3, [r5, #12]
 8004a30:	065b      	lsls	r3, r3, #25
 8004a32:	f53f af1f 	bmi.w	8004874 <_vfiprintf_r+0x44>
 8004a36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a38:	e71e      	b.n	8004878 <_vfiprintf_r+0x48>
 8004a3a:	ab03      	add	r3, sp, #12
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	462a      	mov	r2, r5
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <_vfiprintf_r+0x228>)
 8004a42:	a904      	add	r1, sp, #16
 8004a44:	4630      	mov	r0, r6
 8004a46:	f000 f879 	bl	8004b3c <_printf_i>
 8004a4a:	e7e4      	b.n	8004a16 <_vfiprintf_r+0x1e6>
 8004a4c:	0800515c 	.word	0x0800515c
 8004a50:	08005166 	.word	0x08005166
 8004a54:	00000000 	.word	0x00000000
 8004a58:	0800480b 	.word	0x0800480b
 8004a5c:	08005162 	.word	0x08005162

08004a60 <_printf_common>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4616      	mov	r6, r2
 8004a66:	4698      	mov	r8, r3
 8004a68:	688a      	ldr	r2, [r1, #8]
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bfb8      	it	lt
 8004a74:	4613      	movlt	r3, r2
 8004a76:	6033      	str	r3, [r6, #0]
 8004a78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	b10a      	cbz	r2, 8004a86 <_printf_common+0x26>
 8004a82:	3301      	adds	r3, #1
 8004a84:	6033      	str	r3, [r6, #0]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	0699      	lsls	r1, r3, #26
 8004a8a:	bf42      	ittt	mi
 8004a8c:	6833      	ldrmi	r3, [r6, #0]
 8004a8e:	3302      	addmi	r3, #2
 8004a90:	6033      	strmi	r3, [r6, #0]
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	f015 0506 	ands.w	r5, r5, #6
 8004a98:	d106      	bne.n	8004aa8 <_printf_common+0x48>
 8004a9a:	f104 0a19 	add.w	sl, r4, #25
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	6832      	ldr	r2, [r6, #0]
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	dc26      	bgt.n	8004af6 <_printf_common+0x96>
 8004aa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004aac:	6822      	ldr	r2, [r4, #0]
 8004aae:	3b00      	subs	r3, #0
 8004ab0:	bf18      	it	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	0692      	lsls	r2, r2, #26
 8004ab6:	d42b      	bmi.n	8004b10 <_printf_common+0xb0>
 8004ab8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004abc:	4641      	mov	r1, r8
 8004abe:	4638      	mov	r0, r7
 8004ac0:	47c8      	blx	r9
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d01e      	beq.n	8004b04 <_printf_common+0xa4>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	6922      	ldr	r2, [r4, #16]
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	bf02      	ittt	eq
 8004ad2:	68e5      	ldreq	r5, [r4, #12]
 8004ad4:	6833      	ldreq	r3, [r6, #0]
 8004ad6:	1aed      	subeq	r5, r5, r3
 8004ad8:	68a3      	ldr	r3, [r4, #8]
 8004ada:	bf0c      	ite	eq
 8004adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae0:	2500      	movne	r5, #0
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	bfc4      	itt	gt
 8004ae6:	1a9b      	subgt	r3, r3, r2
 8004ae8:	18ed      	addgt	r5, r5, r3
 8004aea:	2600      	movs	r6, #0
 8004aec:	341a      	adds	r4, #26
 8004aee:	42b5      	cmp	r5, r6
 8004af0:	d11a      	bne.n	8004b28 <_printf_common+0xc8>
 8004af2:	2000      	movs	r0, #0
 8004af4:	e008      	b.n	8004b08 <_printf_common+0xa8>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4652      	mov	r2, sl
 8004afa:	4641      	mov	r1, r8
 8004afc:	4638      	mov	r0, r7
 8004afe:	47c8      	blx	r9
 8004b00:	3001      	adds	r0, #1
 8004b02:	d103      	bne.n	8004b0c <_printf_common+0xac>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	e7c6      	b.n	8004a9e <_printf_common+0x3e>
 8004b10:	18e1      	adds	r1, r4, r3
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	2030      	movs	r0, #48	@ 0x30
 8004b16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b1a:	4422      	add	r2, r4
 8004b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b24:	3302      	adds	r3, #2
 8004b26:	e7c7      	b.n	8004ab8 <_printf_common+0x58>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	4638      	mov	r0, r7
 8004b30:	47c8      	blx	r9
 8004b32:	3001      	adds	r0, #1
 8004b34:	d0e6      	beq.n	8004b04 <_printf_common+0xa4>
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7d9      	b.n	8004aee <_printf_common+0x8e>
	...

08004b3c <_printf_i>:
 8004b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	7e0f      	ldrb	r7, [r1, #24]
 8004b42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b44:	2f78      	cmp	r7, #120	@ 0x78
 8004b46:	4691      	mov	r9, r2
 8004b48:	4680      	mov	r8, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b52:	d807      	bhi.n	8004b64 <_printf_i+0x28>
 8004b54:	2f62      	cmp	r7, #98	@ 0x62
 8004b56:	d80a      	bhi.n	8004b6e <_printf_i+0x32>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	f000 80d2 	beq.w	8004d02 <_printf_i+0x1c6>
 8004b5e:	2f58      	cmp	r7, #88	@ 0x58
 8004b60:	f000 80b9 	beq.w	8004cd6 <_printf_i+0x19a>
 8004b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b6c:	e03a      	b.n	8004be4 <_printf_i+0xa8>
 8004b6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b72:	2b15      	cmp	r3, #21
 8004b74:	d8f6      	bhi.n	8004b64 <_printf_i+0x28>
 8004b76:	a101      	add	r1, pc, #4	@ (adr r1, 8004b7c <_printf_i+0x40>)
 8004b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004b65 	.word	0x08004b65
 8004b88:	08004b65 	.word	0x08004b65
 8004b8c:	08004b65 	.word	0x08004b65
 8004b90:	08004b65 	.word	0x08004b65
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b65 	.word	0x08004b65
 8004b9c:	08004b65 	.word	0x08004b65
 8004ba0:	08004b65 	.word	0x08004b65
 8004ba4:	08004b65 	.word	0x08004b65
 8004ba8:	08004ce9 	.word	0x08004ce9
 8004bac:	08004c13 	.word	0x08004c13
 8004bb0:	08004ca3 	.word	0x08004ca3
 8004bb4:	08004b65 	.word	0x08004b65
 8004bb8:	08004b65 	.word	0x08004b65
 8004bbc:	08004d0b 	.word	0x08004d0b
 8004bc0:	08004b65 	.word	0x08004b65
 8004bc4:	08004c13 	.word	0x08004c13
 8004bc8:	08004b65 	.word	0x08004b65
 8004bcc:	08004b65 	.word	0x08004b65
 8004bd0:	08004cab 	.word	0x08004cab
 8004bd4:	6833      	ldr	r3, [r6, #0]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6032      	str	r2, [r6, #0]
 8004bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004be4:	2301      	movs	r3, #1
 8004be6:	e09d      	b.n	8004d24 <_printf_i+0x1e8>
 8004be8:	6833      	ldr	r3, [r6, #0]
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	1d19      	adds	r1, r3, #4
 8004bee:	6031      	str	r1, [r6, #0]
 8004bf0:	0606      	lsls	r6, r0, #24
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_i+0xbc>
 8004bf4:	681d      	ldr	r5, [r3, #0]
 8004bf6:	e003      	b.n	8004c00 <_printf_i+0xc4>
 8004bf8:	0645      	lsls	r5, r0, #25
 8004bfa:	d5fb      	bpl.n	8004bf4 <_printf_i+0xb8>
 8004bfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c00:	2d00      	cmp	r5, #0
 8004c02:	da03      	bge.n	8004c0c <_printf_i+0xd0>
 8004c04:	232d      	movs	r3, #45	@ 0x2d
 8004c06:	426d      	negs	r5, r5
 8004c08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c0c:	4859      	ldr	r0, [pc, #356]	@ (8004d74 <_printf_i+0x238>)
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e011      	b.n	8004c36 <_printf_i+0xfa>
 8004c12:	6821      	ldr	r1, [r4, #0]
 8004c14:	6833      	ldr	r3, [r6, #0]
 8004c16:	0608      	lsls	r0, r1, #24
 8004c18:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c1c:	d402      	bmi.n	8004c24 <_printf_i+0xe8>
 8004c1e:	0649      	lsls	r1, r1, #25
 8004c20:	bf48      	it	mi
 8004c22:	b2ad      	uxthmi	r5, r5
 8004c24:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c26:	4853      	ldr	r0, [pc, #332]	@ (8004d74 <_printf_i+0x238>)
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	bf14      	ite	ne
 8004c2c:	230a      	movne	r3, #10
 8004c2e:	2308      	moveq	r3, #8
 8004c30:	2100      	movs	r1, #0
 8004c32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c36:	6866      	ldr	r6, [r4, #4]
 8004c38:	60a6      	str	r6, [r4, #8]
 8004c3a:	2e00      	cmp	r6, #0
 8004c3c:	bfa2      	ittt	ge
 8004c3e:	6821      	ldrge	r1, [r4, #0]
 8004c40:	f021 0104 	bicge.w	r1, r1, #4
 8004c44:	6021      	strge	r1, [r4, #0]
 8004c46:	b90d      	cbnz	r5, 8004c4c <_printf_i+0x110>
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	d04b      	beq.n	8004ce4 <_printf_i+0x1a8>
 8004c4c:	4616      	mov	r6, r2
 8004c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c52:	fb03 5711 	mls	r7, r3, r1, r5
 8004c56:	5dc7      	ldrb	r7, [r0, r7]
 8004c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c5c:	462f      	mov	r7, r5
 8004c5e:	42bb      	cmp	r3, r7
 8004c60:	460d      	mov	r5, r1
 8004c62:	d9f4      	bls.n	8004c4e <_printf_i+0x112>
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d10b      	bne.n	8004c80 <_printf_i+0x144>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	07df      	lsls	r7, r3, #31
 8004c6c:	d508      	bpl.n	8004c80 <_printf_i+0x144>
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	6861      	ldr	r1, [r4, #4]
 8004c72:	4299      	cmp	r1, r3
 8004c74:	bfde      	ittt	le
 8004c76:	2330      	movle	r3, #48	@ 0x30
 8004c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c80:	1b92      	subs	r2, r2, r6
 8004c82:	6122      	str	r2, [r4, #16]
 8004c84:	f8cd a000 	str.w	sl, [sp]
 8004c88:	464b      	mov	r3, r9
 8004c8a:	aa03      	add	r2, sp, #12
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f7ff fee6 	bl	8004a60 <_printf_common>
 8004c94:	3001      	adds	r0, #1
 8004c96:	d14a      	bne.n	8004d2e <_printf_i+0x1f2>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	b004      	add	sp, #16
 8004c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f043 0320 	orr.w	r3, r3, #32
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	4833      	ldr	r0, [pc, #204]	@ (8004d78 <_printf_i+0x23c>)
 8004cac:	2778      	movs	r7, #120	@ 0x78
 8004cae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	6831      	ldr	r1, [r6, #0]
 8004cb6:	061f      	lsls	r7, r3, #24
 8004cb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cbc:	d402      	bmi.n	8004cc4 <_printf_i+0x188>
 8004cbe:	065f      	lsls	r7, r3, #25
 8004cc0:	bf48      	it	mi
 8004cc2:	b2ad      	uxthmi	r5, r5
 8004cc4:	6031      	str	r1, [r6, #0]
 8004cc6:	07d9      	lsls	r1, r3, #31
 8004cc8:	bf44      	itt	mi
 8004cca:	f043 0320 	orrmi.w	r3, r3, #32
 8004cce:	6023      	strmi	r3, [r4, #0]
 8004cd0:	b11d      	cbz	r5, 8004cda <_printf_i+0x19e>
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	e7ac      	b.n	8004c30 <_printf_i+0xf4>
 8004cd6:	4827      	ldr	r0, [pc, #156]	@ (8004d74 <_printf_i+0x238>)
 8004cd8:	e7e9      	b.n	8004cae <_printf_i+0x172>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f023 0320 	bic.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	e7f6      	b.n	8004cd2 <_printf_i+0x196>
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	e7bd      	b.n	8004c64 <_printf_i+0x128>
 8004ce8:	6833      	ldr	r3, [r6, #0]
 8004cea:	6825      	ldr	r5, [r4, #0]
 8004cec:	6961      	ldr	r1, [r4, #20]
 8004cee:	1d18      	adds	r0, r3, #4
 8004cf0:	6030      	str	r0, [r6, #0]
 8004cf2:	062e      	lsls	r6, r5, #24
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	d501      	bpl.n	8004cfc <_printf_i+0x1c0>
 8004cf8:	6019      	str	r1, [r3, #0]
 8004cfa:	e002      	b.n	8004d02 <_printf_i+0x1c6>
 8004cfc:	0668      	lsls	r0, r5, #25
 8004cfe:	d5fb      	bpl.n	8004cf8 <_printf_i+0x1bc>
 8004d00:	8019      	strh	r1, [r3, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	4616      	mov	r6, r2
 8004d08:	e7bc      	b.n	8004c84 <_printf_i+0x148>
 8004d0a:	6833      	ldr	r3, [r6, #0]
 8004d0c:	1d1a      	adds	r2, r3, #4
 8004d0e:	6032      	str	r2, [r6, #0]
 8004d10:	681e      	ldr	r6, [r3, #0]
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4630      	mov	r0, r6
 8004d18:	f7fb fa7a 	bl	8000210 <memchr>
 8004d1c:	b108      	cbz	r0, 8004d22 <_printf_i+0x1e6>
 8004d1e:	1b80      	subs	r0, r0, r6
 8004d20:	6060      	str	r0, [r4, #4]
 8004d22:	6863      	ldr	r3, [r4, #4]
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	2300      	movs	r3, #0
 8004d28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d2c:	e7aa      	b.n	8004c84 <_printf_i+0x148>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	4632      	mov	r2, r6
 8004d32:	4649      	mov	r1, r9
 8004d34:	4640      	mov	r0, r8
 8004d36:	47d0      	blx	sl
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d0ad      	beq.n	8004c98 <_printf_i+0x15c>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	079b      	lsls	r3, r3, #30
 8004d40:	d413      	bmi.n	8004d6a <_printf_i+0x22e>
 8004d42:	68e0      	ldr	r0, [r4, #12]
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	4298      	cmp	r0, r3
 8004d48:	bfb8      	it	lt
 8004d4a:	4618      	movlt	r0, r3
 8004d4c:	e7a6      	b.n	8004c9c <_printf_i+0x160>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4632      	mov	r2, r6
 8004d52:	4649      	mov	r1, r9
 8004d54:	4640      	mov	r0, r8
 8004d56:	47d0      	blx	sl
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d09d      	beq.n	8004c98 <_printf_i+0x15c>
 8004d5c:	3501      	adds	r5, #1
 8004d5e:	68e3      	ldr	r3, [r4, #12]
 8004d60:	9903      	ldr	r1, [sp, #12]
 8004d62:	1a5b      	subs	r3, r3, r1
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	dcf2      	bgt.n	8004d4e <_printf_i+0x212>
 8004d68:	e7eb      	b.n	8004d42 <_printf_i+0x206>
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	f104 0619 	add.w	r6, r4, #25
 8004d70:	e7f5      	b.n	8004d5e <_printf_i+0x222>
 8004d72:	bf00      	nop
 8004d74:	0800516d 	.word	0x0800516d
 8004d78:	0800517e 	.word	0x0800517e

08004d7c <__sflush_r>:
 8004d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	0716      	lsls	r6, r2, #28
 8004d86:	4605      	mov	r5, r0
 8004d88:	460c      	mov	r4, r1
 8004d8a:	d454      	bmi.n	8004e36 <__sflush_r+0xba>
 8004d8c:	684b      	ldr	r3, [r1, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	dc02      	bgt.n	8004d98 <__sflush_r+0x1c>
 8004d92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	dd48      	ble.n	8004e2a <__sflush_r+0xae>
 8004d98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d9a:	2e00      	cmp	r6, #0
 8004d9c:	d045      	beq.n	8004e2a <__sflush_r+0xae>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004da4:	682f      	ldr	r7, [r5, #0]
 8004da6:	6a21      	ldr	r1, [r4, #32]
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	d030      	beq.n	8004e0e <__sflush_r+0x92>
 8004dac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	0759      	lsls	r1, r3, #29
 8004db2:	d505      	bpl.n	8004dc0 <__sflush_r+0x44>
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dba:	b10b      	cbz	r3, 8004dc0 <__sflush_r+0x44>
 8004dbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dc4:	6a21      	ldr	r1, [r4, #32]
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b0      	blx	r6
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	d106      	bne.n	8004dde <__sflush_r+0x62>
 8004dd0:	6829      	ldr	r1, [r5, #0]
 8004dd2:	291d      	cmp	r1, #29
 8004dd4:	d82b      	bhi.n	8004e2e <__sflush_r+0xb2>
 8004dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e80 <__sflush_r+0x104>)
 8004dd8:	410a      	asrs	r2, r1
 8004dda:	07d6      	lsls	r6, r2, #31
 8004ddc:	d427      	bmi.n	8004e2e <__sflush_r+0xb2>
 8004dde:	2200      	movs	r2, #0
 8004de0:	6062      	str	r2, [r4, #4]
 8004de2:	04d9      	lsls	r1, r3, #19
 8004de4:	6922      	ldr	r2, [r4, #16]
 8004de6:	6022      	str	r2, [r4, #0]
 8004de8:	d504      	bpl.n	8004df4 <__sflush_r+0x78>
 8004dea:	1c42      	adds	r2, r0, #1
 8004dec:	d101      	bne.n	8004df2 <__sflush_r+0x76>
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	b903      	cbnz	r3, 8004df4 <__sflush_r+0x78>
 8004df2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004df6:	602f      	str	r7, [r5, #0]
 8004df8:	b1b9      	cbz	r1, 8004e2a <__sflush_r+0xae>
 8004dfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	d002      	beq.n	8004e08 <__sflush_r+0x8c>
 8004e02:	4628      	mov	r0, r5
 8004e04:	f7ff fbf2 	bl	80045ec <_free_r>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e0c:	e00d      	b.n	8004e2a <__sflush_r+0xae>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b0      	blx	r6
 8004e14:	4602      	mov	r2, r0
 8004e16:	1c50      	adds	r0, r2, #1
 8004e18:	d1c9      	bne.n	8004dae <__sflush_r+0x32>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0c6      	beq.n	8004dae <__sflush_r+0x32>
 8004e20:	2b1d      	cmp	r3, #29
 8004e22:	d001      	beq.n	8004e28 <__sflush_r+0xac>
 8004e24:	2b16      	cmp	r3, #22
 8004e26:	d11e      	bne.n	8004e66 <__sflush_r+0xea>
 8004e28:	602f      	str	r7, [r5, #0]
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e022      	b.n	8004e74 <__sflush_r+0xf8>
 8004e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	e01b      	b.n	8004e6e <__sflush_r+0xf2>
 8004e36:	690f      	ldr	r7, [r1, #16]
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	d0f6      	beq.n	8004e2a <__sflush_r+0xae>
 8004e3c:	0793      	lsls	r3, r2, #30
 8004e3e:	680e      	ldr	r6, [r1, #0]
 8004e40:	bf08      	it	eq
 8004e42:	694b      	ldreq	r3, [r1, #20]
 8004e44:	600f      	str	r7, [r1, #0]
 8004e46:	bf18      	it	ne
 8004e48:	2300      	movne	r3, #0
 8004e4a:	eba6 0807 	sub.w	r8, r6, r7
 8004e4e:	608b      	str	r3, [r1, #8]
 8004e50:	f1b8 0f00 	cmp.w	r8, #0
 8004e54:	dde9      	ble.n	8004e2a <__sflush_r+0xae>
 8004e56:	6a21      	ldr	r1, [r4, #32]
 8004e58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e5a:	4643      	mov	r3, r8
 8004e5c:	463a      	mov	r2, r7
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b0      	blx	r6
 8004e62:	2800      	cmp	r0, #0
 8004e64:	dc08      	bgt.n	8004e78 <__sflush_r+0xfc>
 8004e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e78:	4407      	add	r7, r0
 8004e7a:	eba8 0800 	sub.w	r8, r8, r0
 8004e7e:	e7e7      	b.n	8004e50 <__sflush_r+0xd4>
 8004e80:	dfbffffe 	.word	0xdfbffffe

08004e84 <_fflush_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	690b      	ldr	r3, [r1, #16]
 8004e88:	4605      	mov	r5, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	b913      	cbnz	r3, 8004e94 <_fflush_r+0x10>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	4628      	mov	r0, r5
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	b118      	cbz	r0, 8004e9e <_fflush_r+0x1a>
 8004e96:	6a03      	ldr	r3, [r0, #32]
 8004e98:	b90b      	cbnz	r3, 8004e9e <_fflush_r+0x1a>
 8004e9a:	f7ff fa9f 	bl	80043dc <__sinit>
 8004e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f3      	beq.n	8004e8e <_fflush_r+0xa>
 8004ea6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ea8:	07d0      	lsls	r0, r2, #31
 8004eaa:	d404      	bmi.n	8004eb6 <_fflush_r+0x32>
 8004eac:	0599      	lsls	r1, r3, #22
 8004eae:	d402      	bmi.n	8004eb6 <_fflush_r+0x32>
 8004eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eb2:	f7ff fb98 	bl	80045e6 <__retarget_lock_acquire_recursive>
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	4621      	mov	r1, r4
 8004eba:	f7ff ff5f 	bl	8004d7c <__sflush_r>
 8004ebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ec0:	07da      	lsls	r2, r3, #31
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	d4e4      	bmi.n	8004e90 <_fflush_r+0xc>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	059b      	lsls	r3, r3, #22
 8004eca:	d4e1      	bmi.n	8004e90 <_fflush_r+0xc>
 8004ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ece:	f7ff fb8b 	bl	80045e8 <__retarget_lock_release_recursive>
 8004ed2:	e7dd      	b.n	8004e90 <_fflush_r+0xc>

08004ed4 <__swbuf_r>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	4614      	mov	r4, r2
 8004eda:	4605      	mov	r5, r0
 8004edc:	b118      	cbz	r0, 8004ee6 <__swbuf_r+0x12>
 8004ede:	6a03      	ldr	r3, [r0, #32]
 8004ee0:	b90b      	cbnz	r3, 8004ee6 <__swbuf_r+0x12>
 8004ee2:	f7ff fa7b 	bl	80043dc <__sinit>
 8004ee6:	69a3      	ldr	r3, [r4, #24]
 8004ee8:	60a3      	str	r3, [r4, #8]
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	071a      	lsls	r2, r3, #28
 8004eee:	d501      	bpl.n	8004ef4 <__swbuf_r+0x20>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	b943      	cbnz	r3, 8004f06 <__swbuf_r+0x32>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f82a 	bl	8004f50 <__swsetup_r>
 8004efc:	b118      	cbz	r0, 8004f06 <__swbuf_r+0x32>
 8004efe:	f04f 37ff 	mov.w	r7, #4294967295
 8004f02:	4638      	mov	r0, r7
 8004f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	6922      	ldr	r2, [r4, #16]
 8004f0a:	1a98      	subs	r0, r3, r2
 8004f0c:	6963      	ldr	r3, [r4, #20]
 8004f0e:	b2f6      	uxtb	r6, r6
 8004f10:	4283      	cmp	r3, r0
 8004f12:	4637      	mov	r7, r6
 8004f14:	dc05      	bgt.n	8004f22 <__swbuf_r+0x4e>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f7ff ffb3 	bl	8004e84 <_fflush_r>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d1ed      	bne.n	8004efe <__swbuf_r+0x2a>
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	60a3      	str	r3, [r4, #8]
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	701e      	strb	r6, [r3, #0]
 8004f30:	6962      	ldr	r2, [r4, #20]
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d004      	beq.n	8004f42 <__swbuf_r+0x6e>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	07db      	lsls	r3, r3, #31
 8004f3c:	d5e1      	bpl.n	8004f02 <__swbuf_r+0x2e>
 8004f3e:	2e0a      	cmp	r6, #10
 8004f40:	d1df      	bne.n	8004f02 <__swbuf_r+0x2e>
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f7ff ff9d 	bl	8004e84 <_fflush_r>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d0d9      	beq.n	8004f02 <__swbuf_r+0x2e>
 8004f4e:	e7d6      	b.n	8004efe <__swbuf_r+0x2a>

08004f50 <__swsetup_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4b29      	ldr	r3, [pc, #164]	@ (8004ff8 <__swsetup_r+0xa8>)
 8004f54:	4605      	mov	r5, r0
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	460c      	mov	r4, r1
 8004f5a:	b118      	cbz	r0, 8004f64 <__swsetup_r+0x14>
 8004f5c:	6a03      	ldr	r3, [r0, #32]
 8004f5e:	b90b      	cbnz	r3, 8004f64 <__swsetup_r+0x14>
 8004f60:	f7ff fa3c 	bl	80043dc <__sinit>
 8004f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f68:	0719      	lsls	r1, r3, #28
 8004f6a:	d422      	bmi.n	8004fb2 <__swsetup_r+0x62>
 8004f6c:	06da      	lsls	r2, r3, #27
 8004f6e:	d407      	bmi.n	8004f80 <__swsetup_r+0x30>
 8004f70:	2209      	movs	r2, #9
 8004f72:	602a      	str	r2, [r5, #0]
 8004f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	e033      	b.n	8004fe8 <__swsetup_r+0x98>
 8004f80:	0758      	lsls	r0, r3, #29
 8004f82:	d512      	bpl.n	8004faa <__swsetup_r+0x5a>
 8004f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f86:	b141      	cbz	r1, 8004f9a <__swsetup_r+0x4a>
 8004f88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f8c:	4299      	cmp	r1, r3
 8004f8e:	d002      	beq.n	8004f96 <__swsetup_r+0x46>
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7ff fb2b 	bl	80045ec <_free_r>
 8004f96:	2300      	movs	r3, #0
 8004f98:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6063      	str	r3, [r4, #4]
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f043 0308 	orr.w	r3, r3, #8
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	b94b      	cbnz	r3, 8004fca <__swsetup_r+0x7a>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc0:	d003      	beq.n	8004fca <__swsetup_r+0x7a>
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 f84f 	bl	8005068 <__smakebuf_r>
 8004fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fce:	f013 0201 	ands.w	r2, r3, #1
 8004fd2:	d00a      	beq.n	8004fea <__swsetup_r+0x9a>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	60a2      	str	r2, [r4, #8]
 8004fd8:	6962      	ldr	r2, [r4, #20]
 8004fda:	4252      	negs	r2, r2
 8004fdc:	61a2      	str	r2, [r4, #24]
 8004fde:	6922      	ldr	r2, [r4, #16]
 8004fe0:	b942      	cbnz	r2, 8004ff4 <__swsetup_r+0xa4>
 8004fe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fe6:	d1c5      	bne.n	8004f74 <__swsetup_r+0x24>
 8004fe8:	bd38      	pop	{r3, r4, r5, pc}
 8004fea:	0799      	lsls	r1, r3, #30
 8004fec:	bf58      	it	pl
 8004fee:	6962      	ldrpl	r2, [r4, #20]
 8004ff0:	60a2      	str	r2, [r4, #8]
 8004ff2:	e7f4      	b.n	8004fde <__swsetup_r+0x8e>
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	e7f7      	b.n	8004fe8 <__swsetup_r+0x98>
 8004ff8:	20000020 	.word	0x20000020

08004ffc <_sbrk_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	@ (8005018 <_sbrk_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc f8bc 	bl	8001184 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_sbrk_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_sbrk_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000368 	.word	0x20000368

0800501c <__swhatbuf_r>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	2900      	cmp	r1, #0
 8005026:	b096      	sub	sp, #88	@ 0x58
 8005028:	4615      	mov	r5, r2
 800502a:	461e      	mov	r6, r3
 800502c:	da0d      	bge.n	800504a <__swhatbuf_r+0x2e>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	bf14      	ite	ne
 800503a:	2340      	movne	r3, #64	@ 0x40
 800503c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005040:	2000      	movs	r0, #0
 8005042:	6031      	str	r1, [r6, #0]
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	b016      	add	sp, #88	@ 0x58
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	466a      	mov	r2, sp
 800504c:	f000 f848 	bl	80050e0 <_fstat_r>
 8005050:	2800      	cmp	r0, #0
 8005052:	dbec      	blt.n	800502e <__swhatbuf_r+0x12>
 8005054:	9901      	ldr	r1, [sp, #4]
 8005056:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800505a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800505e:	4259      	negs	r1, r3
 8005060:	4159      	adcs	r1, r3
 8005062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005066:	e7eb      	b.n	8005040 <__swhatbuf_r+0x24>

08005068 <__smakebuf_r>:
 8005068:	898b      	ldrh	r3, [r1, #12]
 800506a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506c:	079d      	lsls	r5, r3, #30
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	d507      	bpl.n	8005084 <__smakebuf_r+0x1c>
 8005074:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	2301      	movs	r3, #1
 800507e:	6163      	str	r3, [r4, #20]
 8005080:	b003      	add	sp, #12
 8005082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005084:	ab01      	add	r3, sp, #4
 8005086:	466a      	mov	r2, sp
 8005088:	f7ff ffc8 	bl	800501c <__swhatbuf_r>
 800508c:	9f00      	ldr	r7, [sp, #0]
 800508e:	4605      	mov	r5, r0
 8005090:	4639      	mov	r1, r7
 8005092:	4630      	mov	r0, r6
 8005094:	f7ff fb16 	bl	80046c4 <_malloc_r>
 8005098:	b948      	cbnz	r0, 80050ae <__smakebuf_r+0x46>
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	059a      	lsls	r2, r3, #22
 80050a0:	d4ee      	bmi.n	8005080 <__smakebuf_r+0x18>
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	e7e2      	b.n	8005074 <__smakebuf_r+0xc>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	6020      	str	r0, [r4, #0]
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	9b01      	ldr	r3, [sp, #4]
 80050ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050be:	b15b      	cbz	r3, 80050d8 <__smakebuf_r+0x70>
 80050c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f81d 	bl	8005104 <_isatty_r>
 80050ca:	b128      	cbz	r0, 80050d8 <__smakebuf_r+0x70>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	81a3      	strh	r3, [r4, #12]
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	431d      	orrs	r5, r3
 80050dc:	81a5      	strh	r5, [r4, #12]
 80050de:	e7cf      	b.n	8005080 <__smakebuf_r+0x18>

080050e0 <_fstat_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	@ (8005100 <_fstat_r+0x20>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	f7fc f820 	bl	8001132 <_fstat>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d102      	bne.n	80050fc <_fstat_r+0x1c>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	b103      	cbz	r3, 80050fc <_fstat_r+0x1c>
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	20000368 	.word	0x20000368

08005104 <_isatty_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	@ (8005120 <_isatty_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fc f81f 	bl	8001152 <_isatty>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_isatty_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_isatty_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	20000368 	.word	0x20000368

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
