
emeles_erzekelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800532c  0800532c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800532c  0800532c  0000632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005334  08005334  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800533c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000068  080053a4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080053a4  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df35  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf9  00000000  00000000  00024fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00027bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cd  00000000  00000000  00029688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c5f  00000000  00000000  0002ab55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018166  00000000  00000000  0004e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbfb7  00000000  00000000  0006691a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001428d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac0  00000000  00000000  00142914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0014a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052ac 	.word	0x080052ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080052ac 	.word	0x080052ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_TIM_PeriodElapsedCallback>:
static void MEMS_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, LED_Pin);

	if (htim->Instance == TIM4){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d102      	bne.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0x18>
		read = 1;
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM10){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d103      	bne.n	80005ca <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_GPIO_TogglePin(GPIOC, buzzer_Pin); // generate 4kHz square wave for the buzzer
 80005c2:	2101      	movs	r1, #1
 80005c4:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005c6:	f001 fad6 	bl	8001b76 <HAL_GPIO_TogglePin>
	}

}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40000800 	.word	0x40000800
 80005d8:	200001f8 	.word	0x200001f8
 80005dc:	40014400 	.word	0x40014400
 80005e0:	40020800 	.word	0x40020800

080005e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button1_Pin) {
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d102      	bne.n	80005fa <HAL_GPIO_EXTI_Callback+0x16>
		HAL_TIM_Base_Start_IT(&htim10);
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <HAL_GPIO_EXTI_Callback+0x2c>)
 80005f6:	f002 fad3 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
	}

	if (GPIO_Pin == button2_Pin) {
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	d102      	bne.n	8000606 <HAL_GPIO_EXTI_Callback+0x22>
		HAL_TIM_Base_Stop_IT(&htim10);
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000602:	f002 fb3d 	bl	8002c80 <HAL_TIM_Base_Stop_IT>
	}

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000124 	.word	0x20000124

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fec5 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f98f 	bl	8000944 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000626:	f000 f8bb 	bl	80007a0 <MX_SPI3_Init>
  MX_TIM4_Init();
 800062a:	f000 f8ef 	bl	800080c <MX_TIM4_Init>
  MX_TIM10_Init();
 800062e:	f000 f93b 	bl	80008a8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f95d 	bl	80008f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_SPI2_Init();
 8000636:	f000 fbdf 	bl	8000df8 <BSP_SPI2_Init>
  //MEMS_Init();

  //HAL_TIM_Base_Start_IT(&htim4); // measure accelometer
  //EnableDisplay(); // Show it on display

  uint8_t buf[] = {"Hello World!\n\r"};
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <main+0x9c>)
 800063c:	1d3c      	adds	r4, r7, #4
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	c407      	stmia	r4!, {r0, r1, r2}
 8000642:	8023      	strh	r3, [r4, #0]
 8000644:	3402      	adds	r4, #2
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	7023      	strb	r3, [r4, #0]
  uint8_t num = {0, 5, 10};
 800064a:	2300      	movs	r3, #0
 800064c:	75bb      	strb	r3, [r7, #22]
  uint8_t i = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(read){
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0xa0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d009      	beq.n	8000670 <main+0x5c>
		 read = 0;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <main+0xa0>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
		LSM6DSL_ACC_GetAxes(&Accelometer, &acc_axes); // test read the accelometer
 8000662:	4915      	ldr	r1, [pc, #84]	@ (80006b8 <main+0xa4>)
 8000664:	4815      	ldr	r0, [pc, #84]	@ (80006bc <main+0xa8>)
 8000666:	f000 fdaf 	bl	80011c8 <LSM6DSL_ACC_GetAxes>
		 read = 0;
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <main+0xa0>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
		 //Send7seg(); // test the 7seg
	 }
	 if(i == 0){
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10b      	bne.n	800068e <main+0x7a>
		 HAL_UART_Transmit(&huart2, buf, sizeof(buf), HAL_MAX_DELAY);
 8000676:	1d39      	adds	r1, r7, #4
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	220f      	movs	r2, #15
 800067e:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <main+0xac>)
 8000680:	f002 ff32 	bl	80034e8 <HAL_UART_Transmit>
		 HAL_Delay(1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000688:	f000 ff00 	bl	800148c <HAL_Delay>
 800068c:	e00b      	b.n	80006a6 <main+0x92>
	 }
	 else{
		 printf("%d %d %d\r\n", i, i+3, i+5);
 800068e:	7df9      	ldrb	r1, [r7, #23]
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	1cda      	adds	r2, r3, #3
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	3305      	adds	r3, #5
 8000698:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <main+0xb0>)
 800069a:	f003 ff99 	bl	80045d0 <iprintf>
		 HAL_Delay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a2:	f000 fef3 	bl	800148c <HAL_Delay>
	 }
	 i += 5;
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	3305      	adds	r3, #5
 80006aa:	75fb      	strb	r3, [r7, #23]
	 if(read){
 80006ac:	e7d1      	b.n	8000652 <main+0x3e>
 80006ae:	bf00      	nop
 80006b0:	080052d0 	.word	0x080052d0
 80006b4:	200001f8 	.word	0x200001f8
 80006b8:	200001ec 	.word	0x200001ec
 80006bc:	200001b4 	.word	0x200001b4
 80006c0:	2000016c 	.word	0x2000016c
 80006c4:	080052c4 	.word	0x080052c4

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	@ 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 ffcf 	bl	800467a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	@ (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800072c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000740:	2348      	movs	r3, #72	@ 0x48
 8000742:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000748:	2303      	movs	r3, #3
 800074a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fd8b 	bl	8002270 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000760:	f000 f9c8 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fa2b 	bl	8001bdc <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800078c:	f000 f9b2 	bl	8000af4 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	@ 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <MX_SPI3_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007d4:	2218      	movs	r2, #24
 80007d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_SPI3_Init+0x64>)
 80007f2:	f001 ffdb 	bl	80027ac <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f97a 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000084 	.word	0x20000084
 8000808:	40003c00 	.word	0x40003c00

0800080c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_TIM4_Init+0x94>)
 800082a:	4a1e      	ldr	r2, [pc, #120]	@ (80008a4 <MX_TIM4_Init+0x98>)
 800082c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 69;
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_TIM4_Init+0x94>)
 8000830:	2245      	movs	r2, #69	@ 0x45
 8000832:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_TIM4_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_TIM4_Init+0x94>)
 800083c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000840:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_TIM4_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_TIM4_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800084e:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <MX_TIM4_Init+0x94>)
 8000850:	f002 f956 	bl	8002b00 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f94b 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_TIM4_Init+0x94>)
 800086c:	f002 fb27 	bl	8002ebe <HAL_TIM_ConfigClockSource>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 f93d 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_TIM4_Init+0x94>)
 8000888:	f002 fd4e 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000892:	f000 f92f 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000dc 	.word	0x200000dc
 80008a4:	40000800 	.word	0x40000800

080008a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008ae:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <MX_TIM10_Init+0x44>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 11250;
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008c0:	f642 32f2 	movw	r2, #11250	@ 0x2bf2
 80008c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_TIM10_Init+0x40>)
 80008d4:	f002 f914 	bl	8002b00 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80008de:	f000 f909 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000124 	.word	0x20000124
 80008ec:	40014400 	.word	0x40014400

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f002 fd8e 	bl	8003448 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f8df 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000016c 	.word	0x2000016c
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b55      	ldr	r3, [pc, #340]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a54      	ldr	r2, [pc, #336]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b52      	ldr	r3, [pc, #328]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a4d      	ldr	r2, [pc, #308]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b47      	ldr	r3, [pc, #284]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a46      	ldr	r2, [pc, #280]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b44      	ldr	r3, [pc, #272]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b40      	ldr	r3, [pc, #256]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b39      	ldr	r3, [pc, #228]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b36      	ldr	r3, [pc, #216]	@ (8000ab4 <MX_GPIO_Init+0x170>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, buzzer_Pin|SS_7seg_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2121      	movs	r1, #33	@ 0x21
 80009ea:	4833      	ldr	r0, [pc, #204]	@ (8000ab8 <MX_GPIO_Init+0x174>)
 80009ec:	f001 f8aa 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2120      	movs	r1, #32
 80009f4:	4831      	ldr	r0, [pc, #196]	@ (8000abc <MX_GPIO_Init+0x178>)
 80009f6:	f001 f8a5 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin|OE_7seg_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2103      	movs	r1, #3
 80009fe:	4830      	ldr	r0, [pc, #192]	@ (8000ac0 <MX_GPIO_Init+0x17c>)
 8000a00:	f001 f8a0 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : buzzer_Pin SS_7seg_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|SS_7seg_Pin;
 8000a04:	2321      	movs	r3, #33	@ 0x21
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4827      	ldr	r0, [pc, #156]	@ (8000ab8 <MX_GPIO_Init+0x174>)
 8000a1c:	f000 fefe 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4821      	ldr	r0, [pc, #132]	@ (8000abc <MX_GPIO_Init+0x178>)
 8000a38:	f000 fef0 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_accel_Pin OE_7seg_Pin */
  GPIO_InitStruct.Pin = SS_accel_Pin|OE_7seg_Pin;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <MX_GPIO_Init+0x17c>)
 8000a54:	f000 fee2 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4815      	ldr	r0, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0x180>)
 8000a6e:	f000 fed5 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : button2_Pin */
  GPIO_InitStruct.Pin = button2_Pin;
 8000a72:	2320      	movs	r3, #32
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480e      	ldr	r0, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x17c>)
 8000a88:	f000 fec8 	bl	800181c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2008      	movs	r0, #8
 8000a92:	f000 fdfa 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f000 fe13 	bl	80016c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f000 fdf2 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa6:	2017      	movs	r0, #23
 8000aa8:	f000 fe0b 	bl	80016c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <_write>:
  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&Accelometer);
}

int _write(int fd, char * ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <_write+0x28>)
 8000ae0:	f002 fd02 	bl	80034e8 <HAL_UART_Transmit>
  return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000016c 	.word	0x2000016c

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 fd98 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a21      	ldr	r2, [pc, #132]	@ (8000bf4 <HAL_SPI_MspInit+0xa4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d13c      	bne.n	8000bec <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <HAL_SPI_MspInit+0xa8>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf8 <HAL_SPI_MspInit+0xa8>)
 8000b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <HAL_SPI_MspInit+0xa8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_SPI_MspInit+0xa8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a18      	ldr	r2, [pc, #96]	@ (8000bf8 <HAL_SPI_MspInit+0xa8>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_SPI_MspInit+0xa8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000baa:	2302      	movs	r3, #2
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <HAL_SPI_MspInit+0xac>)
 8000bc6:	f000 fe29 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <HAL_SPI_MspInit+0xac>)
 8000be8:	f000 fe18 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	@ 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40003c00 	.word	0x40003c00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020800 	.word	0x40020800

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c80 <HAL_TIM_Base_MspInit+0x80>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d116      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_TIM_Base_MspInit+0x84>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000c84 <HAL_TIM_Base_MspInit+0x84>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_TIM_Base_MspInit+0x84>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201e      	movs	r0, #30
 8000c34:	f000 fd29 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c38:	201e      	movs	r0, #30
 8000c3a:	f000 fd42 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000c3e:	e01a      	b.n	8000c76 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <HAL_TIM_Base_MspInit+0x88>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d115      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <HAL_TIM_Base_MspInit+0x84>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a0c      	ldr	r2, [pc, #48]	@ (8000c84 <HAL_TIM_Base_MspInit+0x84>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <HAL_TIM_Base_MspInit+0x84>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 fd0d 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c70:	2019      	movs	r0, #25
 8000c72:	f000 fd26 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40000800 	.word	0x40000800
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40014400 	.word	0x40014400

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <HAL_UART_MspInit+0x94>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d133      	bne.n	8000d16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <HAL_UART_MspInit+0x9c>)
 8000d02:	f000 fd8b 	bl	800181c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2026      	movs	r0, #38	@ 0x26
 8000d0c:	f000 fcbd 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d10:	2026      	movs	r0, #38	@ 0x26
 8000d12:	f000 fcd6 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 fb63 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1_Pin);
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f000 ff0c 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button2_Pin);
 8000d9c:	2020      	movs	r0, #32
 8000d9e:	f000 ff05 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dae:	f001 ff96 	bl	8002cde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000124 	.word	0x20000124

08000dbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <TIM4_IRQHandler+0x10>)
 8000dc2:	f001 ff8c 	bl	8002cde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000dc 	.word	0x200000dc

08000dd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <SPI2_IRQHandler+0x10>)
 8000dd6:	f001 fd73 	bl	80028c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001fc 	.word	0x200001fc

08000de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	f002 fc09 	bl	8003600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000016c 	.word	0x2000016c

08000df8 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <BSP_SPI2_Init+0x54>)
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <BSP_SPI2_Init+0x58>)
 8000e06:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <BSP_SPI2_Init+0x5c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	4911      	ldr	r1, [pc, #68]	@ (8000e54 <BSP_SPI2_Init+0x5c>)
 8000e10:	600a      	str	r2, [r1, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d114      	bne.n	8000e40 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <BSP_SPI2_Init+0x54>)
 8000e18:	f001 fe50 	bl	8002abc <HAL_SPI_GetState>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10e      	bne.n	8000e40 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <BSP_SPI2_Init+0x54>)
 8000e24:	f000 f854 	bl	8000ed0 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d108      	bne.n	8000e40 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <BSP_SPI2_Init+0x54>)
 8000e30:	f000 f812 	bl	8000e58 <MX_SPI2_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000e3a:	f06f 0307 	mvn.w	r3, #7
 8000e3e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001fc 	.word	0x200001fc
 8000e50:	40003800 	.word	0x40003800
 8000e54:	20000254 	.word	0x20000254

08000e58 <MX_SPI2_Init>:
}

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <MX_SPI2_Init+0x74>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e90:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2218      	movs	r2, #24
 8000e96:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	220a      	movs	r2, #10
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f001 fc7b 	bl	80027ac <HAL_SPI_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40003800 	.word	0x40003800

08000ed0 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	4a31      	ldr	r2, [pc, #196]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f20:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <SPI2_MspInit+0xd8>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4819      	ldr	r0, [pc, #100]	@ (8000fac <SPI2_MspInit+0xdc>)
 8000f48:	f000 fc68 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4811      	ldr	r0, [pc, #68]	@ (8000fac <SPI2_MspInit+0xdc>)
 8000f68:	f000 fc58 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8000f7e:	2305      	movs	r3, #5
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <SPI2_MspInit+0xe0>)
 8000f8a:	f000 fc47 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2024      	movs	r0, #36	@ 0x24
 8000f94:	f000 fb79 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f98:	2024      	movs	r0, #36	@ 0x24
 8000f9a:	f000 fb92 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	@ 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
  }

  return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001016:	605a      	str	r2, [r3, #4]
  return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f003 fb46 	bl	8004718 <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20020000 	.word	0x20020000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000258 	.word	0x20000258
 80010c0:	200003b0 	.word	0x200003b0

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001120 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010ec:	f7ff ffea 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	@ (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	@ (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 fb05 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fa7b 	bl	8000614 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800112c:	0800533c 	.word	0x0800533c
  ldr r2, =_sbss
 8001130:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001134:	200003ac 	.word	0x200003ac

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3320      	adds	r3, #32
 800114e:	f107 020b 	add.w	r2, r7, #11
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f8a7 	bl	80012a8 <lsm6dsl_xl_full_scale_get>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	e023      	b.n	80011ae <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d81b      	bhi.n	80011a4 <LSM6DSL_ACC_GetSensitivity+0x68>
 800116c:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	0800119d 	.word	0x0800119d
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001195 	.word	0x08001195
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001188:	601a      	str	r2, [r3, #0]
      break;
 800118a:	e00f      	b.n	80011ac <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001190:	601a      	str	r2, [r3, #0]
      break;
 8001192:	e00b      	b.n	80011ac <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001198:	601a      	str	r2, [r3, #0]
      break;
 800119a:	e007      	b.n	80011ac <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80011a0:	601a      	str	r2, [r3, #0]
      break;
 80011a2:	e003      	b.n	80011ac <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	60fb      	str	r3, [r7, #12]
      break;
 80011aa:	bf00      	nop
  }

  return ret;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	3d79db23 	.word	0x3d79db23
 80011bc:	3df9db23 	.word	0x3df9db23
 80011c0:	3e79db23 	.word	0x3e79db23
 80011c4:	3ef9db23 	.word	0x3ef9db23

080011c8 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3320      	adds	r3, #32
 80011dc:	f107 0210 	add.w	r2, r7, #16
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f898 	bl	8001318 <lsm6dsl_acceleration_raw_get>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e03c      	b.n	800126e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff9e 	bl	800113c <LSM6DSL_ACC_GetSensitivity>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e030      	b.n	800126e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800120c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001218:	edd7 7a03 	vldr	s15, [r7, #12]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001224:	ee17 2a90 	vmov	r2, s15
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800122c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	edd7 7a03 	vldr	s15, [r7, #12]
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 2a90 	vmov	r2, s15
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800124c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001258:	edd7 7a03 	vldr	s15, [r7, #12]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	ee17 2a90 	vmov	r2, s15
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	460b      	mov	r3, r1
 8001284:	72fb      	strb	r3, [r7, #11]
 8001286:	4613      	mov	r3, r2
 8001288:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685c      	ldr	r4, [r3, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68d8      	ldr	r0, [r3, #12]
 8001292:	893b      	ldrh	r3, [r7, #8]
 8001294:	7af9      	ldrb	r1, [r7, #11]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	47a0      	blx	r4
 800129a:	6178      	str	r0, [r7, #20]

  return ret;
 800129c:	697b      	ldr	r3, [r7, #20]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
	...

080012a8 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	2301      	movs	r3, #1
 80012b8:	2110      	movs	r1, #16
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffdb 	bl	8001276 <lsm6dsl_read_reg>
 80012c0:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 80012c2:	7a3b      	ldrb	r3, [r7, #8]
 80012c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d81a      	bhi.n	8001304 <lsm6dsl_xl_full_scale_get+0x5c>
 80012ce:	a201      	add	r2, pc, #4	@ (adr r2, 80012d4 <lsm6dsl_xl_full_scale_get+0x2c>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	080012fd 	.word	0x080012fd
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
      break;
 80012ea:	e00f      	b.n	800130c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
      break;
 80012f2:	e00b      	b.n	800130c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	701a      	strb	r2, [r3, #0]
      break;
 80012fa:	e007      	b.n	800130c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2203      	movs	r2, #3
 8001300:	701a      	strb	r2, [r3, #0]
      break;
 8001302:	e003      	b.n	800130c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2204      	movs	r2, #4
 8001308:	701a      	strb	r2, [r3, #0]
      break;
 800130a:	bf00      	nop
  }

  return ret;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop

08001318 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	2306      	movs	r3, #6
 8001328:	2128      	movs	r1, #40	@ 0x28
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa3 	bl	8001276 <lsm6dsl_read_reg>
 8001330:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001332:	7b7b      	ldrb	r3, [r7, #13]
 8001334:	b21a      	sxth	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	b29b      	uxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b29b      	uxth	r3, r3
 8001346:	7b3a      	ldrb	r2, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	b21a      	sxth	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	3302      	adds	r3, #2
 8001358:	b212      	sxth	r2, r2
 800135a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3302      	adds	r3, #2
 8001360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001364:	b29b      	uxth	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	7bba      	ldrb	r2, [r7, #14]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3302      	adds	r3, #2
 8001374:	b212      	sxth	r2, r2
 8001376:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001378:	7c7a      	ldrb	r2, [r7, #17]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	3304      	adds	r3, #4
 800137e:	b212      	sxth	r2, r2
 8001380:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138a:	b29b      	uxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	7c3a      	ldrb	r2, [r7, #16]
 8001392:	4413      	add	r3, r2
 8001394:	b29a      	uxth	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3304      	adds	r3, #4
 800139a:	b212      	sxth	r2, r2
 800139c:	801a      	strh	r2, [r3, #0]

  return ret;
 800139e:	697b      	ldr	r3, [r7, #20]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <HAL_Init+0x40>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_Init+0x40>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_Init+0x40>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f94f 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f808 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fb90 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f967 	bl	80016de <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f92f 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	20000008 	.word	0x20000008
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008
 8001470:	2000025c 	.word	0x2000025c

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000025c 	.word	0x2000025c

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff ffee 	bl	8001474 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d005      	beq.n	80014b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_Delay+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b2:	bf00      	nop
 80014b4:	f7ff ffde 	bl	8001474 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <HAL_Delay+0x28>
  {
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	@ (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff8e 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff29 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff3e 	bl	800151c <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff8e 	bl	80015c8 <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5d 	bl	8001574 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff31 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff feb6 	bl	8001474 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d008      	beq.n	8001728 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e052      	b.n	80017ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0216 	bic.w	r2, r2, #22
 8001736:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001746:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <HAL_DMA_Abort+0x62>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0208 	bic.w	r2, r2, #8
 8001766:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001778:	e013      	b.n	80017a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177a:	f7ff fe7b 	bl	8001474 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b05      	cmp	r3, #5
 8001786:	d90c      	bls.n	80017a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2220      	movs	r2, #32
 800178c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2203      	movs	r2, #3
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e015      	b.n	80017ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e4      	bne.n	800177a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b4:	223f      	movs	r2, #63	@ 0x3f
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d004      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2280      	movs	r2, #128	@ 0x80
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00c      	b.n	800180e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2205      	movs	r2, #5
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e165      	b.n	8001b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 8154 	bne.w	8001afe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d005      	beq.n	800186e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	2b02      	cmp	r3, #2
 800186c:	d130      	bne.n	80018d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 0201 	and.w	r2, r3, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d017      	beq.n	800190c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d123      	bne.n	8001960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	08da      	lsrs	r2, r3, #3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3208      	adds	r2, #8
 8001920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	69b9      	ldr	r1, [r7, #24]
 800195c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80ae 	beq.w	8001afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a5c      	ldr	r2, [pc, #368]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019be:	4a58      	ldr	r2, [pc, #352]	@ (8001b20 <HAL_GPIO_Init+0x304>)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001b24 <HAL_GPIO_Init+0x308>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d025      	beq.n	8001a36 <HAL_GPIO_Init+0x21a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001b28 <HAL_GPIO_Init+0x30c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <HAL_GPIO_Init+0x216>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4d      	ldr	r2, [pc, #308]	@ (8001b2c <HAL_GPIO_Init+0x310>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d019      	beq.n	8001a2e <HAL_GPIO_Init+0x212>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001b30 <HAL_GPIO_Init+0x314>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x20e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_GPIO_Init+0x318>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x20a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x31c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x206>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a49      	ldr	r2, [pc, #292]	@ (8001b3c <HAL_GPIO_Init+0x320>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x202>
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	e00c      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a1e:	2307      	movs	r3, #7
 8001a20:	e00a      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e008      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a26:	2304      	movs	r3, #4
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a36:	2300      	movs	r3, #0
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f002 0203 	and.w	r2, r2, #3
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4093      	lsls	r3, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a48:	4935      	ldr	r1, [pc, #212]	@ (8001b20 <HAL_GPIO_Init+0x304>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7a:	4a31      	ldr	r2, [pc, #196]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa4:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ace:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af8:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	f67f ae96 	bls.w	8001838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40021400 	.word	0x40021400
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	400b      	ands	r3, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fd0a 	bl	80005e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0cc      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b68      	ldr	r3, [pc, #416]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d90c      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b65      	ldr	r3, [pc, #404]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a58      	ldr	r2, [pc, #352]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d044      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d119      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e067      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4934      	ldr	r1, [pc, #208]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff fbd2 	bl	8001474 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff fbce 	bl	8001474 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e04f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d20c      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b22      	ldr	r3, [pc, #136]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f855 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	@ (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fb32 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	080052e0 	.word	0x080052e0
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0a9b      	lsrs	r3, r3, #10
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	@ (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	080052f0 	.word	0x080052f0

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dec:	f7ff ffdc 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0b5b      	lsrs	r3, r3, #13
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	@ (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	080052f0 	.word	0x080052f0

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b0ae      	sub	sp, #184	@ 0xb8
 8001e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e36:	4bcb      	ldr	r3, [pc, #812]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	f200 8206 	bhi.w	8002250 <HAL_RCC_GetSysClockFreq+0x440>
 8001e44:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e81 	.word	0x08001e81
 8001e50:	08002251 	.word	0x08002251
 8001e54:	08002251 	.word	0x08002251
 8001e58:	08002251 	.word	0x08002251
 8001e5c:	08001e89 	.word	0x08001e89
 8001e60:	08002251 	.word	0x08002251
 8001e64:	08002251 	.word	0x08002251
 8001e68:	08002251 	.word	0x08002251
 8001e6c:	08001e91 	.word	0x08001e91
 8001e70:	08002251 	.word	0x08002251
 8001e74:	08002251 	.word	0x08002251
 8001e78:	08002251 	.word	0x08002251
 8001e7c:	08002081 	.word	0x08002081
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4bb9      	ldr	r3, [pc, #740]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001e86:	e1e7      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e88:	4bb8      	ldr	r3, [pc, #736]	@ (800216c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e8e:	e1e3      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e90:	4bb4      	ldr	r3, [pc, #720]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9c:	4bb1      	ldr	r3, [pc, #708]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d071      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea8:	4bae      	ldr	r3, [pc, #696]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001eb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ece:	4622      	mov	r2, r4
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee0:	0150      	lsls	r0, r2, #5
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	1a51      	subs	r1, r2, r1
 8001eea:	6439      	str	r1, [r7, #64]	@ 0x40
 8001eec:	4629      	mov	r1, r5
 8001eee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f00:	4649      	mov	r1, r9
 8001f02:	018b      	lsls	r3, r1, #6
 8001f04:	4641      	mov	r1, r8
 8001f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	018a      	lsls	r2, r1, #6
 8001f0e:	4641      	mov	r1, r8
 8001f10:	1a51      	subs	r1, r2, r1
 8001f12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f14:	4649      	mov	r1, r9
 8001f16:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f28:	4649      	mov	r1, r9
 8001f2a:	00cb      	lsls	r3, r1, #3
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f32:	4641      	mov	r1, r8
 8001f34:	00ca      	lsls	r2, r1, #3
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	189b      	adds	r3, r3, r2
 8001f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f42:	462b      	mov	r3, r5
 8001f44:	460a      	mov	r2, r1
 8001f46:	eb42 0303 	adc.w	r3, r2, r3
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f58:	4629      	mov	r1, r5
 8001f5a:	024b      	lsls	r3, r1, #9
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f62:	4621      	mov	r1, r4
 8001f64:	024a      	lsls	r2, r1, #9
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f7c:	f7fe f998 	bl	80002b0 <__aeabi_uldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4613      	mov	r3, r2
 8001f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f8a:	e067      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8c:	4b75      	ldr	r3, [pc, #468]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001faa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fae:	4622      	mov	r2, r4
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	f04f 0000 	mov.w	r0, #0
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	0159      	lsls	r1, r3, #5
 8001fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc0:	0150      	lsls	r0, r2, #5
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	1a51      	subs	r1, r2, r1
 8001fca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fcc:	4629      	mov	r1, r5
 8001fce:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	018b      	lsls	r3, r1, #6
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fea:	4641      	mov	r1, r8
 8001fec:	018a      	lsls	r2, r1, #6
 8001fee:	4641      	mov	r1, r8
 8001ff0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002006:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800200a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800200e:	4692      	mov	sl, r2
 8002010:	469b      	mov	fp, r3
 8002012:	4623      	mov	r3, r4
 8002014:	eb1a 0303 	adds.w	r3, sl, r3
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	462b      	mov	r3, r5
 800201c:	eb4b 0303 	adc.w	r3, fp, r3
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800202e:	4629      	mov	r1, r5
 8002030:	028b      	lsls	r3, r1, #10
 8002032:	4621      	mov	r1, r4
 8002034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002038:	4621      	mov	r1, r4
 800203a:	028a      	lsls	r2, r1, #10
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002044:	2200      	movs	r2, #0
 8002046:	673b      	str	r3, [r7, #112]	@ 0x70
 8002048:	677a      	str	r2, [r7, #116]	@ 0x74
 800204a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800204e:	f7fe f92f 	bl	80002b0 <__aeabi_uldivmod>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4613      	mov	r3, r2
 8002058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800205c:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800206e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800207e:	e0eb      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002080:	4b38      	ldr	r3, [pc, #224]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208c:	4b35      	ldr	r3, [pc, #212]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d06b      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002098:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x354>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	2200      	movs	r2, #0
 80020a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80020ac:	2300      	movs	r3, #0
 80020ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80020b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020b4:	4622      	mov	r2, r4
 80020b6:	462b      	mov	r3, r5
 80020b8:	f04f 0000 	mov.w	r0, #0
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	0159      	lsls	r1, r3, #5
 80020c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c6:	0150      	lsls	r0, r2, #5
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4621      	mov	r1, r4
 80020ce:	1a51      	subs	r1, r2, r1
 80020d0:	61b9      	str	r1, [r7, #24]
 80020d2:	4629      	mov	r1, r5
 80020d4:	eb63 0301 	sbc.w	r3, r3, r1
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020e6:	4659      	mov	r1, fp
 80020e8:	018b      	lsls	r3, r1, #6
 80020ea:	4651      	mov	r1, sl
 80020ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020f0:	4651      	mov	r1, sl
 80020f2:	018a      	lsls	r2, r1, #6
 80020f4:	4651      	mov	r1, sl
 80020f6:	ebb2 0801 	subs.w	r8, r2, r1
 80020fa:	4659      	mov	r1, fp
 80020fc:	eb63 0901 	sbc.w	r9, r3, r1
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002110:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002114:	4690      	mov	r8, r2
 8002116:	4699      	mov	r9, r3
 8002118:	4623      	mov	r3, r4
 800211a:	eb18 0303 	adds.w	r3, r8, r3
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	462b      	mov	r3, r5
 8002122:	eb49 0303 	adc.w	r3, r9, r3
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002134:	4629      	mov	r1, r5
 8002136:	024b      	lsls	r3, r1, #9
 8002138:	4621      	mov	r1, r4
 800213a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800213e:	4621      	mov	r1, r4
 8002140:	024a      	lsls	r2, r1, #9
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800214a:	2200      	movs	r2, #0
 800214c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800214e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002150:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002154:	f7fe f8ac 	bl	80002b0 <__aeabi_uldivmod>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4613      	mov	r3, r2
 800215e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002162:	e065      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x420>
 8002164:	40023800 	.word	0x40023800
 8002168:	00f42400 	.word	0x00f42400
 800216c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002170:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x458>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	2200      	movs	r2, #0
 8002178:	4618      	mov	r0, r3
 800217a:	4611      	mov	r1, r2
 800217c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002180:	653b      	str	r3, [r7, #80]	@ 0x50
 8002182:	2300      	movs	r3, #0
 8002184:	657b      	str	r3, [r7, #84]	@ 0x54
 8002186:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800218a:	4642      	mov	r2, r8
 800218c:	464b      	mov	r3, r9
 800218e:	f04f 0000 	mov.w	r0, #0
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219c:	0150      	lsls	r0, r2, #5
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4641      	mov	r1, r8
 80021a4:	1a51      	subs	r1, r2, r1
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	4649      	mov	r1, r9
 80021aa:	eb63 0301 	sbc.w	r3, r3, r1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021bc:	4659      	mov	r1, fp
 80021be:	018b      	lsls	r3, r1, #6
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c6:	4651      	mov	r1, sl
 80021c8:	018a      	lsls	r2, r1, #6
 80021ca:	4651      	mov	r1, sl
 80021cc:	1a54      	subs	r4, r2, r1
 80021ce:	4659      	mov	r1, fp
 80021d0:	eb63 0501 	sbc.w	r5, r3, r1
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	00eb      	lsls	r3, r5, #3
 80021de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e2:	00e2      	lsls	r2, r4, #3
 80021e4:	4614      	mov	r4, r2
 80021e6:	461d      	mov	r5, r3
 80021e8:	4643      	mov	r3, r8
 80021ea:	18e3      	adds	r3, r4, r3
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	464b      	mov	r3, r9
 80021f0:	eb45 0303 	adc.w	r3, r5, r3
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002202:	4629      	mov	r1, r5
 8002204:	028b      	lsls	r3, r1, #10
 8002206:	4621      	mov	r1, r4
 8002208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800220c:	4621      	mov	r1, r4
 800220e:	028a      	lsls	r2, r1, #10
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002218:	2200      	movs	r2, #0
 800221a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800221c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800221e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002222:	f7fe f845 	bl	80002b0 <__aeabi_uldivmod>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4613      	mov	r3, r2
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x458>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0f1b      	lsrs	r3, r3, #28
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800223e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800224e:	e003      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800225c:	4618      	mov	r0, r3
 800225e:	37b8      	adds	r7, #184	@ 0xb8
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400

08002270 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e28d      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8083 	beq.w	8002396 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002290:	4b94      	ldr	r3, [pc, #592]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b04      	cmp	r3, #4
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800229c:	4b91      	ldr	r3, [pc, #580]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a8:	4b8e      	ldr	r3, [pc, #568]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022b4:	d00c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b6:	4b8b      	ldr	r3, [pc, #556]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d112      	bne.n	80022e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b88      	ldr	r3, [pc, #544]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	4b84      	ldr	r3, [pc, #528]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d05b      	beq.n	8002394 <HAL_RCC_OscConfig+0x124>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d157      	bne.n	8002394 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e25a      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f0:	d106      	bne.n	8002300 <HAL_RCC_OscConfig+0x90>
 80022f2:	4b7c      	ldr	r3, [pc, #496]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7b      	ldr	r2, [pc, #492]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e01d      	b.n	800233c <HAL_RCC_OscConfig+0xcc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0xb4>
 800230a:	4b76      	ldr	r3, [pc, #472]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b73      	ldr	r3, [pc, #460]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a72      	ldr	r2, [pc, #456]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0xcc>
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b6c      	ldr	r3, [pc, #432]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6b      	ldr	r2, [pc, #428]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7ff f896 	bl	8001474 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234c:	f7ff f892 	bl	8001474 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e21f      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b61      	ldr	r3, [pc, #388]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0xdc>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7ff f882 	bl	8001474 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002374:	f7ff f87e 	bl	8001474 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	@ 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e20b      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	4b57      	ldr	r3, [pc, #348]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x104>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06f      	beq.n	8002482 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023a2:	4b50      	ldr	r3, [pc, #320]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d017      	beq.n	80023de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ae:	4b4d      	ldr	r3, [pc, #308]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ba:	4b4a      	ldr	r3, [pc, #296]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b47      	ldr	r3, [pc, #284]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b44      	ldr	r3, [pc, #272]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x186>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1d3      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4937      	ldr	r1, [pc, #220]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b34      	ldr	r3, [pc, #208]	@ (80024e8 <HAL_RCC_OscConfig+0x278>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff f82b 	bl	8001474 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff f827 	bl	8001474 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1b4      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2b      	ldr	r3, [pc, #172]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b28      	ldr	r3, [pc, #160]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4925      	ldr	r1, [pc, #148]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_RCC_OscConfig+0x278>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f80a 	bl	8001474 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff f806 	bl	8001474 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e193      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_RCC_OscConfig+0x27c>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe ffea 	bl	8001474 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe ffe6 	bl	8001474 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e173      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_OscConfig+0x274>)
 80024b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x234>
 80024c2:	e01b      	b.n	80024fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c4:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_RCC_OscConfig+0x27c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe ffd3 	bl	8001474 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e00e      	b.n	80024f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe ffcf 	bl	8001474 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d907      	bls.n	80024f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e15c      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
 80024e4:	40023800 	.word	0x40023800
 80024e8:	42470000 	.word	0x42470000
 80024ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b8a      	ldr	r3, [pc, #552]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ea      	bne.n	80024d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8097 	beq.w	8002638 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b83      	ldr	r3, [pc, #524]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b7f      	ldr	r3, [pc, #508]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	4a7e      	ldr	r2, [pc, #504]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	@ 0x40
 800252a:	4b7c      	ldr	r3, [pc, #496]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b79      	ldr	r3, [pc, #484]	@ (8002720 <HAL_RCC_OscConfig+0x4b0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x4b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a75      	ldr	r2, [pc, #468]	@ (8002720 <HAL_RCC_OscConfig+0x4b0>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe ff8f 	bl	8001474 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe ff8b 	bl	8001474 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e118      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b6c      	ldr	r3, [pc, #432]	@ (8002720 <HAL_RCC_OscConfig+0x4b0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x31e>
 8002580:	4b66      	ldr	r3, [pc, #408]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	4a65      	ldr	r2, [pc, #404]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	@ 0x70
 800258c:	e01c      	b.n	80025c8 <HAL_RCC_OscConfig+0x358>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x340>
 8002596:	4b61      	ldr	r3, [pc, #388]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259a:	4a60      	ldr	r2, [pc, #384]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a2:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	4a5d      	ldr	r2, [pc, #372]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0x358>
 80025b0:	4b5a      	ldr	r3, [pc, #360]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a59      	ldr	r2, [pc, #356]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	4b57      	ldr	r3, [pc, #348]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a56      	ldr	r2, [pc, #344]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe ff50 	bl	8001474 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe ff4c 	bl	8001474 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0d7      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	4b4b      	ldr	r3, [pc, #300]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ee      	beq.n	80025d8 <HAL_RCC_OscConfig+0x368>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe ff3a 	bl	8001474 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe ff36 	bl	8001474 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0c1      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ee      	bne.n	8002604 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	4a3a      	ldr	r2, [pc, #232]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80ad 	beq.w	800279c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002642:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d060      	beq.n	8002710 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d145      	bne.n	80026e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <HAL_RCC_OscConfig+0x4b4>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe ff0a 	bl	8001474 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe ff06 	bl	8001474 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e093      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b29      	ldr	r3, [pc, #164]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	491b      	ldr	r1, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCC_OscConfig+0x4b4>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fedb 	bl	8001474 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fed7 	bl	8001474 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e064      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x452>
 80026e0:	e05c      	b.n	800279c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_OscConfig+0x4b4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fec4 	bl	8001474 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fec0 	bl	8001474 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e04d      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_OscConfig+0x4ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x480>
 800270e:	e045      	b.n	800279c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e040      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000
 8002724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <HAL_RCC_OscConfig+0x538>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d030      	beq.n	8002798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d129      	bne.n	8002798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d122      	bne.n	8002798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800275e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	4293      	cmp	r3, r2
 8002762:	d119      	bne.n	8002798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	3b01      	subs	r3, #1
 8002772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d10f      	bne.n	8002798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07b      	b.n	80028b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027ce:	d009      	beq.n	80027e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
 80027d6:	e005      	b.n	80027e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe f9a6 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800281a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	ea42 0103 	orr.w	r1, r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	f003 0104 	and.w	r1, r3, #4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	f003 0210 	and.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
    return;
 80028fe:	e0ce      	b.n	8002a9e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_SPI_IRQHandler+0x5e>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
    return;
 800291c:	e0bf      	b.n	8002a9e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_SPI_IRQHandler+0x7e>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b0 	beq.w	8002a9e <HAL_SPI_IRQHandler+0x1de>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80aa 	beq.w	8002a9e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d023      	beq.n	800299c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b03      	cmp	r3, #3
 800295e:	d011      	beq.n	8002984 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	e00b      	b.n	800299c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
        return;
 800299a:	e080      	b.n	8002a9e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d014      	beq.n	80029d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0208 	orr.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d04f      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a0a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_SPI_IRQHandler+0x168>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d034      	beq.n	8002a92 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0203 	bic.w	r2, r2, #3
 8002a36:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d011      	beq.n	8002a64 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <HAL_SPI_IRQHandler+0x1e4>)
 8002a46:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fec2 	bl	80017d6 <HAL_DMA_Abort_IT>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <HAL_SPI_IRQHandler+0x1e4>)
 8002a72:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe feac 	bl	80017d6 <HAL_DMA_Abort_IT>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002a90:	e003      	b.n	8002a9a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f808 	bl	8002aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a98:	e000      	b.n	8002a9c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002a9a:	bf00      	nop
    return;
 8002a9c:	bf00      	nop
  }
}
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	08002ad9 	.word	0x08002ad9

08002aa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002aca:	b2db      	uxtb	r3, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff ffd8 	bl	8002aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe f86a 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 faac 	bl	800309c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d001      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e04e      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a23      	ldr	r2, [pc, #140]	@ (8002c64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be2:	d01d      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a18      	ldr	r2, [pc, #96]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d010      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e007      	b.n	8002c54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40010400 	.word	0x40010400
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40001800 	.word	0x40001800

08002c80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_TIM_Base_Stop_IT+0x48>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_Base_Stop_IT+0x48>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01b      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0202 	mvn.w	r2, #2
 8002d12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f999 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 8002d2e:	e005      	b.n	8002d3c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f98b 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f99c 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01b      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0204 	mvn.w	r2, #4
 8002d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f973 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 8002d7a:	e005      	b.n	8002d88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f965 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f976 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01b      	beq.n	8002dda <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0208 	mvn.w	r2, #8
 8002daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2204      	movs	r2, #4
 8002db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f94d 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 8002dc6:	e005      	b.n	8002dd4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f93f 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f950 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d01b      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0210 	mvn.w	r2, #16
 8002df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f927 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 8002e12:	e005      	b.n	8002e20 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f919 	bl	800304c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f92a 	bl	8003074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0201 	mvn.w	r2, #1
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fbab 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fae3 	bl	8003434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00c      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f8fb 	bl	8003088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0220 	mvn.w	r2, #32
 8002eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fab5 	bl	8003420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_ConfigClockSource+0x1c>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0b4      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x186>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ef8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f12:	d03e      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xd4>
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f18:	f200 8087 	bhi.w	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f20:	f000 8086 	beq.w	8003030 <HAL_TIM_ConfigClockSource+0x172>
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f28:	d87f      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f2a:	2b70      	cmp	r3, #112	@ 0x70
 8002f2c:	d01a      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0xa6>
 8002f2e:	2b70      	cmp	r3, #112	@ 0x70
 8002f30:	d87b      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	2b60      	cmp	r3, #96	@ 0x60
 8002f34:	d050      	beq.n	8002fd8 <HAL_TIM_ConfigClockSource+0x11a>
 8002f36:	2b60      	cmp	r3, #96	@ 0x60
 8002f38:	d877      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f3a:	2b50      	cmp	r3, #80	@ 0x50
 8002f3c:	d03c      	beq.n	8002fb8 <HAL_TIM_ConfigClockSource+0xfa>
 8002f3e:	2b50      	cmp	r3, #80	@ 0x50
 8002f40:	d873      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f42:	2b40      	cmp	r3, #64	@ 0x40
 8002f44:	d058      	beq.n	8002ff8 <HAL_TIM_ConfigClockSource+0x13a>
 8002f46:	2b40      	cmp	r3, #64	@ 0x40
 8002f48:	d86f      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f4a:	2b30      	cmp	r3, #48	@ 0x30
 8002f4c:	d064      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0x15a>
 8002f4e:	2b30      	cmp	r3, #48	@ 0x30
 8002f50:	d86b      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d060      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0x15a>
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d867      	bhi.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d05c      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0x15a>
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d05a      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0x15a>
 8002f62:	e062      	b.n	800302a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f74:	f000 f9b8 	bl	80032e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	609a      	str	r2, [r3, #8]
      break;
 8002f90:	e04f      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	f000 f9a1 	bl	80032e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fb4:	609a      	str	r2, [r3, #8]
      break;
 8002fb6:	e03c      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f000 f915 	bl	80031f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2150      	movs	r1, #80	@ 0x50
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f96e 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002fd6:	e02c      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f000 f934 	bl	8003252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2160      	movs	r1, #96	@ 0x60
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f95e 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002ff6:	e01c      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003004:	461a      	mov	r2, r3
 8003006:	f000 f8f5 	bl	80031f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2140      	movs	r1, #64	@ 0x40
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f94e 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003016:	e00c      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 f945 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003028:	e003      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
      break;
 800302e:	e000      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003030:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a46      	ldr	r2, [pc, #280]	@ (80031c8 <TIM_Base_SetConfig+0x12c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ba:	d00f      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a43      	ldr	r2, [pc, #268]	@ (80031cc <TIM_Base_SetConfig+0x130>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a42      	ldr	r2, [pc, #264]	@ (80031d0 <TIM_Base_SetConfig+0x134>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a41      	ldr	r2, [pc, #260]	@ (80031d4 <TIM_Base_SetConfig+0x138>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a40      	ldr	r2, [pc, #256]	@ (80031d8 <TIM_Base_SetConfig+0x13c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d108      	bne.n	80030ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a35      	ldr	r2, [pc, #212]	@ (80031c8 <TIM_Base_SetConfig+0x12c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02b      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fc:	d027      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a32      	ldr	r2, [pc, #200]	@ (80031cc <TIM_Base_SetConfig+0x130>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d023      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a31      	ldr	r2, [pc, #196]	@ (80031d0 <TIM_Base_SetConfig+0x134>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a30      	ldr	r2, [pc, #192]	@ (80031d4 <TIM_Base_SetConfig+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01b      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2f      	ldr	r2, [pc, #188]	@ (80031d8 <TIM_Base_SetConfig+0x13c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d017      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2e      	ldr	r2, [pc, #184]	@ (80031dc <TIM_Base_SetConfig+0x140>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2d      	ldr	r2, [pc, #180]	@ (80031e0 <TIM_Base_SetConfig+0x144>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00f      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2c      	ldr	r2, [pc, #176]	@ (80031e4 <TIM_Base_SetConfig+0x148>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00b      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2b      	ldr	r2, [pc, #172]	@ (80031e8 <TIM_Base_SetConfig+0x14c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <TIM_Base_SetConfig+0x150>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <TIM_Base_SetConfig+0x154>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d108      	bne.n	8003160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <TIM_Base_SetConfig+0x12c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_Base_SetConfig+0xf8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <TIM_Base_SetConfig+0x13c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]
  }
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40010400 	.word	0x40010400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	40001800 	.word	0x40001800
 80031ec:	40001c00 	.word	0x40001c00
 80031f0:	40002000 	.word	0x40002000

080031f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800321e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f023 030a 	bic.w	r3, r3, #10
 8003230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003252:	b480      	push	{r7}
 8003254:	b087      	sub	sp, #28
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f023 0210 	bic.w	r2, r3, #16
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800327c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800328e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	431a      	orrs	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800333c:	2302      	movs	r3, #2
 800333e:	e05a      	b.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a21      	ldr	r2, [pc, #132]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d01d      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d018      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a15      	ldr	r2, [pc, #84]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10c      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40010400 	.word	0x40010400
 8003418:	40014000 	.word	0x40014000
 800341c:	40001800 	.word	0x40001800

08003420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e042      	b.n	80034e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fc0c 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	@ 0x24
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800348a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fd69 	bl	8003f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d175      	bne.n	80035f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Transmit+0x2c>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e06e      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2221      	movs	r2, #33	@ 0x21
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003526:	f7fd ffa5 	bl	8001474 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003540:	d108      	bne.n	8003554 <HAL_UART_Transmit+0x6c>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e003      	b.n	800355c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800355c:	e02e      	b.n	80035bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb05 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e03a      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	3302      	adds	r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e007      	b.n	80035ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1cb      	bne.n	800355e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2140      	movs	r1, #64	@ 0x40
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fad1 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b0ba      	sub	sp, #232	@ 0xe8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800363e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_UART_IRQHandler+0x66>
 8003652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fbc2 	bl	8003de8 <UART_Receive_IT>
      return;
 8003664:	e25b      	b.n	8003b1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80de 	beq.w	800382c <HAL_UART_IRQHandler+0x22c>
 8003670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003680:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80d1 	beq.w	800382c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_UART_IRQHandler+0xae>
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_UART_IRQHandler+0xd2>
 80036ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	f043 0202 	orr.w	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0xf6>
 80036de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	f043 0204 	orr.w	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <HAL_UART_IRQHandler+0x126>
 8003702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800370e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f043 0208 	orr.w	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 81f2 	beq.w	8003b14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x14e>
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fb4d 	bl	8003de8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_UART_IRQHandler+0x17a>
 8003772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d04f      	beq.n	800381a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa55 	bl	8003c2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d141      	bne.n	8003812 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3314      	adds	r3, #20
 80037b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1d9      	bne.n	800378e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d013      	beq.n	800380a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	4a7e      	ldr	r2, [pc, #504]	@ (80039e0 <HAL_UART_IRQHandler+0x3e0>)
 80037e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fff1 	bl	80017d6 <HAL_DMA_Abort_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003804:	4610      	mov	r0, r2
 8003806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00e      	b.n	8003828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f99e 	bl	8003b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e00a      	b.n	8003828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f99a 	bl	8003b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e006      	b.n	8003828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f996 	bl	8003b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003826:	e175      	b.n	8003b14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	bf00      	nop
    return;
 800382a:	e173      	b.n	8003b14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 814f 	bne.w	8003ad4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8148 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8141 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003872:	2b40      	cmp	r3, #64	@ 0x40
 8003874:	f040 80b6 	bne.w	80039e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8145 	beq.w	8003b18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003896:	429a      	cmp	r2, r3
 8003898:	f080 813e 	bcs.w	8003b18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ae:	f000 8088 	beq.w	80039c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1d9      	bne.n	80038b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800390e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3314      	adds	r3, #20
 800391e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003922:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003926:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800392a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e1      	bne.n	80038fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800394a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800394c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3314      	adds	r3, #20
 800395a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800395e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003960:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003964:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800396c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e3      	bne.n	800393a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003992:	f023 0310 	bic.w	r3, r3, #16
 8003996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e3      	bne.n	8003980 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fe9a 	bl	80016f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8c1 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039de:	e09b      	b.n	8003b18 <HAL_UART_IRQHandler+0x518>
 80039e0:	08003cf1 	.word	0x08003cf1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 808e 	beq.w	8003b1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8089 	beq.w	8003b1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e3      	bne.n	8003a0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3314      	adds	r3, #20
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	623b      	str	r3, [r7, #32]
   return(result);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a66:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e3      	bne.n	8003a42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0310 	bic.w	r3, r3, #16
 8003a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e3      	bne.n	8003a88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ac6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f847 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ad2:	e023      	b.n	8003b1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <HAL_UART_IRQHandler+0x4f4>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f913 	bl	8003d18 <UART_Transmit_IT>
    return;
 8003af2:	e014      	b.n	8003b1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <HAL_UART_IRQHandler+0x51e>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f953 	bl	8003db8 <UART_EndTransmit_IT>
    return;
 8003b12:	e004      	b.n	8003b1e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b1c:	bf00      	nop
  }
}
 8003b1e:	37e8      	adds	r7, #232	@ 0xe8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	e03b      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d037      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fd fc6f 	bl	8001474 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e03a      	b.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d023      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b80      	cmp	r3, #128	@ 0x80
 8003bbe:	d020      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b40      	cmp	r3, #64	@ 0x40
 8003bc4:	d01d      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d116      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f81d 	bl	8003c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00f      	b.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d0b4      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b095      	sub	sp, #84	@ 0x54
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c52:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3314      	adds	r3, #20
 8003c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e5      	bne.n	8003c66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d119      	bne.n	8003cd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0310 	bic.w	r3, r3, #16
 8003cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc2:	61ba      	str	r2, [r7, #24]
 8003cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6979      	ldr	r1, [r7, #20]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e5      	bne.n	8003ca2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ce4:	bf00      	nop
 8003ce6:	3754      	adds	r7, #84	@ 0x54
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff ff1e 	bl	8003b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b21      	cmp	r3, #33	@ 0x21
 8003d2a:	d13e      	bne.n	8003daa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d34:	d114      	bne.n	8003d60 <UART_Transmit_IT+0x48>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d110      	bne.n	8003d60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]
 8003d5e:	e008      	b.n	8003d72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	1c59      	adds	r1, r3, #1
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6211      	str	r1, [r2, #32]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003da4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003daa:	2302      	movs	r3, #2
  }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fea3 	bl	8003b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	@ 0x30
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b22      	cmp	r3, #34	@ 0x22
 8003dfa:	f040 80ae 	bne.w	8003f5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e06:	d117      	bne.n	8003e38 <UART_Receive_IT+0x50>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d113      	bne.n	8003e38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e36:	e026      	b.n	8003e86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4a:	d007      	beq.n	8003e5c <UART_Receive_IT+0x74>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <UART_Receive_IT+0x82>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e008      	b.n	8003e7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4619      	mov	r1, r3
 8003e94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d15d      	bne.n	8003f56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0220 	bic.w	r2, r2, #32
 8003ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d135      	bne.n	8003f4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f023 0310 	bic.w	r3, r3, #16
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f06:	623a      	str	r2, [r7, #32]
 8003f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	69f9      	ldr	r1, [r7, #28]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d10a      	bne.n	8003f3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fe0b 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
 8003f4a:	e002      	b.n	8003f52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fdf3 	bl	8003b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e002      	b.n	8003f5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	@ 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f68:	b0c0      	sub	sp, #256	@ 0x100
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	68d9      	ldr	r1, [r3, #12]
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	ea40 0301 	orr.w	r3, r0, r1
 8003f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fbc:	f021 010c 	bic.w	r1, r1, #12
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fde:	6999      	ldr	r1, [r3, #24]
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	ea40 0301 	orr.w	r3, r0, r1
 8003fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8004230 <UART_SetConfig+0x2cc>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d005      	beq.n	8004004 <UART_SetConfig+0xa0>
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8004234 <UART_SetConfig+0x2d0>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d104      	bne.n	800400e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004004:	f7fd fef0 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8004008:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800400c:	e003      	b.n	8004016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400e:	f7fd fed7 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8004012:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004020:	f040 810c 	bne.w	800423c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800402e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	1891      	adds	r1, r2, r2
 800403c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800403e:	415b      	adcs	r3, r3
 8004040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004046:	4621      	mov	r1, r4
 8004048:	eb12 0801 	adds.w	r8, r2, r1
 800404c:	4629      	mov	r1, r5
 800404e:	eb43 0901 	adc.w	r9, r3, r1
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800405e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004066:	4690      	mov	r8, r2
 8004068:	4699      	mov	r9, r3
 800406a:	4623      	mov	r3, r4
 800406c:	eb18 0303 	adds.w	r3, r8, r3
 8004070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004074:	462b      	mov	r3, r5
 8004076:	eb49 0303 	adc.w	r3, r9, r3
 800407a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800408a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800408e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004092:	460b      	mov	r3, r1
 8004094:	18db      	adds	r3, r3, r3
 8004096:	653b      	str	r3, [r7, #80]	@ 0x50
 8004098:	4613      	mov	r3, r2
 800409a:	eb42 0303 	adc.w	r3, r2, r3
 800409e:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040a8:	f7fc f902 	bl	80002b0 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4b61      	ldr	r3, [pc, #388]	@ (8004238 <UART_SetConfig+0x2d4>)
 80040b2:	fba3 2302 	umull	r2, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	011c      	lsls	r4, r3, #4
 80040ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040d4:	415b      	adcs	r3, r3
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040dc:	4641      	mov	r1, r8
 80040de:	eb12 0a01 	adds.w	sl, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb43 0b01 	adc.w	fp, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fc:	4692      	mov	sl, r2
 80040fe:	469b      	mov	fp, r3
 8004100:	4643      	mov	r3, r8
 8004102:	eb1a 0303 	adds.w	r3, sl, r3
 8004106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800410a:	464b      	mov	r3, r9
 800410c:	eb4b 0303 	adc.w	r3, fp, r3
 8004110:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004120:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004128:	460b      	mov	r3, r1
 800412a:	18db      	adds	r3, r3, r3
 800412c:	643b      	str	r3, [r7, #64]	@ 0x40
 800412e:	4613      	mov	r3, r2
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	647b      	str	r3, [r7, #68]	@ 0x44
 8004136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800413a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800413e:	f7fc f8b7 	bl	80002b0 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4611      	mov	r1, r2
 8004148:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <UART_SetConfig+0x2d4>)
 800414a:	fba3 2301 	umull	r2, r3, r3, r1
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2264      	movs	r2, #100	@ 0x64
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	1acb      	subs	r3, r1, r3
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800415e:	4b36      	ldr	r3, [pc, #216]	@ (8004238 <UART_SetConfig+0x2d4>)
 8004160:	fba3 2302 	umull	r2, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800416c:	441c      	add	r4, r3
 800416e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004178:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800417c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	1891      	adds	r1, r2, r2
 8004186:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004188:	415b      	adcs	r3, r3
 800418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004190:	4641      	mov	r1, r8
 8004192:	1851      	adds	r1, r2, r1
 8004194:	6339      	str	r1, [r7, #48]	@ 0x30
 8004196:	4649      	mov	r1, r9
 8004198:	414b      	adcs	r3, r1
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041a8:	4659      	mov	r1, fp
 80041aa:	00cb      	lsls	r3, r1, #3
 80041ac:	4651      	mov	r1, sl
 80041ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b2:	4651      	mov	r1, sl
 80041b4:	00ca      	lsls	r2, r1, #3
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	4642      	mov	r2, r8
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041c4:	464b      	mov	r3, r9
 80041c6:	460a      	mov	r2, r1
 80041c8:	eb42 0303 	adc.w	r3, r2, r3
 80041cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041e4:	460b      	mov	r3, r1
 80041e6:	18db      	adds	r3, r3, r3
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ea:	4613      	mov	r3, r2
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041fa:	f7fc f859 	bl	80002b0 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <UART_SetConfig+0x2d4>)
 8004204:	fba3 1302 	umull	r1, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	2164      	movs	r1, #100	@ 0x64
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	3332      	adds	r3, #50	@ 0x32
 8004216:	4a08      	ldr	r2, [pc, #32]	@ (8004238 <UART_SetConfig+0x2d4>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4422      	add	r2, r4
 800422a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800422c:	e106      	b.n	800443c <UART_SetConfig+0x4d8>
 800422e:	bf00      	nop
 8004230:	40011000 	.word	0x40011000
 8004234:	40011400 	.word	0x40011400
 8004238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004246:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800424a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800424e:	4642      	mov	r2, r8
 8004250:	464b      	mov	r3, r9
 8004252:	1891      	adds	r1, r2, r2
 8004254:	6239      	str	r1, [r7, #32]
 8004256:	415b      	adcs	r3, r3
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
 800425a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800425e:	4641      	mov	r1, r8
 8004260:	1854      	adds	r4, r2, r1
 8004262:	4649      	mov	r1, r9
 8004264:	eb43 0501 	adc.w	r5, r3, r1
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	00eb      	lsls	r3, r5, #3
 8004272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004276:	00e2      	lsls	r2, r4, #3
 8004278:	4614      	mov	r4, r2
 800427a:	461d      	mov	r5, r3
 800427c:	4643      	mov	r3, r8
 800427e:	18e3      	adds	r3, r4, r3
 8004280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004284:	464b      	mov	r3, r9
 8004286:	eb45 0303 	adc.w	r3, r5, r3
 800428a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800429a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042aa:	4629      	mov	r1, r5
 80042ac:	008b      	lsls	r3, r1, #2
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b4:	4621      	mov	r1, r4
 80042b6:	008a      	lsls	r2, r1, #2
 80042b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042bc:	f7fb fff8 	bl	80002b0 <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4b60      	ldr	r3, [pc, #384]	@ (8004448 <UART_SetConfig+0x4e4>)
 80042c6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	011c      	lsls	r4, r3, #4
 80042ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	1891      	adds	r1, r2, r2
 80042e6:	61b9      	str	r1, [r7, #24]
 80042e8:	415b      	adcs	r3, r3
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f0:	4641      	mov	r1, r8
 80042f2:	1851      	adds	r1, r2, r1
 80042f4:	6139      	str	r1, [r7, #16]
 80042f6:	4649      	mov	r1, r9
 80042f8:	414b      	adcs	r3, r1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004308:	4659      	mov	r1, fp
 800430a:	00cb      	lsls	r3, r1, #3
 800430c:	4651      	mov	r1, sl
 800430e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004312:	4651      	mov	r1, sl
 8004314:	00ca      	lsls	r2, r1, #3
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	4603      	mov	r3, r0
 800431c:	4642      	mov	r2, r8
 800431e:	189b      	adds	r3, r3, r2
 8004320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004324:	464b      	mov	r3, r9
 8004326:	460a      	mov	r2, r1
 8004328:	eb42 0303 	adc.w	r3, r2, r3
 800432c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800433a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004348:	4649      	mov	r1, r9
 800434a:	008b      	lsls	r3, r1, #2
 800434c:	4641      	mov	r1, r8
 800434e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004352:	4641      	mov	r1, r8
 8004354:	008a      	lsls	r2, r1, #2
 8004356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800435a:	f7fb ffa9 	bl	80002b0 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4611      	mov	r1, r2
 8004364:	4b38      	ldr	r3, [pc, #224]	@ (8004448 <UART_SetConfig+0x4e4>)
 8004366:	fba3 2301 	umull	r2, r3, r3, r1
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2264      	movs	r2, #100	@ 0x64
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	1acb      	subs	r3, r1, r3
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	3332      	adds	r3, #50	@ 0x32
 8004378:	4a33      	ldr	r2, [pc, #204]	@ (8004448 <UART_SetConfig+0x4e4>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004384:	441c      	add	r4, r3
 8004386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438a:	2200      	movs	r2, #0
 800438c:	673b      	str	r3, [r7, #112]	@ 0x70
 800438e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	415b      	adcs	r3, r3
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043d6:	464b      	mov	r3, r9
 80043d8:	460a      	mov	r2, r1
 80043da:	eb42 0303 	adc.w	r3, r2, r3
 80043de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043f8:	4649      	mov	r1, r9
 80043fa:	008b      	lsls	r3, r1, #2
 80043fc:	4641      	mov	r1, r8
 80043fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004402:	4641      	mov	r1, r8
 8004404:	008a      	lsls	r2, r1, #2
 8004406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800440a:	f7fb ff51 	bl	80002b0 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <UART_SetConfig+0x4e4>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2164      	movs	r1, #100	@ 0x64
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	3332      	adds	r3, #50	@ 0x32
 8004426:	4a08      	ldr	r2, [pc, #32]	@ (8004448 <UART_SetConfig+0x4e4>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4422      	add	r2, r4
 800443a:	609a      	str	r2, [r3, #8]
}
 800443c:	bf00      	nop
 800443e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004442:	46bd      	mov	sp, r7
 8004444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004448:	51eb851f 	.word	0x51eb851f

0800444c <std>:
 800444c:	2300      	movs	r3, #0
 800444e:	b510      	push	{r4, lr}
 8004450:	4604      	mov	r4, r0
 8004452:	e9c0 3300 	strd	r3, r3, [r0]
 8004456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800445a:	6083      	str	r3, [r0, #8]
 800445c:	8181      	strh	r1, [r0, #12]
 800445e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004460:	81c2      	strh	r2, [r0, #14]
 8004462:	6183      	str	r3, [r0, #24]
 8004464:	4619      	mov	r1, r3
 8004466:	2208      	movs	r2, #8
 8004468:	305c      	adds	r0, #92	@ 0x5c
 800446a:	f000 f906 	bl	800467a <memset>
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <std+0x58>)
 8004470:	6263      	str	r3, [r4, #36]	@ 0x24
 8004472:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <std+0x5c>)
 8004474:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004476:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <std+0x60>)
 8004478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <std+0x64>)
 800447c:	6323      	str	r3, [r4, #48]	@ 0x30
 800447e:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <std+0x68>)
 8004480:	6224      	str	r4, [r4, #32]
 8004482:	429c      	cmp	r4, r3
 8004484:	d006      	beq.n	8004494 <std+0x48>
 8004486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800448a:	4294      	cmp	r4, r2
 800448c:	d002      	beq.n	8004494 <std+0x48>
 800448e:	33d0      	adds	r3, #208	@ 0xd0
 8004490:	429c      	cmp	r4, r3
 8004492:	d105      	bne.n	80044a0 <std+0x54>
 8004494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	f000 b966 	b.w	800476c <__retarget_lock_init_recursive>
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	bf00      	nop
 80044a4:	080045f5 	.word	0x080045f5
 80044a8:	08004617 	.word	0x08004617
 80044ac:	0800464f 	.word	0x0800464f
 80044b0:	08004673 	.word	0x08004673
 80044b4:	20000260 	.word	0x20000260

080044b8 <stdio_exit_handler>:
 80044b8:	4a02      	ldr	r2, [pc, #8]	@ (80044c4 <stdio_exit_handler+0xc>)
 80044ba:	4903      	ldr	r1, [pc, #12]	@ (80044c8 <stdio_exit_handler+0x10>)
 80044bc:	4803      	ldr	r0, [pc, #12]	@ (80044cc <stdio_exit_handler+0x14>)
 80044be:	f000 b869 	b.w	8004594 <_fwalk_sglue>
 80044c2:	bf00      	nop
 80044c4:	2000000c 	.word	0x2000000c
 80044c8:	0800500d 	.word	0x0800500d
 80044cc:	2000001c 	.word	0x2000001c

080044d0 <cleanup_stdio>:
 80044d0:	6841      	ldr	r1, [r0, #4]
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <cleanup_stdio+0x34>)
 80044d4:	4299      	cmp	r1, r3
 80044d6:	b510      	push	{r4, lr}
 80044d8:	4604      	mov	r4, r0
 80044da:	d001      	beq.n	80044e0 <cleanup_stdio+0x10>
 80044dc:	f000 fd96 	bl	800500c <_fflush_r>
 80044e0:	68a1      	ldr	r1, [r4, #8]
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <cleanup_stdio+0x38>)
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d002      	beq.n	80044ee <cleanup_stdio+0x1e>
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fd8f 	bl	800500c <_fflush_r>
 80044ee:	68e1      	ldr	r1, [r4, #12]
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <cleanup_stdio+0x3c>)
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d004      	beq.n	8004500 <cleanup_stdio+0x30>
 80044f6:	4620      	mov	r0, r4
 80044f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fc:	f000 bd86 	b.w	800500c <_fflush_r>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	bf00      	nop
 8004504:	20000260 	.word	0x20000260
 8004508:	200002c8 	.word	0x200002c8
 800450c:	20000330 	.word	0x20000330

08004510 <global_stdio_init.part.0>:
 8004510:	b510      	push	{r4, lr}
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <global_stdio_init.part.0+0x30>)
 8004514:	4c0b      	ldr	r4, [pc, #44]	@ (8004544 <global_stdio_init.part.0+0x34>)
 8004516:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <global_stdio_init.part.0+0x38>)
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4620      	mov	r0, r4
 800451c:	2200      	movs	r2, #0
 800451e:	2104      	movs	r1, #4
 8004520:	f7ff ff94 	bl	800444c <std>
 8004524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004528:	2201      	movs	r2, #1
 800452a:	2109      	movs	r1, #9
 800452c:	f7ff ff8e 	bl	800444c <std>
 8004530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004534:	2202      	movs	r2, #2
 8004536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800453a:	2112      	movs	r1, #18
 800453c:	f7ff bf86 	b.w	800444c <std>
 8004540:	20000398 	.word	0x20000398
 8004544:	20000260 	.word	0x20000260
 8004548:	080044b9 	.word	0x080044b9

0800454c <__sfp_lock_acquire>:
 800454c:	4801      	ldr	r0, [pc, #4]	@ (8004554 <__sfp_lock_acquire+0x8>)
 800454e:	f000 b90e 	b.w	800476e <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	200003a1 	.word	0x200003a1

08004558 <__sfp_lock_release>:
 8004558:	4801      	ldr	r0, [pc, #4]	@ (8004560 <__sfp_lock_release+0x8>)
 800455a:	f000 b909 	b.w	8004770 <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	200003a1 	.word	0x200003a1

08004564 <__sinit>:
 8004564:	b510      	push	{r4, lr}
 8004566:	4604      	mov	r4, r0
 8004568:	f7ff fff0 	bl	800454c <__sfp_lock_acquire>
 800456c:	6a23      	ldr	r3, [r4, #32]
 800456e:	b11b      	cbz	r3, 8004578 <__sinit+0x14>
 8004570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004574:	f7ff bff0 	b.w	8004558 <__sfp_lock_release>
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__sinit+0x28>)
 800457a:	6223      	str	r3, [r4, #32]
 800457c:	4b04      	ldr	r3, [pc, #16]	@ (8004590 <__sinit+0x2c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f5      	bne.n	8004570 <__sinit+0xc>
 8004584:	f7ff ffc4 	bl	8004510 <global_stdio_init.part.0>
 8004588:	e7f2      	b.n	8004570 <__sinit+0xc>
 800458a:	bf00      	nop
 800458c:	080044d1 	.word	0x080044d1
 8004590:	20000398 	.word	0x20000398

08004594 <_fwalk_sglue>:
 8004594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004598:	4607      	mov	r7, r0
 800459a:	4688      	mov	r8, r1
 800459c:	4614      	mov	r4, r2
 800459e:	2600      	movs	r6, #0
 80045a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a4:	f1b9 0901 	subs.w	r9, r9, #1
 80045a8:	d505      	bpl.n	80045b6 <_fwalk_sglue+0x22>
 80045aa:	6824      	ldr	r4, [r4, #0]
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	d1f7      	bne.n	80045a0 <_fwalk_sglue+0xc>
 80045b0:	4630      	mov	r0, r6
 80045b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d907      	bls.n	80045cc <_fwalk_sglue+0x38>
 80045bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045c0:	3301      	adds	r3, #1
 80045c2:	d003      	beq.n	80045cc <_fwalk_sglue+0x38>
 80045c4:	4629      	mov	r1, r5
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c0      	blx	r8
 80045ca:	4306      	orrs	r6, r0
 80045cc:	3568      	adds	r5, #104	@ 0x68
 80045ce:	e7e9      	b.n	80045a4 <_fwalk_sglue+0x10>

080045d0 <iprintf>:
 80045d0:	b40f      	push	{r0, r1, r2, r3}
 80045d2:	b507      	push	{r0, r1, r2, lr}
 80045d4:	4906      	ldr	r1, [pc, #24]	@ (80045f0 <iprintf+0x20>)
 80045d6:	ab04      	add	r3, sp, #16
 80045d8:	6808      	ldr	r0, [r1, #0]
 80045da:	f853 2b04 	ldr.w	r2, [r3], #4
 80045de:	6881      	ldr	r1, [r0, #8]
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	f000 f9e9 	bl	80049b8 <_vfiprintf_r>
 80045e6:	b003      	add	sp, #12
 80045e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045ec:	b004      	add	sp, #16
 80045ee:	4770      	bx	lr
 80045f0:	20000018 	.word	0x20000018

080045f4 <__sread>:
 80045f4:	b510      	push	{r4, lr}
 80045f6:	460c      	mov	r4, r1
 80045f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fc:	f000 f868 	bl	80046d0 <_read_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	bfab      	itete	ge
 8004604:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004606:	89a3      	ldrhlt	r3, [r4, #12]
 8004608:	181b      	addge	r3, r3, r0
 800460a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800460e:	bfac      	ite	ge
 8004610:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004612:	81a3      	strhlt	r3, [r4, #12]
 8004614:	bd10      	pop	{r4, pc}

08004616 <__swrite>:
 8004616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461a:	461f      	mov	r7, r3
 800461c:	898b      	ldrh	r3, [r1, #12]
 800461e:	05db      	lsls	r3, r3, #23
 8004620:	4605      	mov	r5, r0
 8004622:	460c      	mov	r4, r1
 8004624:	4616      	mov	r6, r2
 8004626:	d505      	bpl.n	8004634 <__swrite+0x1e>
 8004628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462c:	2302      	movs	r3, #2
 800462e:	2200      	movs	r2, #0
 8004630:	f000 f83c 	bl	80046ac <_lseek_r>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800463a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	4632      	mov	r2, r6
 8004642:	463b      	mov	r3, r7
 8004644:	4628      	mov	r0, r5
 8004646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800464a:	f000 b853 	b.w	80046f4 <_write_r>

0800464e <__sseek>:
 800464e:	b510      	push	{r4, lr}
 8004650:	460c      	mov	r4, r1
 8004652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004656:	f000 f829 	bl	80046ac <_lseek_r>
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	bf15      	itete	ne
 8004660:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800466a:	81a3      	strheq	r3, [r4, #12]
 800466c:	bf18      	it	ne
 800466e:	81a3      	strhne	r3, [r4, #12]
 8004670:	bd10      	pop	{r4, pc}

08004672 <__sclose>:
 8004672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004676:	f000 b809 	b.w	800468c <_close_r>

0800467a <memset>:
 800467a:	4402      	add	r2, r0
 800467c:	4603      	mov	r3, r0
 800467e:	4293      	cmp	r3, r2
 8004680:	d100      	bne.n	8004684 <memset+0xa>
 8004682:	4770      	bx	lr
 8004684:	f803 1b01 	strb.w	r1, [r3], #1
 8004688:	e7f9      	b.n	800467e <memset+0x4>
	...

0800468c <_close_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4d06      	ldr	r5, [pc, #24]	@ (80046a8 <_close_r+0x1c>)
 8004690:	2300      	movs	r3, #0
 8004692:	4604      	mov	r4, r0
 8004694:	4608      	mov	r0, r1
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	f7fc fca9 	bl	8000fee <_close>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d102      	bne.n	80046a6 <_close_r+0x1a>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	b103      	cbz	r3, 80046a6 <_close_r+0x1a>
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	2000039c 	.word	0x2000039c

080046ac <_lseek_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4d07      	ldr	r5, [pc, #28]	@ (80046cc <_lseek_r+0x20>)
 80046b0:	4604      	mov	r4, r0
 80046b2:	4608      	mov	r0, r1
 80046b4:	4611      	mov	r1, r2
 80046b6:	2200      	movs	r2, #0
 80046b8:	602a      	str	r2, [r5, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f7fc fcbe 	bl	800103c <_lseek>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_lseek_r+0x1e>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_lseek_r+0x1e>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	2000039c 	.word	0x2000039c

080046d0 <_read_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4d07      	ldr	r5, [pc, #28]	@ (80046f0 <_read_r+0x20>)
 80046d4:	4604      	mov	r4, r0
 80046d6:	4608      	mov	r0, r1
 80046d8:	4611      	mov	r1, r2
 80046da:	2200      	movs	r2, #0
 80046dc:	602a      	str	r2, [r5, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	f7fc fc68 	bl	8000fb4 <_read>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d102      	bne.n	80046ee <_read_r+0x1e>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	b103      	cbz	r3, 80046ee <_read_r+0x1e>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	2000039c 	.word	0x2000039c

080046f4 <_write_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4d07      	ldr	r5, [pc, #28]	@ (8004714 <_write_r+0x20>)
 80046f8:	4604      	mov	r4, r0
 80046fa:	4608      	mov	r0, r1
 80046fc:	4611      	mov	r1, r2
 80046fe:	2200      	movs	r2, #0
 8004700:	602a      	str	r2, [r5, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	f7fc f9e0 	bl	8000ac8 <_write>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_write_r+0x1e>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_write_r+0x1e>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	2000039c 	.word	0x2000039c

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	@ (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000018 	.word	0x20000018

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4d0d      	ldr	r5, [pc, #52]	@ (800475c <__libc_init_array+0x38>)
 8004728:	4c0d      	ldr	r4, [pc, #52]	@ (8004760 <__libc_init_array+0x3c>)
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	2600      	movs	r6, #0
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	4d0b      	ldr	r5, [pc, #44]	@ (8004764 <__libc_init_array+0x40>)
 8004736:	4c0c      	ldr	r4, [pc, #48]	@ (8004768 <__libc_init_array+0x44>)
 8004738:	f000 fdb8 	bl	80052ac <_init>
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	2600      	movs	r6, #0
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	08005334 	.word	0x08005334
 8004760:	08005334 	.word	0x08005334
 8004764:	08005334 	.word	0x08005334
 8004768:	08005338 	.word	0x08005338

0800476c <__retarget_lock_init_recursive>:
 800476c:	4770      	bx	lr

0800476e <__retarget_lock_acquire_recursive>:
 800476e:	4770      	bx	lr

08004770 <__retarget_lock_release_recursive>:
 8004770:	4770      	bx	lr
	...

08004774 <_free_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4605      	mov	r5, r0
 8004778:	2900      	cmp	r1, #0
 800477a:	d041      	beq.n	8004800 <_free_r+0x8c>
 800477c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004780:	1f0c      	subs	r4, r1, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfb8      	it	lt
 8004786:	18e4      	addlt	r4, r4, r3
 8004788:	f000 f8e0 	bl	800494c <__malloc_lock>
 800478c:	4a1d      	ldr	r2, [pc, #116]	@ (8004804 <_free_r+0x90>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	b933      	cbnz	r3, 80047a0 <_free_r+0x2c>
 8004792:	6063      	str	r3, [r4, #4]
 8004794:	6014      	str	r4, [r2, #0]
 8004796:	4628      	mov	r0, r5
 8004798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800479c:	f000 b8dc 	b.w	8004958 <__malloc_unlock>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d908      	bls.n	80047b6 <_free_r+0x42>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf01      	itttt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	1809      	addeq	r1, r1, r0
 80047b2:	6021      	streq	r1, [r4, #0]
 80047b4:	e7ed      	b.n	8004792 <_free_r+0x1e>
 80047b6:	461a      	mov	r2, r3
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b10b      	cbz	r3, 80047c0 <_free_r+0x4c>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d9fa      	bls.n	80047b6 <_free_r+0x42>
 80047c0:	6811      	ldr	r1, [r2, #0]
 80047c2:	1850      	adds	r0, r2, r1
 80047c4:	42a0      	cmp	r0, r4
 80047c6:	d10b      	bne.n	80047e0 <_free_r+0x6c>
 80047c8:	6820      	ldr	r0, [r4, #0]
 80047ca:	4401      	add	r1, r0
 80047cc:	1850      	adds	r0, r2, r1
 80047ce:	4283      	cmp	r3, r0
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	d1e0      	bne.n	8004796 <_free_r+0x22>
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	6053      	str	r3, [r2, #4]
 80047da:	4408      	add	r0, r1
 80047dc:	6010      	str	r0, [r2, #0]
 80047de:	e7da      	b.n	8004796 <_free_r+0x22>
 80047e0:	d902      	bls.n	80047e8 <_free_r+0x74>
 80047e2:	230c      	movs	r3, #12
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	e7d6      	b.n	8004796 <_free_r+0x22>
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	1821      	adds	r1, r4, r0
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf04      	itt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	bf04      	itt	eq
 80047f8:	1809      	addeq	r1, r1, r0
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	6054      	str	r4, [r2, #4]
 80047fe:	e7ca      	b.n	8004796 <_free_r+0x22>
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	bf00      	nop
 8004804:	200003a8 	.word	0x200003a8

08004808 <sbrk_aligned>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4e0f      	ldr	r6, [pc, #60]	@ (8004848 <sbrk_aligned+0x40>)
 800480c:	460c      	mov	r4, r1
 800480e:	6831      	ldr	r1, [r6, #0]
 8004810:	4605      	mov	r5, r0
 8004812:	b911      	cbnz	r1, 800481a <sbrk_aligned+0x12>
 8004814:	f000 fcb6 	bl	8005184 <_sbrk_r>
 8004818:	6030      	str	r0, [r6, #0]
 800481a:	4621      	mov	r1, r4
 800481c:	4628      	mov	r0, r5
 800481e:	f000 fcb1 	bl	8005184 <_sbrk_r>
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	d103      	bne.n	800482e <sbrk_aligned+0x26>
 8004826:	f04f 34ff 	mov.w	r4, #4294967295
 800482a:	4620      	mov	r0, r4
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	1cc4      	adds	r4, r0, #3
 8004830:	f024 0403 	bic.w	r4, r4, #3
 8004834:	42a0      	cmp	r0, r4
 8004836:	d0f8      	beq.n	800482a <sbrk_aligned+0x22>
 8004838:	1a21      	subs	r1, r4, r0
 800483a:	4628      	mov	r0, r5
 800483c:	f000 fca2 	bl	8005184 <_sbrk_r>
 8004840:	3001      	adds	r0, #1
 8004842:	d1f2      	bne.n	800482a <sbrk_aligned+0x22>
 8004844:	e7ef      	b.n	8004826 <sbrk_aligned+0x1e>
 8004846:	bf00      	nop
 8004848:	200003a4 	.word	0x200003a4

0800484c <_malloc_r>:
 800484c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004850:	1ccd      	adds	r5, r1, #3
 8004852:	f025 0503 	bic.w	r5, r5, #3
 8004856:	3508      	adds	r5, #8
 8004858:	2d0c      	cmp	r5, #12
 800485a:	bf38      	it	cc
 800485c:	250c      	movcc	r5, #12
 800485e:	2d00      	cmp	r5, #0
 8004860:	4606      	mov	r6, r0
 8004862:	db01      	blt.n	8004868 <_malloc_r+0x1c>
 8004864:	42a9      	cmp	r1, r5
 8004866:	d904      	bls.n	8004872 <_malloc_r+0x26>
 8004868:	230c      	movs	r3, #12
 800486a:	6033      	str	r3, [r6, #0]
 800486c:	2000      	movs	r0, #0
 800486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004872:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004948 <_malloc_r+0xfc>
 8004876:	f000 f869 	bl	800494c <__malloc_lock>
 800487a:	f8d8 3000 	ldr.w	r3, [r8]
 800487e:	461c      	mov	r4, r3
 8004880:	bb44      	cbnz	r4, 80048d4 <_malloc_r+0x88>
 8004882:	4629      	mov	r1, r5
 8004884:	4630      	mov	r0, r6
 8004886:	f7ff ffbf 	bl	8004808 <sbrk_aligned>
 800488a:	1c43      	adds	r3, r0, #1
 800488c:	4604      	mov	r4, r0
 800488e:	d158      	bne.n	8004942 <_malloc_r+0xf6>
 8004890:	f8d8 4000 	ldr.w	r4, [r8]
 8004894:	4627      	mov	r7, r4
 8004896:	2f00      	cmp	r7, #0
 8004898:	d143      	bne.n	8004922 <_malloc_r+0xd6>
 800489a:	2c00      	cmp	r4, #0
 800489c:	d04b      	beq.n	8004936 <_malloc_r+0xea>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	4639      	mov	r1, r7
 80048a2:	4630      	mov	r0, r6
 80048a4:	eb04 0903 	add.w	r9, r4, r3
 80048a8:	f000 fc6c 	bl	8005184 <_sbrk_r>
 80048ac:	4581      	cmp	r9, r0
 80048ae:	d142      	bne.n	8004936 <_malloc_r+0xea>
 80048b0:	6821      	ldr	r1, [r4, #0]
 80048b2:	1a6d      	subs	r5, r5, r1
 80048b4:	4629      	mov	r1, r5
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7ff ffa6 	bl	8004808 <sbrk_aligned>
 80048bc:	3001      	adds	r0, #1
 80048be:	d03a      	beq.n	8004936 <_malloc_r+0xea>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	442b      	add	r3, r5
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	f8d8 3000 	ldr.w	r3, [r8]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	bb62      	cbnz	r2, 8004928 <_malloc_r+0xdc>
 80048ce:	f8c8 7000 	str.w	r7, [r8]
 80048d2:	e00f      	b.n	80048f4 <_malloc_r+0xa8>
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	1b52      	subs	r2, r2, r5
 80048d8:	d420      	bmi.n	800491c <_malloc_r+0xd0>
 80048da:	2a0b      	cmp	r2, #11
 80048dc:	d917      	bls.n	800490e <_malloc_r+0xc2>
 80048de:	1961      	adds	r1, r4, r5
 80048e0:	42a3      	cmp	r3, r4
 80048e2:	6025      	str	r5, [r4, #0]
 80048e4:	bf18      	it	ne
 80048e6:	6059      	strne	r1, [r3, #4]
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	bf08      	it	eq
 80048ec:	f8c8 1000 	streq.w	r1, [r8]
 80048f0:	5162      	str	r2, [r4, r5]
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	4630      	mov	r0, r6
 80048f6:	f000 f82f 	bl	8004958 <__malloc_unlock>
 80048fa:	f104 000b 	add.w	r0, r4, #11
 80048fe:	1d23      	adds	r3, r4, #4
 8004900:	f020 0007 	bic.w	r0, r0, #7
 8004904:	1ac2      	subs	r2, r0, r3
 8004906:	bf1c      	itt	ne
 8004908:	1a1b      	subne	r3, r3, r0
 800490a:	50a3      	strne	r3, [r4, r2]
 800490c:	e7af      	b.n	800486e <_malloc_r+0x22>
 800490e:	6862      	ldr	r2, [r4, #4]
 8004910:	42a3      	cmp	r3, r4
 8004912:	bf0c      	ite	eq
 8004914:	f8c8 2000 	streq.w	r2, [r8]
 8004918:	605a      	strne	r2, [r3, #4]
 800491a:	e7eb      	b.n	80048f4 <_malloc_r+0xa8>
 800491c:	4623      	mov	r3, r4
 800491e:	6864      	ldr	r4, [r4, #4]
 8004920:	e7ae      	b.n	8004880 <_malloc_r+0x34>
 8004922:	463c      	mov	r4, r7
 8004924:	687f      	ldr	r7, [r7, #4]
 8004926:	e7b6      	b.n	8004896 <_malloc_r+0x4a>
 8004928:	461a      	mov	r2, r3
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	42a3      	cmp	r3, r4
 800492e:	d1fb      	bne.n	8004928 <_malloc_r+0xdc>
 8004930:	2300      	movs	r3, #0
 8004932:	6053      	str	r3, [r2, #4]
 8004934:	e7de      	b.n	80048f4 <_malloc_r+0xa8>
 8004936:	230c      	movs	r3, #12
 8004938:	6033      	str	r3, [r6, #0]
 800493a:	4630      	mov	r0, r6
 800493c:	f000 f80c 	bl	8004958 <__malloc_unlock>
 8004940:	e794      	b.n	800486c <_malloc_r+0x20>
 8004942:	6005      	str	r5, [r0, #0]
 8004944:	e7d6      	b.n	80048f4 <_malloc_r+0xa8>
 8004946:	bf00      	nop
 8004948:	200003a8 	.word	0x200003a8

0800494c <__malloc_lock>:
 800494c:	4801      	ldr	r0, [pc, #4]	@ (8004954 <__malloc_lock+0x8>)
 800494e:	f7ff bf0e 	b.w	800476e <__retarget_lock_acquire_recursive>
 8004952:	bf00      	nop
 8004954:	200003a0 	.word	0x200003a0

08004958 <__malloc_unlock>:
 8004958:	4801      	ldr	r0, [pc, #4]	@ (8004960 <__malloc_unlock+0x8>)
 800495a:	f7ff bf09 	b.w	8004770 <__retarget_lock_release_recursive>
 800495e:	bf00      	nop
 8004960:	200003a0 	.word	0x200003a0

08004964 <__sfputc_r>:
 8004964:	6893      	ldr	r3, [r2, #8]
 8004966:	3b01      	subs	r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	b410      	push	{r4}
 800496c:	6093      	str	r3, [r2, #8]
 800496e:	da08      	bge.n	8004982 <__sfputc_r+0x1e>
 8004970:	6994      	ldr	r4, [r2, #24]
 8004972:	42a3      	cmp	r3, r4
 8004974:	db01      	blt.n	800497a <__sfputc_r+0x16>
 8004976:	290a      	cmp	r1, #10
 8004978:	d103      	bne.n	8004982 <__sfputc_r+0x1e>
 800497a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800497e:	f000 bb6d 	b.w	800505c <__swbuf_r>
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	1c58      	adds	r0, r3, #1
 8004986:	6010      	str	r0, [r2, #0]
 8004988:	7019      	strb	r1, [r3, #0]
 800498a:	4608      	mov	r0, r1
 800498c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004990:	4770      	bx	lr

08004992 <__sfputs_r>:
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	4614      	mov	r4, r2
 800499a:	18d5      	adds	r5, r2, r3
 800499c:	42ac      	cmp	r4, r5
 800499e:	d101      	bne.n	80049a4 <__sfputs_r+0x12>
 80049a0:	2000      	movs	r0, #0
 80049a2:	e007      	b.n	80049b4 <__sfputs_r+0x22>
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	463a      	mov	r2, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ffda 	bl	8004964 <__sfputc_r>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d1f3      	bne.n	800499c <__sfputs_r+0xa>
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049b8 <_vfiprintf_r>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	460d      	mov	r5, r1
 80049be:	b09d      	sub	sp, #116	@ 0x74
 80049c0:	4614      	mov	r4, r2
 80049c2:	4698      	mov	r8, r3
 80049c4:	4606      	mov	r6, r0
 80049c6:	b118      	cbz	r0, 80049d0 <_vfiprintf_r+0x18>
 80049c8:	6a03      	ldr	r3, [r0, #32]
 80049ca:	b90b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x18>
 80049cc:	f7ff fdca 	bl	8004564 <__sinit>
 80049d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049d2:	07d9      	lsls	r1, r3, #31
 80049d4:	d405      	bmi.n	80049e2 <_vfiprintf_r+0x2a>
 80049d6:	89ab      	ldrh	r3, [r5, #12]
 80049d8:	059a      	lsls	r2, r3, #22
 80049da:	d402      	bmi.n	80049e2 <_vfiprintf_r+0x2a>
 80049dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049de:	f7ff fec6 	bl	800476e <__retarget_lock_acquire_recursive>
 80049e2:	89ab      	ldrh	r3, [r5, #12]
 80049e4:	071b      	lsls	r3, r3, #28
 80049e6:	d501      	bpl.n	80049ec <_vfiprintf_r+0x34>
 80049e8:	692b      	ldr	r3, [r5, #16]
 80049ea:	b99b      	cbnz	r3, 8004a14 <_vfiprintf_r+0x5c>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4630      	mov	r0, r6
 80049f0:	f000 fb72 	bl	80050d8 <__swsetup_r>
 80049f4:	b170      	cbz	r0, 8004a14 <_vfiprintf_r+0x5c>
 80049f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049f8:	07dc      	lsls	r4, r3, #31
 80049fa:	d504      	bpl.n	8004a06 <_vfiprintf_r+0x4e>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	b01d      	add	sp, #116	@ 0x74
 8004a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a06:	89ab      	ldrh	r3, [r5, #12]
 8004a08:	0598      	lsls	r0, r3, #22
 8004a0a:	d4f7      	bmi.n	80049fc <_vfiprintf_r+0x44>
 8004a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a0e:	f7ff feaf 	bl	8004770 <__retarget_lock_release_recursive>
 8004a12:	e7f3      	b.n	80049fc <_vfiprintf_r+0x44>
 8004a14:	2300      	movs	r3, #0
 8004a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a18:	2320      	movs	r3, #32
 8004a1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a22:	2330      	movs	r3, #48	@ 0x30
 8004a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004bd4 <_vfiprintf_r+0x21c>
 8004a28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a2c:	f04f 0901 	mov.w	r9, #1
 8004a30:	4623      	mov	r3, r4
 8004a32:	469a      	mov	sl, r3
 8004a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a38:	b10a      	cbz	r2, 8004a3e <_vfiprintf_r+0x86>
 8004a3a:	2a25      	cmp	r2, #37	@ 0x25
 8004a3c:	d1f9      	bne.n	8004a32 <_vfiprintf_r+0x7a>
 8004a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8004a42:	d00b      	beq.n	8004a5c <_vfiprintf_r+0xa4>
 8004a44:	465b      	mov	r3, fp
 8004a46:	4622      	mov	r2, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff ffa1 	bl	8004992 <__sfputs_r>
 8004a50:	3001      	adds	r0, #1
 8004a52:	f000 80a7 	beq.w	8004ba4 <_vfiprintf_r+0x1ec>
 8004a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a58:	445a      	add	r2, fp
 8004a5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 809f 	beq.w	8004ba4 <_vfiprintf_r+0x1ec>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a70:	f10a 0a01 	add.w	sl, sl, #1
 8004a74:	9304      	str	r3, [sp, #16]
 8004a76:	9307      	str	r3, [sp, #28]
 8004a78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a7e:	4654      	mov	r4, sl
 8004a80:	2205      	movs	r2, #5
 8004a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a86:	4853      	ldr	r0, [pc, #332]	@ (8004bd4 <_vfiprintf_r+0x21c>)
 8004a88:	f7fb fbc2 	bl	8000210 <memchr>
 8004a8c:	9a04      	ldr	r2, [sp, #16]
 8004a8e:	b9d8      	cbnz	r0, 8004ac8 <_vfiprintf_r+0x110>
 8004a90:	06d1      	lsls	r1, r2, #27
 8004a92:	bf44      	itt	mi
 8004a94:	2320      	movmi	r3, #32
 8004a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a9a:	0713      	lsls	r3, r2, #28
 8004a9c:	bf44      	itt	mi
 8004a9e:	232b      	movmi	r3, #43	@ 0x2b
 8004aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aaa:	d015      	beq.n	8004ad8 <_vfiprintf_r+0x120>
 8004aac:	9a07      	ldr	r2, [sp, #28]
 8004aae:	4654      	mov	r4, sl
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f04f 0c0a 	mov.w	ip, #10
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004abc:	3b30      	subs	r3, #48	@ 0x30
 8004abe:	2b09      	cmp	r3, #9
 8004ac0:	d94b      	bls.n	8004b5a <_vfiprintf_r+0x1a2>
 8004ac2:	b1b0      	cbz	r0, 8004af2 <_vfiprintf_r+0x13a>
 8004ac4:	9207      	str	r2, [sp, #28]
 8004ac6:	e014      	b.n	8004af2 <_vfiprintf_r+0x13a>
 8004ac8:	eba0 0308 	sub.w	r3, r0, r8
 8004acc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	9304      	str	r3, [sp, #16]
 8004ad4:	46a2      	mov	sl, r4
 8004ad6:	e7d2      	b.n	8004a7e <_vfiprintf_r+0xc6>
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	1d19      	adds	r1, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	9103      	str	r1, [sp, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bfbb      	ittet	lt
 8004ae4:	425b      	neglt	r3, r3
 8004ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8004aea:	9307      	strge	r3, [sp, #28]
 8004aec:	9307      	strlt	r3, [sp, #28]
 8004aee:	bfb8      	it	lt
 8004af0:	9204      	strlt	r2, [sp, #16]
 8004af2:	7823      	ldrb	r3, [r4, #0]
 8004af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004af6:	d10a      	bne.n	8004b0e <_vfiprintf_r+0x156>
 8004af8:	7863      	ldrb	r3, [r4, #1]
 8004afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004afc:	d132      	bne.n	8004b64 <_vfiprintf_r+0x1ac>
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	9203      	str	r2, [sp, #12]
 8004b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b0a:	3402      	adds	r4, #2
 8004b0c:	9305      	str	r3, [sp, #20]
 8004b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004be4 <_vfiprintf_r+0x22c>
 8004b12:	7821      	ldrb	r1, [r4, #0]
 8004b14:	2203      	movs	r2, #3
 8004b16:	4650      	mov	r0, sl
 8004b18:	f7fb fb7a 	bl	8000210 <memchr>
 8004b1c:	b138      	cbz	r0, 8004b2e <_vfiprintf_r+0x176>
 8004b1e:	9b04      	ldr	r3, [sp, #16]
 8004b20:	eba0 000a 	sub.w	r0, r0, sl
 8004b24:	2240      	movs	r2, #64	@ 0x40
 8004b26:	4082      	lsls	r2, r0
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	3401      	adds	r4, #1
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b32:	4829      	ldr	r0, [pc, #164]	@ (8004bd8 <_vfiprintf_r+0x220>)
 8004b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b38:	2206      	movs	r2, #6
 8004b3a:	f7fb fb69 	bl	8000210 <memchr>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d03f      	beq.n	8004bc2 <_vfiprintf_r+0x20a>
 8004b42:	4b26      	ldr	r3, [pc, #152]	@ (8004bdc <_vfiprintf_r+0x224>)
 8004b44:	bb1b      	cbnz	r3, 8004b8e <_vfiprintf_r+0x1d6>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	3307      	adds	r3, #7
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	3308      	adds	r3, #8
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b54:	443b      	add	r3, r7
 8004b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b58:	e76a      	b.n	8004a30 <_vfiprintf_r+0x78>
 8004b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5e:	460c      	mov	r4, r1
 8004b60:	2001      	movs	r0, #1
 8004b62:	e7a8      	b.n	8004ab6 <_vfiprintf_r+0xfe>
 8004b64:	2300      	movs	r3, #0
 8004b66:	3401      	adds	r4, #1
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f04f 0c0a 	mov.w	ip, #10
 8004b70:	4620      	mov	r0, r4
 8004b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b76:	3a30      	subs	r2, #48	@ 0x30
 8004b78:	2a09      	cmp	r2, #9
 8004b7a:	d903      	bls.n	8004b84 <_vfiprintf_r+0x1cc>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0c6      	beq.n	8004b0e <_vfiprintf_r+0x156>
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	e7c4      	b.n	8004b0e <_vfiprintf_r+0x156>
 8004b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b88:	4604      	mov	r4, r0
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e7f0      	b.n	8004b70 <_vfiprintf_r+0x1b8>
 8004b8e:	ab03      	add	r3, sp, #12
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	462a      	mov	r2, r5
 8004b94:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <_vfiprintf_r+0x228>)
 8004b96:	a904      	add	r1, sp, #16
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f3af 8000 	nop.w
 8004b9e:	4607      	mov	r7, r0
 8004ba0:	1c78      	adds	r0, r7, #1
 8004ba2:	d1d6      	bne.n	8004b52 <_vfiprintf_r+0x19a>
 8004ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ba6:	07d9      	lsls	r1, r3, #31
 8004ba8:	d405      	bmi.n	8004bb6 <_vfiprintf_r+0x1fe>
 8004baa:	89ab      	ldrh	r3, [r5, #12]
 8004bac:	059a      	lsls	r2, r3, #22
 8004bae:	d402      	bmi.n	8004bb6 <_vfiprintf_r+0x1fe>
 8004bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bb2:	f7ff fddd 	bl	8004770 <__retarget_lock_release_recursive>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	065b      	lsls	r3, r3, #25
 8004bba:	f53f af1f 	bmi.w	80049fc <_vfiprintf_r+0x44>
 8004bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bc0:	e71e      	b.n	8004a00 <_vfiprintf_r+0x48>
 8004bc2:	ab03      	add	r3, sp, #12
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	462a      	mov	r2, r5
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <_vfiprintf_r+0x228>)
 8004bca:	a904      	add	r1, sp, #16
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f000 f879 	bl	8004cc4 <_printf_i>
 8004bd2:	e7e4      	b.n	8004b9e <_vfiprintf_r+0x1e6>
 8004bd4:	080052f8 	.word	0x080052f8
 8004bd8:	08005302 	.word	0x08005302
 8004bdc:	00000000 	.word	0x00000000
 8004be0:	08004993 	.word	0x08004993
 8004be4:	080052fe 	.word	0x080052fe

08004be8 <_printf_common>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	4616      	mov	r6, r2
 8004bee:	4698      	mov	r8, r3
 8004bf0:	688a      	ldr	r2, [r1, #8]
 8004bf2:	690b      	ldr	r3, [r1, #16]
 8004bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bfb8      	it	lt
 8004bfc:	4613      	movlt	r3, r2
 8004bfe:	6033      	str	r3, [r6, #0]
 8004c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c04:	4607      	mov	r7, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	b10a      	cbz	r2, 8004c0e <_printf_common+0x26>
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6033      	str	r3, [r6, #0]
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	0699      	lsls	r1, r3, #26
 8004c12:	bf42      	ittt	mi
 8004c14:	6833      	ldrmi	r3, [r6, #0]
 8004c16:	3302      	addmi	r3, #2
 8004c18:	6033      	strmi	r3, [r6, #0]
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	f015 0506 	ands.w	r5, r5, #6
 8004c20:	d106      	bne.n	8004c30 <_printf_common+0x48>
 8004c22:	f104 0a19 	add.w	sl, r4, #25
 8004c26:	68e3      	ldr	r3, [r4, #12]
 8004c28:	6832      	ldr	r2, [r6, #0]
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	42ab      	cmp	r3, r5
 8004c2e:	dc26      	bgt.n	8004c7e <_printf_common+0x96>
 8004c30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	3b00      	subs	r3, #0
 8004c38:	bf18      	it	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	0692      	lsls	r2, r2, #26
 8004c3e:	d42b      	bmi.n	8004c98 <_printf_common+0xb0>
 8004c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c44:	4641      	mov	r1, r8
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c8      	blx	r9
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d01e      	beq.n	8004c8c <_printf_common+0xa4>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	6922      	ldr	r2, [r4, #16]
 8004c52:	f003 0306 	and.w	r3, r3, #6
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	bf02      	ittt	eq
 8004c5a:	68e5      	ldreq	r5, [r4, #12]
 8004c5c:	6833      	ldreq	r3, [r6, #0]
 8004c5e:	1aed      	subeq	r5, r5, r3
 8004c60:	68a3      	ldr	r3, [r4, #8]
 8004c62:	bf0c      	ite	eq
 8004c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c68:	2500      	movne	r5, #0
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	bfc4      	itt	gt
 8004c6e:	1a9b      	subgt	r3, r3, r2
 8004c70:	18ed      	addgt	r5, r5, r3
 8004c72:	2600      	movs	r6, #0
 8004c74:	341a      	adds	r4, #26
 8004c76:	42b5      	cmp	r5, r6
 8004c78:	d11a      	bne.n	8004cb0 <_printf_common+0xc8>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e008      	b.n	8004c90 <_printf_common+0xa8>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4652      	mov	r2, sl
 8004c82:	4641      	mov	r1, r8
 8004c84:	4638      	mov	r0, r7
 8004c86:	47c8      	blx	r9
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d103      	bne.n	8004c94 <_printf_common+0xac>
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c94:	3501      	adds	r5, #1
 8004c96:	e7c6      	b.n	8004c26 <_printf_common+0x3e>
 8004c98:	18e1      	adds	r1, r4, r3
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	2030      	movs	r0, #48	@ 0x30
 8004c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ca2:	4422      	add	r2, r4
 8004ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cac:	3302      	adds	r3, #2
 8004cae:	e7c7      	b.n	8004c40 <_printf_common+0x58>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	47c8      	blx	r9
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d0e6      	beq.n	8004c8c <_printf_common+0xa4>
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	e7d9      	b.n	8004c76 <_printf_common+0x8e>
	...

08004cc4 <_printf_i>:
 8004cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc8:	7e0f      	ldrb	r7, [r1, #24]
 8004cca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ccc:	2f78      	cmp	r7, #120	@ 0x78
 8004cce:	4691      	mov	r9, r2
 8004cd0:	4680      	mov	r8, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	469a      	mov	sl, r3
 8004cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cda:	d807      	bhi.n	8004cec <_printf_i+0x28>
 8004cdc:	2f62      	cmp	r7, #98	@ 0x62
 8004cde:	d80a      	bhi.n	8004cf6 <_printf_i+0x32>
 8004ce0:	2f00      	cmp	r7, #0
 8004ce2:	f000 80d2 	beq.w	8004e8a <_printf_i+0x1c6>
 8004ce6:	2f58      	cmp	r7, #88	@ 0x58
 8004ce8:	f000 80b9 	beq.w	8004e5e <_printf_i+0x19a>
 8004cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cf4:	e03a      	b.n	8004d6c <_printf_i+0xa8>
 8004cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cfa:	2b15      	cmp	r3, #21
 8004cfc:	d8f6      	bhi.n	8004cec <_printf_i+0x28>
 8004cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8004d04 <_printf_i+0x40>)
 8004d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d04:	08004d5d 	.word	0x08004d5d
 8004d08:	08004d71 	.word	0x08004d71
 8004d0c:	08004ced 	.word	0x08004ced
 8004d10:	08004ced 	.word	0x08004ced
 8004d14:	08004ced 	.word	0x08004ced
 8004d18:	08004ced 	.word	0x08004ced
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004ced 	.word	0x08004ced
 8004d24:	08004ced 	.word	0x08004ced
 8004d28:	08004ced 	.word	0x08004ced
 8004d2c:	08004ced 	.word	0x08004ced
 8004d30:	08004e71 	.word	0x08004e71
 8004d34:	08004d9b 	.word	0x08004d9b
 8004d38:	08004e2b 	.word	0x08004e2b
 8004d3c:	08004ced 	.word	0x08004ced
 8004d40:	08004ced 	.word	0x08004ced
 8004d44:	08004e93 	.word	0x08004e93
 8004d48:	08004ced 	.word	0x08004ced
 8004d4c:	08004d9b 	.word	0x08004d9b
 8004d50:	08004ced 	.word	0x08004ced
 8004d54:	08004ced 	.word	0x08004ced
 8004d58:	08004e33 	.word	0x08004e33
 8004d5c:	6833      	ldr	r3, [r6, #0]
 8004d5e:	1d1a      	adds	r2, r3, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6032      	str	r2, [r6, #0]
 8004d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e09d      	b.n	8004eac <_printf_i+0x1e8>
 8004d70:	6833      	ldr	r3, [r6, #0]
 8004d72:	6820      	ldr	r0, [r4, #0]
 8004d74:	1d19      	adds	r1, r3, #4
 8004d76:	6031      	str	r1, [r6, #0]
 8004d78:	0606      	lsls	r6, r0, #24
 8004d7a:	d501      	bpl.n	8004d80 <_printf_i+0xbc>
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	e003      	b.n	8004d88 <_printf_i+0xc4>
 8004d80:	0645      	lsls	r5, r0, #25
 8004d82:	d5fb      	bpl.n	8004d7c <_printf_i+0xb8>
 8004d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d88:	2d00      	cmp	r5, #0
 8004d8a:	da03      	bge.n	8004d94 <_printf_i+0xd0>
 8004d8c:	232d      	movs	r3, #45	@ 0x2d
 8004d8e:	426d      	negs	r5, r5
 8004d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d94:	4859      	ldr	r0, [pc, #356]	@ (8004efc <_printf_i+0x238>)
 8004d96:	230a      	movs	r3, #10
 8004d98:	e011      	b.n	8004dbe <_printf_i+0xfa>
 8004d9a:	6821      	ldr	r1, [r4, #0]
 8004d9c:	6833      	ldr	r3, [r6, #0]
 8004d9e:	0608      	lsls	r0, r1, #24
 8004da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004da4:	d402      	bmi.n	8004dac <_printf_i+0xe8>
 8004da6:	0649      	lsls	r1, r1, #25
 8004da8:	bf48      	it	mi
 8004daa:	b2ad      	uxthmi	r5, r5
 8004dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dae:	4853      	ldr	r0, [pc, #332]	@ (8004efc <_printf_i+0x238>)
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	bf14      	ite	ne
 8004db4:	230a      	movne	r3, #10
 8004db6:	2308      	moveq	r3, #8
 8004db8:	2100      	movs	r1, #0
 8004dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dbe:	6866      	ldr	r6, [r4, #4]
 8004dc0:	60a6      	str	r6, [r4, #8]
 8004dc2:	2e00      	cmp	r6, #0
 8004dc4:	bfa2      	ittt	ge
 8004dc6:	6821      	ldrge	r1, [r4, #0]
 8004dc8:	f021 0104 	bicge.w	r1, r1, #4
 8004dcc:	6021      	strge	r1, [r4, #0]
 8004dce:	b90d      	cbnz	r5, 8004dd4 <_printf_i+0x110>
 8004dd0:	2e00      	cmp	r6, #0
 8004dd2:	d04b      	beq.n	8004e6c <_printf_i+0x1a8>
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dda:	fb03 5711 	mls	r7, r3, r1, r5
 8004dde:	5dc7      	ldrb	r7, [r0, r7]
 8004de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004de4:	462f      	mov	r7, r5
 8004de6:	42bb      	cmp	r3, r7
 8004de8:	460d      	mov	r5, r1
 8004dea:	d9f4      	bls.n	8004dd6 <_printf_i+0x112>
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d10b      	bne.n	8004e08 <_printf_i+0x144>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	07df      	lsls	r7, r3, #31
 8004df4:	d508      	bpl.n	8004e08 <_printf_i+0x144>
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	6861      	ldr	r1, [r4, #4]
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	bfde      	ittt	le
 8004dfe:	2330      	movle	r3, #48	@ 0x30
 8004e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e08:	1b92      	subs	r2, r2, r6
 8004e0a:	6122      	str	r2, [r4, #16]
 8004e0c:	f8cd a000 	str.w	sl, [sp]
 8004e10:	464b      	mov	r3, r9
 8004e12:	aa03      	add	r2, sp, #12
 8004e14:	4621      	mov	r1, r4
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7ff fee6 	bl	8004be8 <_printf_common>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d14a      	bne.n	8004eb6 <_printf_i+0x1f2>
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295
 8004e24:	b004      	add	sp, #16
 8004e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	f043 0320 	orr.w	r3, r3, #32
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	4833      	ldr	r0, [pc, #204]	@ (8004f00 <_printf_i+0x23c>)
 8004e34:	2778      	movs	r7, #120	@ 0x78
 8004e36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6831      	ldr	r1, [r6, #0]
 8004e3e:	061f      	lsls	r7, r3, #24
 8004e40:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e44:	d402      	bmi.n	8004e4c <_printf_i+0x188>
 8004e46:	065f      	lsls	r7, r3, #25
 8004e48:	bf48      	it	mi
 8004e4a:	b2ad      	uxthmi	r5, r5
 8004e4c:	6031      	str	r1, [r6, #0]
 8004e4e:	07d9      	lsls	r1, r3, #31
 8004e50:	bf44      	itt	mi
 8004e52:	f043 0320 	orrmi.w	r3, r3, #32
 8004e56:	6023      	strmi	r3, [r4, #0]
 8004e58:	b11d      	cbz	r5, 8004e62 <_printf_i+0x19e>
 8004e5a:	2310      	movs	r3, #16
 8004e5c:	e7ac      	b.n	8004db8 <_printf_i+0xf4>
 8004e5e:	4827      	ldr	r0, [pc, #156]	@ (8004efc <_printf_i+0x238>)
 8004e60:	e7e9      	b.n	8004e36 <_printf_i+0x172>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	f023 0320 	bic.w	r3, r3, #32
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	e7f6      	b.n	8004e5a <_printf_i+0x196>
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	e7bd      	b.n	8004dec <_printf_i+0x128>
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	6961      	ldr	r1, [r4, #20]
 8004e76:	1d18      	adds	r0, r3, #4
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	062e      	lsls	r6, r5, #24
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	d501      	bpl.n	8004e84 <_printf_i+0x1c0>
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	e002      	b.n	8004e8a <_printf_i+0x1c6>
 8004e84:	0668      	lsls	r0, r5, #25
 8004e86:	d5fb      	bpl.n	8004e80 <_printf_i+0x1bc>
 8004e88:	8019      	strh	r1, [r3, #0]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	4616      	mov	r6, r2
 8004e90:	e7bc      	b.n	8004e0c <_printf_i+0x148>
 8004e92:	6833      	ldr	r3, [r6, #0]
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	6032      	str	r2, [r6, #0]
 8004e98:	681e      	ldr	r6, [r3, #0]
 8004e9a:	6862      	ldr	r2, [r4, #4]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f7fb f9b6 	bl	8000210 <memchr>
 8004ea4:	b108      	cbz	r0, 8004eaa <_printf_i+0x1e6>
 8004ea6:	1b80      	subs	r0, r0, r6
 8004ea8:	6060      	str	r0, [r4, #4]
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eb4:	e7aa      	b.n	8004e0c <_printf_i+0x148>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4649      	mov	r1, r9
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	47d0      	blx	sl
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d0ad      	beq.n	8004e20 <_printf_i+0x15c>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	079b      	lsls	r3, r3, #30
 8004ec8:	d413      	bmi.n	8004ef2 <_printf_i+0x22e>
 8004eca:	68e0      	ldr	r0, [r4, #12]
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	4298      	cmp	r0, r3
 8004ed0:	bfb8      	it	lt
 8004ed2:	4618      	movlt	r0, r3
 8004ed4:	e7a6      	b.n	8004e24 <_printf_i+0x160>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4632      	mov	r2, r6
 8004eda:	4649      	mov	r1, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	47d0      	blx	sl
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d09d      	beq.n	8004e20 <_printf_i+0x15c>
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	68e3      	ldr	r3, [r4, #12]
 8004ee8:	9903      	ldr	r1, [sp, #12]
 8004eea:	1a5b      	subs	r3, r3, r1
 8004eec:	42ab      	cmp	r3, r5
 8004eee:	dcf2      	bgt.n	8004ed6 <_printf_i+0x212>
 8004ef0:	e7eb      	b.n	8004eca <_printf_i+0x206>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	f104 0619 	add.w	r6, r4, #25
 8004ef8:	e7f5      	b.n	8004ee6 <_printf_i+0x222>
 8004efa:	bf00      	nop
 8004efc:	08005309 	.word	0x08005309
 8004f00:	0800531a 	.word	0x0800531a

08004f04 <__sflush_r>:
 8004f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0c:	0716      	lsls	r6, r2, #28
 8004f0e:	4605      	mov	r5, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	d454      	bmi.n	8004fbe <__sflush_r+0xba>
 8004f14:	684b      	ldr	r3, [r1, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dc02      	bgt.n	8004f20 <__sflush_r+0x1c>
 8004f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	dd48      	ble.n	8004fb2 <__sflush_r+0xae>
 8004f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d045      	beq.n	8004fb2 <__sflush_r+0xae>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f2c:	682f      	ldr	r7, [r5, #0]
 8004f2e:	6a21      	ldr	r1, [r4, #32]
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	d030      	beq.n	8004f96 <__sflush_r+0x92>
 8004f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	0759      	lsls	r1, r3, #29
 8004f3a:	d505      	bpl.n	8004f48 <__sflush_r+0x44>
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f42:	b10b      	cbz	r3, 8004f48 <__sflush_r+0x44>
 8004f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f4c:	6a21      	ldr	r1, [r4, #32]
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b0      	blx	r6
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	d106      	bne.n	8004f66 <__sflush_r+0x62>
 8004f58:	6829      	ldr	r1, [r5, #0]
 8004f5a:	291d      	cmp	r1, #29
 8004f5c:	d82b      	bhi.n	8004fb6 <__sflush_r+0xb2>
 8004f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005008 <__sflush_r+0x104>)
 8004f60:	410a      	asrs	r2, r1
 8004f62:	07d6      	lsls	r6, r2, #31
 8004f64:	d427      	bmi.n	8004fb6 <__sflush_r+0xb2>
 8004f66:	2200      	movs	r2, #0
 8004f68:	6062      	str	r2, [r4, #4]
 8004f6a:	04d9      	lsls	r1, r3, #19
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	6022      	str	r2, [r4, #0]
 8004f70:	d504      	bpl.n	8004f7c <__sflush_r+0x78>
 8004f72:	1c42      	adds	r2, r0, #1
 8004f74:	d101      	bne.n	8004f7a <__sflush_r+0x76>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	b903      	cbnz	r3, 8004f7c <__sflush_r+0x78>
 8004f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f7e:	602f      	str	r7, [r5, #0]
 8004f80:	b1b9      	cbz	r1, 8004fb2 <__sflush_r+0xae>
 8004f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f86:	4299      	cmp	r1, r3
 8004f88:	d002      	beq.n	8004f90 <__sflush_r+0x8c>
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f7ff fbf2 	bl	8004774 <_free_r>
 8004f90:	2300      	movs	r3, #0
 8004f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f94:	e00d      	b.n	8004fb2 <__sflush_r+0xae>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	1c50      	adds	r0, r2, #1
 8004fa0:	d1c9      	bne.n	8004f36 <__sflush_r+0x32>
 8004fa2:	682b      	ldr	r3, [r5, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c6      	beq.n	8004f36 <__sflush_r+0x32>
 8004fa8:	2b1d      	cmp	r3, #29
 8004faa:	d001      	beq.n	8004fb0 <__sflush_r+0xac>
 8004fac:	2b16      	cmp	r3, #22
 8004fae:	d11e      	bne.n	8004fee <__sflush_r+0xea>
 8004fb0:	602f      	str	r7, [r5, #0]
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	e022      	b.n	8004ffc <__sflush_r+0xf8>
 8004fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fba:	b21b      	sxth	r3, r3
 8004fbc:	e01b      	b.n	8004ff6 <__sflush_r+0xf2>
 8004fbe:	690f      	ldr	r7, [r1, #16]
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	d0f6      	beq.n	8004fb2 <__sflush_r+0xae>
 8004fc4:	0793      	lsls	r3, r2, #30
 8004fc6:	680e      	ldr	r6, [r1, #0]
 8004fc8:	bf08      	it	eq
 8004fca:	694b      	ldreq	r3, [r1, #20]
 8004fcc:	600f      	str	r7, [r1, #0]
 8004fce:	bf18      	it	ne
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	eba6 0807 	sub.w	r8, r6, r7
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	f1b8 0f00 	cmp.w	r8, #0
 8004fdc:	dde9      	ble.n	8004fb2 <__sflush_r+0xae>
 8004fde:	6a21      	ldr	r1, [r4, #32]
 8004fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004fe2:	4643      	mov	r3, r8
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b0      	blx	r6
 8004fea:	2800      	cmp	r0, #0
 8004fec:	dc08      	bgt.n	8005000 <__sflush_r+0xfc>
 8004fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005000:	4407      	add	r7, r0
 8005002:	eba8 0800 	sub.w	r8, r8, r0
 8005006:	e7e7      	b.n	8004fd8 <__sflush_r+0xd4>
 8005008:	dfbffffe 	.word	0xdfbffffe

0800500c <_fflush_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	4605      	mov	r5, r0
 8005012:	460c      	mov	r4, r1
 8005014:	b913      	cbnz	r3, 800501c <_fflush_r+0x10>
 8005016:	2500      	movs	r5, #0
 8005018:	4628      	mov	r0, r5
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	b118      	cbz	r0, 8005026 <_fflush_r+0x1a>
 800501e:	6a03      	ldr	r3, [r0, #32]
 8005020:	b90b      	cbnz	r3, 8005026 <_fflush_r+0x1a>
 8005022:	f7ff fa9f 	bl	8004564 <__sinit>
 8005026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f3      	beq.n	8005016 <_fflush_r+0xa>
 800502e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005030:	07d0      	lsls	r0, r2, #31
 8005032:	d404      	bmi.n	800503e <_fflush_r+0x32>
 8005034:	0599      	lsls	r1, r3, #22
 8005036:	d402      	bmi.n	800503e <_fflush_r+0x32>
 8005038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800503a:	f7ff fb98 	bl	800476e <__retarget_lock_acquire_recursive>
 800503e:	4628      	mov	r0, r5
 8005040:	4621      	mov	r1, r4
 8005042:	f7ff ff5f 	bl	8004f04 <__sflush_r>
 8005046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005048:	07da      	lsls	r2, r3, #31
 800504a:	4605      	mov	r5, r0
 800504c:	d4e4      	bmi.n	8005018 <_fflush_r+0xc>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	059b      	lsls	r3, r3, #22
 8005052:	d4e1      	bmi.n	8005018 <_fflush_r+0xc>
 8005054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005056:	f7ff fb8b 	bl	8004770 <__retarget_lock_release_recursive>
 800505a:	e7dd      	b.n	8005018 <_fflush_r+0xc>

0800505c <__swbuf_r>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	460e      	mov	r6, r1
 8005060:	4614      	mov	r4, r2
 8005062:	4605      	mov	r5, r0
 8005064:	b118      	cbz	r0, 800506e <__swbuf_r+0x12>
 8005066:	6a03      	ldr	r3, [r0, #32]
 8005068:	b90b      	cbnz	r3, 800506e <__swbuf_r+0x12>
 800506a:	f7ff fa7b 	bl	8004564 <__sinit>
 800506e:	69a3      	ldr	r3, [r4, #24]
 8005070:	60a3      	str	r3, [r4, #8]
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	071a      	lsls	r2, r3, #28
 8005076:	d501      	bpl.n	800507c <__swbuf_r+0x20>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	b943      	cbnz	r3, 800508e <__swbuf_r+0x32>
 800507c:	4621      	mov	r1, r4
 800507e:	4628      	mov	r0, r5
 8005080:	f000 f82a 	bl	80050d8 <__swsetup_r>
 8005084:	b118      	cbz	r0, 800508e <__swbuf_r+0x32>
 8005086:	f04f 37ff 	mov.w	r7, #4294967295
 800508a:	4638      	mov	r0, r7
 800508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	6922      	ldr	r2, [r4, #16]
 8005092:	1a98      	subs	r0, r3, r2
 8005094:	6963      	ldr	r3, [r4, #20]
 8005096:	b2f6      	uxtb	r6, r6
 8005098:	4283      	cmp	r3, r0
 800509a:	4637      	mov	r7, r6
 800509c:	dc05      	bgt.n	80050aa <__swbuf_r+0x4e>
 800509e:	4621      	mov	r1, r4
 80050a0:	4628      	mov	r0, r5
 80050a2:	f7ff ffb3 	bl	800500c <_fflush_r>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1ed      	bne.n	8005086 <__swbuf_r+0x2a>
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	60a3      	str	r3, [r4, #8]
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	6022      	str	r2, [r4, #0]
 80050b6:	701e      	strb	r6, [r3, #0]
 80050b8:	6962      	ldr	r2, [r4, #20]
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	429a      	cmp	r2, r3
 80050be:	d004      	beq.n	80050ca <__swbuf_r+0x6e>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	07db      	lsls	r3, r3, #31
 80050c4:	d5e1      	bpl.n	800508a <__swbuf_r+0x2e>
 80050c6:	2e0a      	cmp	r6, #10
 80050c8:	d1df      	bne.n	800508a <__swbuf_r+0x2e>
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f7ff ff9d 	bl	800500c <_fflush_r>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d0d9      	beq.n	800508a <__swbuf_r+0x2e>
 80050d6:	e7d6      	b.n	8005086 <__swbuf_r+0x2a>

080050d8 <__swsetup_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <__swsetup_r+0xa8>)
 80050dc:	4605      	mov	r5, r0
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	460c      	mov	r4, r1
 80050e2:	b118      	cbz	r0, 80050ec <__swsetup_r+0x14>
 80050e4:	6a03      	ldr	r3, [r0, #32]
 80050e6:	b90b      	cbnz	r3, 80050ec <__swsetup_r+0x14>
 80050e8:	f7ff fa3c 	bl	8004564 <__sinit>
 80050ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f0:	0719      	lsls	r1, r3, #28
 80050f2:	d422      	bmi.n	800513a <__swsetup_r+0x62>
 80050f4:	06da      	lsls	r2, r3, #27
 80050f6:	d407      	bmi.n	8005108 <__swsetup_r+0x30>
 80050f8:	2209      	movs	r2, #9
 80050fa:	602a      	str	r2, [r5, #0]
 80050fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	e033      	b.n	8005170 <__swsetup_r+0x98>
 8005108:	0758      	lsls	r0, r3, #29
 800510a:	d512      	bpl.n	8005132 <__swsetup_r+0x5a>
 800510c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800510e:	b141      	cbz	r1, 8005122 <__swsetup_r+0x4a>
 8005110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005114:	4299      	cmp	r1, r3
 8005116:	d002      	beq.n	800511e <__swsetup_r+0x46>
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff fb2b 	bl	8004774 <_free_r>
 800511e:	2300      	movs	r3, #0
 8005120:	6363      	str	r3, [r4, #52]	@ 0x34
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	2300      	movs	r3, #0
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0308 	orr.w	r3, r3, #8
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	b94b      	cbnz	r3, 8005152 <__swsetup_r+0x7a>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005148:	d003      	beq.n	8005152 <__swsetup_r+0x7a>
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 f84f 	bl	80051f0 <__smakebuf_r>
 8005152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005156:	f013 0201 	ands.w	r2, r3, #1
 800515a:	d00a      	beq.n	8005172 <__swsetup_r+0x9a>
 800515c:	2200      	movs	r2, #0
 800515e:	60a2      	str	r2, [r4, #8]
 8005160:	6962      	ldr	r2, [r4, #20]
 8005162:	4252      	negs	r2, r2
 8005164:	61a2      	str	r2, [r4, #24]
 8005166:	6922      	ldr	r2, [r4, #16]
 8005168:	b942      	cbnz	r2, 800517c <__swsetup_r+0xa4>
 800516a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800516e:	d1c5      	bne.n	80050fc <__swsetup_r+0x24>
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	0799      	lsls	r1, r3, #30
 8005174:	bf58      	it	pl
 8005176:	6962      	ldrpl	r2, [r4, #20]
 8005178:	60a2      	str	r2, [r4, #8]
 800517a:	e7f4      	b.n	8005166 <__swsetup_r+0x8e>
 800517c:	2000      	movs	r0, #0
 800517e:	e7f7      	b.n	8005170 <__swsetup_r+0x98>
 8005180:	20000018 	.word	0x20000018

08005184 <_sbrk_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d06      	ldr	r5, [pc, #24]	@ (80051a0 <_sbrk_r+0x1c>)
 8005188:	2300      	movs	r3, #0
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fb ff62 	bl	8001058 <_sbrk>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_sbrk_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_sbrk_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	2000039c 	.word	0x2000039c

080051a4 <__swhatbuf_r>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	460c      	mov	r4, r1
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	2900      	cmp	r1, #0
 80051ae:	b096      	sub	sp, #88	@ 0x58
 80051b0:	4615      	mov	r5, r2
 80051b2:	461e      	mov	r6, r3
 80051b4:	da0d      	bge.n	80051d2 <__swhatbuf_r+0x2e>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2340      	movne	r3, #64	@ 0x40
 80051c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051c8:	2000      	movs	r0, #0
 80051ca:	6031      	str	r1, [r6, #0]
 80051cc:	602b      	str	r3, [r5, #0]
 80051ce:	b016      	add	sp, #88	@ 0x58
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	466a      	mov	r2, sp
 80051d4:	f000 f848 	bl	8005268 <_fstat_r>
 80051d8:	2800      	cmp	r0, #0
 80051da:	dbec      	blt.n	80051b6 <__swhatbuf_r+0x12>
 80051dc:	9901      	ldr	r1, [sp, #4]
 80051de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051e6:	4259      	negs	r1, r3
 80051e8:	4159      	adcs	r1, r3
 80051ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ee:	e7eb      	b.n	80051c8 <__swhatbuf_r+0x24>

080051f0 <__smakebuf_r>:
 80051f0:	898b      	ldrh	r3, [r1, #12]
 80051f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051f4:	079d      	lsls	r5, r3, #30
 80051f6:	4606      	mov	r6, r0
 80051f8:	460c      	mov	r4, r1
 80051fa:	d507      	bpl.n	800520c <__smakebuf_r+0x1c>
 80051fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	2301      	movs	r3, #1
 8005206:	6163      	str	r3, [r4, #20]
 8005208:	b003      	add	sp, #12
 800520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800520c:	ab01      	add	r3, sp, #4
 800520e:	466a      	mov	r2, sp
 8005210:	f7ff ffc8 	bl	80051a4 <__swhatbuf_r>
 8005214:	9f00      	ldr	r7, [sp, #0]
 8005216:	4605      	mov	r5, r0
 8005218:	4639      	mov	r1, r7
 800521a:	4630      	mov	r0, r6
 800521c:	f7ff fb16 	bl	800484c <_malloc_r>
 8005220:	b948      	cbnz	r0, 8005236 <__smakebuf_r+0x46>
 8005222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005226:	059a      	lsls	r2, r3, #22
 8005228:	d4ee      	bmi.n	8005208 <__smakebuf_r+0x18>
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	f043 0302 	orr.w	r3, r3, #2
 8005232:	81a3      	strh	r3, [r4, #12]
 8005234:	e7e2      	b.n	80051fc <__smakebuf_r+0xc>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	6020      	str	r0, [r4, #0]
 800523a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005246:	b15b      	cbz	r3, 8005260 <__smakebuf_r+0x70>
 8005248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f81d 	bl	800528c <_isatty_r>
 8005252:	b128      	cbz	r0, 8005260 <__smakebuf_r+0x70>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	431d      	orrs	r5, r3
 8005264:	81a5      	strh	r5, [r4, #12]
 8005266:	e7cf      	b.n	8005208 <__smakebuf_r+0x18>

08005268 <_fstat_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d07      	ldr	r5, [pc, #28]	@ (8005288 <_fstat_r+0x20>)
 800526c:	2300      	movs	r3, #0
 800526e:	4604      	mov	r4, r0
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	f7fb fec6 	bl	8001006 <_fstat>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d102      	bne.n	8005284 <_fstat_r+0x1c>
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	b103      	cbz	r3, 8005284 <_fstat_r+0x1c>
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	bf00      	nop
 8005288:	2000039c 	.word	0x2000039c

0800528c <_isatty_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d06      	ldr	r5, [pc, #24]	@ (80052a8 <_isatty_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fb fec5 	bl	8001026 <_isatty>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_isatty_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_isatty_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	2000039c 	.word	0x2000039c

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
