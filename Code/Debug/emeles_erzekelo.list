
emeles_erzekelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005138  08005138  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005140  08005140  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005148  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  080051b8  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080051b8  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e28  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f1  00000000  00000000  00018ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cba  00000000  00000000  0001c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e99  00000000  00000000  0001d5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c3d  00000000  00000000  00041473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6d35  00000000  00000000  000550b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bde5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  0012be28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001309d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080050cc 	.word	0x080050cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080050cc 	.word	0x080050cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Start_buzzer>:
void Start_buzzer();
void Stop_buzzer();
void Display_limit(uint16_t);
void Display_degree(uint16_t);

void Start_buzzer(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <Start_buzzer+0x10>)
 80005a6:	f002 fa0b 	bl	80029c0 <HAL_TIM_Base_Start_IT>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000130 	.word	0x20000130

080005b4 <Stop_buzzer>:

void Stop_buzzer(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <Stop_buzzer+0x10>)
 80005ba:	f002 fa71 	bl	8002aa0 <HAL_TIM_Base_Stop_IT>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000130 	.word	0x20000130

080005c8 <Display_limit>:

void Display_limit(uint16_t){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]

}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <Display_degree>:

void Display_degree(uint16_t){
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	4603      	mov	r3, r0
 80005e6:	80fb      	strh	r3, [r7, #6]

}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <Measure_degree>:

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&Accelometer);
}

int Measure_degree(){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	if(i == 90){
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <Measure_degree+0x38>)
 80005fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000600:	d103      	bne.n	800060a <Measure_degree+0x16>
		i = -91;
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <Measure_degree+0x38>)
 8000604:	f64f 72a5 	movw	r2, #65445	@ 0xffa5
 8000608:	801a      	strh	r2, [r3, #0]
	}
	i++;
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <Measure_degree+0x38>)
 800060c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000610:	b29b      	uxth	r3, r3
 8000612:	3301      	adds	r3, #1
 8000614:	b29b      	uxth	r3, r3
 8000616:	b21a      	sxth	r2, r3
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <Measure_degree+0x38>)
 800061a:	801a      	strh	r2, [r3, #0]
	return i;
 800061c:	4b03      	ldr	r3, [pc, #12]	@ (800062c <Measure_degree+0x38>)
 800061e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	2000008c 	.word	0x2000008c

08000630 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, LED_Pin);

	if (htim->Instance == TIM4){ // measuring the accelerometer
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a09      	ldr	r2, [pc, #36]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d102      	bne.n	8000648 <HAL_TIM_PeriodElapsedCallback+0x18>
		measure = 1;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM10){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	@ (800066c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d103      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_GPIO_TogglePin(GPIOC, buzzer_Pin); // generate 4kHz square wave for the buzzer
 8000652:	2101      	movs	r1, #1
 8000654:	4806      	ldr	r0, [pc, #24]	@ (8000670 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000656:	f001 f99e 	bl	8001996 <HAL_GPIO_TogglePin>
	}

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40000800 	.word	0x40000800
 8000668:	200001c0 	.word	0x200001c0
 800066c:	40014400 	.word	0x40014400
 8000670:	40020800 	.word	0x40020800

08000674 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button_up_Pin) {
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	2b04      	cmp	r3, #4
 8000682:	d106      	bne.n	8000692 <HAL_GPIO_EXTI_Callback+0x1e>
		limit++;
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	3301      	adds	r3, #1
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000690:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == button_down_Pin) {
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	2b20      	cmp	r3, #32
 8000696:	d106      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0x32>
		limit--;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x40>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	3b01      	subs	r3, #1
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x40>)
 80006a4:	801a      	strh	r2, [r3, #0]
	}

}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fda8 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f86c 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f9a8 	bl	8000a18 <MX_GPIO_Init>
  MX_SPI3_Init();
 80006c8:	f000 f8d4 	bl	8000874 <MX_SPI3_Init>
  MX_TIM4_Init();
 80006cc:	f000 f908 	bl	80008e0 <MX_TIM4_Init>
  MX_TIM10_Init();
 80006d0:	f000 f954 	bl	800097c <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f976 	bl	80009c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_SPI2_Init();
 80006d8:	f000 fbf8 	bl	8000ecc <BSP_SPI2_Init>
  //MEMS_Init();

  HAL_TIM_Base_Start_IT(&htim4); // measure accelerometer every 100 ms
 80006dc:	4828      	ldr	r0, [pc, #160]	@ (8000780 <main+0xc8>)
 80006de:	f002 f96f 	bl	80029c0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (measure) {
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <main+0xcc>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0fa      	beq.n	80006e2 <main+0x2a>
			measure = 0;
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <main+0xcc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]

			current_limit = limit;
 80006f2:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <main+0xd0>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	4b24      	ldr	r3, [pc, #144]	@ (800078c <main+0xd4>)
 80006fc:	801a      	strh	r2, [r3, #0]
			degree = Measure_degree();
 80006fe:	f7ff ff79 	bl	80005f4 <Measure_degree>
 8000702:	4603      	mov	r3, r0
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <main+0xd8>)
 8000708:	801a      	strh	r2, [r3, #0]

			if(abs(degree) > current_limit){
 800070a:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <main+0xd8>)
 800070c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000710:	2b00      	cmp	r3, #0
 8000712:	bfb8      	it	lt
 8000714:	425b      	neglt	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <main+0xd4>)
 800071c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000720:	429a      	cmp	r2, r3
 8000722:	dd02      	ble.n	800072a <main+0x72>
				Start_buzzer();
 8000724:	f7ff ff3c 	bl	80005a0 <Start_buzzer>
 8000728:	e001      	b.n	800072e <main+0x76>
			}
			else{
				Stop_buzzer();
 800072a:	f7ff ff43 	bl	80005b4 <Stop_buzzer>
			}

			printf("%d\r\n", degree);        // Send data to the PC
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <main+0xd8>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	4817      	ldr	r0, [pc, #92]	@ (8000794 <main+0xdc>)
 8000738:	f003 fe5a 	bl	80043f0 <iprintf>
			printf("%d\r\n", current_limit);
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <main+0xd4>)
 800073e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000742:	4619      	mov	r1, r3
 8000744:	4813      	ldr	r0, [pc, #76]	@ (8000794 <main+0xdc>)
 8000746:	f003 fe53 	bl	80043f0 <iprintf>

			if(previous_limit != current_limit){
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <main+0xe0>)
 800074c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <main+0xd4>)
 8000752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000756:	429a      	cmp	r2, r3
 8000758:	d006      	beq.n	8000768 <main+0xb0>
				Display_limit(current_limit);
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <main+0xd4>)
 800075c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff31 	bl	80005c8 <Display_limit>
 8000766:	e005      	b.n	8000774 <main+0xbc>
			}
			else{
				Display_degree(degree);
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <main+0xd8>)
 800076a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff35 	bl	80005de <Display_degree>
			}

			previous_limit = current_limit;
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <main+0xd4>)
 8000776:	f9b3 2000 	ldrsh.w	r2, [r3]
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <main+0xe0>)
 800077c:	801a      	strh	r2, [r3, #0]
		if (measure) {
 800077e:	e7b0      	b.n	80006e2 <main+0x2a>
 8000780:	200000e8 	.word	0x200000e8
 8000784:	200001c0 	.word	0x200001c0
 8000788:	20000000 	.word	0x20000000
 800078c:	20000002 	.word	0x20000002
 8000790:	200001c2 	.word	0x200001c2
 8000794:	080050e4 	.word	0x080050e4
 8000798:	20000004 	.word	0x20000004

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2234      	movs	r2, #52	@ 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fe75 	bl	800449a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a28      	ldr	r2, [pc, #160]	@ (800086c <SystemClock_Config+0xd0>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xd0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007e8:	4a21      	ldr	r2, [pc, #132]	@ (8000870 <SystemClock_Config+0xd4>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <SystemClock_Config+0xd4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000800:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800080e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000814:	2348      	movs	r3, #72	@ 0x48
 8000816:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800081c:	2303      	movs	r3, #3
 800081e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fc31 	bl	8002090 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000834:	f000 f9c8 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f8d1 	bl	80019fc <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000860:	f000 f9b2 	bl	8000bc8 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	@ 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_SPI3_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <MX_SPI3_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_SPI3_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_SPI3_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_SPI3_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_SPI3_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_SPI3_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008a8:	2218      	movs	r2, #24
 80008aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_SPI3_Init+0x64>)
 80008c6:	f001 fe81 	bl	80025cc <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 f97a 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000090 	.word	0x20000090
 80008dc:	40003c00 	.word	0x40003c00

080008e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_TIM4_Init+0x94>)
 80008fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000978 <MX_TIM4_Init+0x98>)
 8000900:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 69;
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_TIM4_Init+0x94>)
 8000904:	2245      	movs	r2, #69	@ 0x45
 8000906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_TIM4_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_TIM4_Init+0x94>)
 8000910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_TIM4_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_TIM4_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000922:	4814      	ldr	r0, [pc, #80]	@ (8000974 <MX_TIM4_Init+0x94>)
 8000924:	f001 fffc 	bl	8002920 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f94b 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM4_Init+0x94>)
 8000940:	f002 f9cd 	bl	8002cde <HAL_TIM_ConfigClockSource>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 f93d 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <MX_TIM4_Init+0x94>)
 800095c:	f002 fbf4 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000966:	f000 f92f 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000e8 	.word	0x200000e8
 8000978:	40000800 	.word	0x40000800

0800097c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_TIM10_Init+0x40>)
 8000982:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <MX_TIM10_Init+0x44>)
 8000984:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <MX_TIM10_Init+0x40>)
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_TIM10_Init+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 11250;
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_TIM10_Init+0x40>)
 8000994:	f642 32f2 	movw	r2, #11250	@ 0x2bf2
 8000998:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_TIM10_Init+0x40>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_TIM10_Init+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_TIM10_Init+0x40>)
 80009a8:	f001 ffba 	bl	8002920 <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80009b2:	f000 f909 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000130 	.word	0x20000130
 80009c0:	40014400 	.word	0x40014400

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <MX_USART2_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009fc:	f002 fc34 	bl	8003268 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f000 f8df 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000178 	.word	0x20000178
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b55      	ldr	r3, [pc, #340]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a54      	ldr	r2, [pc, #336]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a4d      	ldr	r2, [pc, #308]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a46      	ldr	r2, [pc, #280]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b40      	ldr	r3, [pc, #256]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a38      	ldr	r2, [pc, #224]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b36      	ldr	r3, [pc, #216]	@ (8000b88 <MX_GPIO_Init+0x170>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, buzzer_Pin|SS_7seg_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2121      	movs	r1, #33	@ 0x21
 8000abe:	4833      	ldr	r0, [pc, #204]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000ac0:	f000 ff50 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	4831      	ldr	r0, [pc, #196]	@ (8000b90 <MX_GPIO_Init+0x178>)
 8000aca:	f000 ff4b 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin|OE_7seg_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	4830      	ldr	r0, [pc, #192]	@ (8000b94 <MX_GPIO_Init+0x17c>)
 8000ad4:	f000 ff46 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : buzzer_Pin SS_7seg_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|SS_7seg_Pin;
 8000ad8:	2321      	movs	r3, #33	@ 0x21
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000af0:	f000 fda4 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000af4:	2320      	movs	r3, #32
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4821      	ldr	r0, [pc, #132]	@ (8000b90 <MX_GPIO_Init+0x178>)
 8000b0c:	f000 fd96 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_accel_Pin OE_7seg_Pin */
  GPIO_InitStruct.Pin = SS_accel_Pin|OE_7seg_Pin;
 8000b10:	2303      	movs	r3, #3
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	481b      	ldr	r0, [pc, #108]	@ (8000b94 <MX_GPIO_Init+0x17c>)
 8000b28:	f000 fd88 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_up_Pin */
  GPIO_InitStruct.Pin = button_up_Pin;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_up_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <MX_GPIO_Init+0x180>)
 8000b42:	f000 fd7b 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_down_Pin */
  GPIO_InitStruct.Pin = button_down_Pin;
 8000b46:	2320      	movs	r3, #32
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_down_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480e      	ldr	r0, [pc, #56]	@ (8000b94 <MX_GPIO_Init+0x17c>)
 8000b5c:	f000 fd6e 	bl	800163c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2008      	movs	r0, #8
 8000b66:	f000 fca0 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b6a:	2008      	movs	r0, #8
 8000b6c:	f000 fcb9 	bl	80014e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2017      	movs	r0, #23
 8000b76:	f000 fc98 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b7a:	2017      	movs	r0, #23
 8000b7c:	f000 fcb1 	bl	80014e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	@ 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <_write>:

/* USER CODE BEGIN 4 */

// Redirect the printf to COM port
int _write(int fd, char * ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <_write+0x28>)
 8000bb4:	f002 fba8 	bl	8003308 <HAL_UART_Transmit>
  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000178 	.word	0x20000178

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c12:	2007      	movs	r0, #7
 8000c14:	f000 fc3e 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <HAL_SPI_MspInit+0xa4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d13c      	bne.n	8000cc0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <HAL_SPI_MspInit+0xa8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ccc <HAL_SPI_MspInit+0xa8>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <HAL_SPI_MspInit+0xa8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_SPI_MspInit+0xa8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ccc <HAL_SPI_MspInit+0xa8>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_SPI_MspInit+0xa8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <HAL_SPI_MspInit+0xac>)
 8000c9a:	f000 fccf 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <HAL_SPI_MspInit+0xac>)
 8000cbc:	f000 fcbe 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	@ 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40003c00 	.word	0x40003c00
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <HAL_TIM_Base_MspInit+0x80>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d116      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_TIM_Base_MspInit+0x84>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a1a      	ldr	r2, [pc, #104]	@ (8000d58 <HAL_TIM_Base_MspInit+0x84>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_TIM_Base_MspInit+0x84>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	201e      	movs	r0, #30
 8000d08:	f000 fbcf 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d0c:	201e      	movs	r0, #30
 8000d0e:	f000 fbe8 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000d12:	e01a      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_TIM_Base_MspInit+0x88>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d115      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <HAL_TIM_Base_MspInit+0x84>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a0c      	ldr	r2, [pc, #48]	@ (8000d58 <HAL_TIM_Base_MspInit+0x84>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_TIM_Base_MspInit+0x84>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f000 fbb3 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 fbcc 	bl	80014e2 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40000800 	.word	0x40000800
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40014400 	.word	0x40014400

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_UART_MspInit+0x94>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d133      	bne.n	8000dea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_UART_MspInit+0x98>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <HAL_UART_MspInit+0x9c>)
 8000dd6:	f000 fc31 	bl	800163c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2026      	movs	r0, #38	@ 0x26
 8000de0:	f000 fb63 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000de4:	2026      	movs	r0, #38	@ 0x26
 8000de6:	f000 fb7c 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 fa2d 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_up_Pin);
 8000e62:	2004      	movs	r0, #4
 8000e64:	f000 fdb2 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_down_Pin);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f000 fdab 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e82:	f001 fe3c 	bl	8002afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000130 	.word	0x20000130

08000e90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM4_IRQHandler+0x10>)
 8000e96:	f001 fe32 	bl	8002afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000e8 	.word	0x200000e8

08000ea4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <SPI2_IRQHandler+0x10>)
 8000eaa:	f001 fc19 	bl	80026e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001c4 	.word	0x200001c4

08000eb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <USART2_IRQHandler+0x10>)
 8000ebe:	f002 faaf 	bl	8003420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000178 	.word	0x20000178

08000ecc <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <BSP_SPI2_Init+0x54>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <BSP_SPI2_Init+0x58>)
 8000eda:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <BSP_SPI2_Init+0x5c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	4911      	ldr	r1, [pc, #68]	@ (8000f28 <BSP_SPI2_Init+0x5c>)
 8000ee4:	600a      	str	r2, [r1, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d114      	bne.n	8000f14 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000eea:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <BSP_SPI2_Init+0x54>)
 8000eec:	f001 fcf6 	bl	80028dc <HAL_SPI_GetState>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10e      	bne.n	8000f14 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8000ef6:	480a      	ldr	r0, [pc, #40]	@ (8000f20 <BSP_SPI2_Init+0x54>)
 8000ef8:	f000 f854 	bl	8000fa4 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d108      	bne.n	8000f14 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <BSP_SPI2_Init+0x54>)
 8000f04:	f000 f812 	bl	8000f2c <MX_SPI2_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000f0e:	f06f 0307 	mvn.w	r3, #7
 8000f12:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001c4 	.word	0x200001c4
 8000f24:	40003800 	.word	0x40003800
 8000f28:	2000021c 	.word	0x2000021c

08000f2c <MX_SPI2_Init>:
}

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <MX_SPI2_Init+0x74>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f64:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2218      	movs	r2, #24
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f001 fb21 	bl	80025cc <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40003800 	.word	0x40003800

08000fa4 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	4b32      	ldr	r3, [pc, #200]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a31      	ldr	r2, [pc, #196]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	4b24      	ldr	r3, [pc, #144]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	4a23      	ldr	r2, [pc, #140]	@ (800107c <SPI2_MspInit+0xd8>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff4:	4b21      	ldr	r3, [pc, #132]	@ (800107c <SPI2_MspInit+0xd8>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8001000:	2304      	movs	r3, #4
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8001010:	2305      	movs	r3, #5
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4819      	ldr	r0, [pc, #100]	@ (8001080 <SPI2_MspInit+0xdc>)
 800101c:	f000 fb0e 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001020:	2308      	movs	r3, #8
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8001030:	2305      	movs	r3, #5
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4811      	ldr	r0, [pc, #68]	@ (8001080 <SPI2_MspInit+0xdc>)
 800103c:	f000 fafe 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8001052:	2305      	movs	r3, #5
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <SPI2_MspInit+0xe0>)
 800105e:	f000 faed 	bl	800163c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2024      	movs	r0, #36	@ 0x24
 8001068:	f000 fa1f 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800106c:	2024      	movs	r0, #36	@ 0x24
 800106e:	f000 fa38 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020800 	.word	0x40020800
 8001084:	40020400 	.word	0x40020400

08001088 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109a:	f3af 8000 	nop.w
 800109e:	4601      	mov	r1, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <_read+0x12>
  }

  return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ea:	605a      	str	r2, [r3, #4]
  return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_isatty>:

int _isatty(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f003 f9ec 	bl	8004538 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20020000 	.word	0x20020000
 800118c:	00000400 	.word	0x00000400
 8001190:	20000220 	.word	0x20000220
 8001194:	20000378 	.word	0x20000378

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011c0:	f7ff ffea 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f003 f9ab 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fa63 	bl	80006b8 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001200:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 8001204:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001208:	20000374 	.word	0x20000374

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f92b 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fcc6 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f943 	bl	80014fe <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f90b 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000010 	.word	0x20000010
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000010 	.word	0x20000010
 80012d8:	20000224 	.word	0x20000224

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000224 	.word	0x20000224

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	@ (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	@ 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff29 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff3e 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff31 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff feda 	bl	80012dc <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e052      	b.n	80015ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0216 	bic.w	r2, r2, #22
 8001556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001566:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d103      	bne.n	8001578 <HAL_DMA_Abort+0x62>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0208 	bic.w	r2, r2, #8
 8001586:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001598:	e013      	b.n	80015c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159a:	f7ff fe9f 	bl	80012dc <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d90c      	bls.n	80015c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2220      	movs	r2, #32
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e015      	b.n	80015ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e4      	bne.n	800159a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d4:	223f      	movs	r2, #63	@ 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d004      	beq.n	8001614 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2280      	movs	r2, #128	@ 0x80
 800160e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00c      	b.n	800162e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2205      	movs	r2, #5
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e165      	b.n	8001924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 8154 	bne.w	800191e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	2b02      	cmp	r3, #2
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d017      	beq.n	800172c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80ae 	beq.w	800191e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <HAL_GPIO_Init+0x300>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a5c      	ldr	r2, [pc, #368]	@ (800193c <HAL_GPIO_Init+0x300>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b5a      	ldr	r3, [pc, #360]	@ (800193c <HAL_GPIO_Init+0x300>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a58      	ldr	r2, [pc, #352]	@ (8001940 <HAL_GPIO_Init+0x304>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4f      	ldr	r2, [pc, #316]	@ (8001944 <HAL_GPIO_Init+0x308>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x21a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4e      	ldr	r2, [pc, #312]	@ (8001948 <HAL_GPIO_Init+0x30c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x216>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4d      	ldr	r2, [pc, #308]	@ (800194c <HAL_GPIO_Init+0x310>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x212>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4c      	ldr	r2, [pc, #304]	@ (8001950 <HAL_GPIO_Init+0x314>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x20e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4b      	ldr	r2, [pc, #300]	@ (8001954 <HAL_GPIO_Init+0x318>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x20a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4a      	ldr	r2, [pc, #296]	@ (8001958 <HAL_GPIO_Init+0x31c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x206>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a49      	ldr	r2, [pc, #292]	@ (800195c <HAL_GPIO_Init+0x320>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x202>
 800183a:	2306      	movs	r3, #6
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 800183e:	2307      	movs	r3, #7
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x21c>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	@ (8001940 <HAL_GPIO_Init+0x304>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <HAL_GPIO_Init+0x324>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a31      	ldr	r2, [pc, #196]	@ (8001960 <HAL_GPIO_Init+0x324>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a26      	ldr	r2, [pc, #152]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <HAL_GPIO_Init+0x324>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001918:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <HAL_GPIO_Init+0x324>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f ae96 	bls.w	8001658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3724      	adds	r7, #36	@ 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40021400 	.word	0x40021400
 800195c:	40021800 	.word	0x40021800
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a8:	887a      	ldrh	r2, [r7, #2]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	041a      	lsls	r2, r3, #16
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	400b      	ands	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fe42 	bl	8000674 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0cc      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b68      	ldr	r3, [pc, #416]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d90c      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b65      	ldr	r3, [pc, #404]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a58      	ldr	r2, [pc, #352]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d044      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e067      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4934      	ldr	r1, [pc, #208]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7ff fbf6 	bl	80012dc <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff fbf2 	bl	80012dc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e04f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d20c      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f855 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb56 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	080050ec 	.word	0x080050ec
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	2000000c 	.word	0x2000000c

08001bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000008 	.word	0x20000008

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be4:	f7ff fff0 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0a9b      	lsrs	r3, r3, #10
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	@ (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	080050fc 	.word	0x080050fc

08001c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c0c:	f7ff ffdc 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	0b5b      	lsrs	r3, r3, #13
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	@ (8001c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	080050fc 	.word	0x080050fc

08001c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c34:	b0ae      	sub	sp, #184	@ 0xb8
 8001c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c56:	4bcb      	ldr	r3, [pc, #812]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	f200 8206 	bhi.w	8002070 <HAL_RCC_GetSysClockFreq+0x440>
 8001c64:	a201      	add	r2, pc, #4	@ (adr r2, 8001c6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6a:	bf00      	nop
 8001c6c:	08001ca1 	.word	0x08001ca1
 8001c70:	08002071 	.word	0x08002071
 8001c74:	08002071 	.word	0x08002071
 8001c78:	08002071 	.word	0x08002071
 8001c7c:	08001ca9 	.word	0x08001ca9
 8001c80:	08002071 	.word	0x08002071
 8001c84:	08002071 	.word	0x08002071
 8001c88:	08002071 	.word	0x08002071
 8001c8c:	08001cb1 	.word	0x08001cb1
 8001c90:	08002071 	.word	0x08002071
 8001c94:	08002071 	.word	0x08002071
 8001c98:	08002071 	.word	0x08002071
 8001c9c:	08001ea1 	.word	0x08001ea1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4bb9      	ldr	r3, [pc, #740]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001ca6:	e1e7      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca8:	4bb8      	ldr	r3, [pc, #736]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cae:	e1e3      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb0:	4bb4      	ldr	r3, [pc, #720]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cbc:	4bb1      	ldr	r3, [pc, #708]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d071      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc8:	4bae      	ldr	r3, [pc, #696]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001cd4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001cee:	4622      	mov	r2, r4
 8001cf0:	462b      	mov	r3, r5
 8001cf2:	f04f 0000 	mov.w	r0, #0
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	0159      	lsls	r1, r3, #5
 8001cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d00:	0150      	lsls	r0, r2, #5
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4621      	mov	r1, r4
 8001d08:	1a51      	subs	r1, r2, r1
 8001d0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d20:	4649      	mov	r1, r9
 8001d22:	018b      	lsls	r3, r1, #6
 8001d24:	4641      	mov	r1, r8
 8001d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	018a      	lsls	r2, r1, #6
 8001d2e:	4641      	mov	r1, r8
 8001d30:	1a51      	subs	r1, r2, r1
 8001d32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d34:	4649      	mov	r1, r9
 8001d36:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d48:	4649      	mov	r1, r9
 8001d4a:	00cb      	lsls	r3, r1, #3
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d52:	4641      	mov	r1, r8
 8001d54:	00ca      	lsls	r2, r1, #3
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	189b      	adds	r3, r3, r2
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d62:	462b      	mov	r3, r5
 8001d64:	460a      	mov	r2, r1
 8001d66:	eb42 0303 	adc.w	r3, r2, r3
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d78:	4629      	mov	r1, r5
 8001d7a:	024b      	lsls	r3, r1, #9
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d82:	4621      	mov	r1, r4
 8001d84:	024a      	lsls	r2, r1, #9
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d9c:	f7fe fa88 	bl	80002b0 <__aeabi_uldivmod>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4613      	mov	r3, r2
 8001da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001daa:	e067      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dac:	4b75      	ldr	r3, [pc, #468]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001db8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001dca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001dce:	4622      	mov	r2, r4
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	0159      	lsls	r1, r3, #5
 8001ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de0:	0150      	lsls	r0, r2, #5
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4621      	mov	r1, r4
 8001de8:	1a51      	subs	r1, r2, r1
 8001dea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001dec:	4629      	mov	r1, r5
 8001dee:	eb63 0301 	sbc.w	r3, r3, r1
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e00:	4649      	mov	r1, r9
 8001e02:	018b      	lsls	r3, r1, #6
 8001e04:	4641      	mov	r1, r8
 8001e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	018a      	lsls	r2, r1, #6
 8001e0e:	4641      	mov	r1, r8
 8001e10:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e14:	4649      	mov	r1, r9
 8001e16:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e2e:	4692      	mov	sl, r2
 8001e30:	469b      	mov	fp, r3
 8001e32:	4623      	mov	r3, r4
 8001e34:	eb1a 0303 	adds.w	r3, sl, r3
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e4e:	4629      	mov	r1, r5
 8001e50:	028b      	lsls	r3, r1, #10
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e58:	4621      	mov	r1, r4
 8001e5a:	028a      	lsls	r2, r1, #10
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e64:	2200      	movs	r2, #0
 8001e66:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e68:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e6e:	f7fe fa1f 	bl	80002b0 <__aeabi_uldivmod>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4613      	mov	r3, r2
 8001e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e7c:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e9e:	e0eb      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea0:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d06b      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb8:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ec4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eca:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ecc:	2300      	movs	r3, #0
 8001ece:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ed0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ed4:	4622      	mov	r2, r4
 8001ed6:	462b      	mov	r3, r5
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	0159      	lsls	r1, r3, #5
 8001ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee6:	0150      	lsls	r0, r2, #5
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4621      	mov	r1, r4
 8001eee:	1a51      	subs	r1, r2, r1
 8001ef0:	61b9      	str	r1, [r7, #24]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f06:	4659      	mov	r1, fp
 8001f08:	018b      	lsls	r3, r1, #6
 8001f0a:	4651      	mov	r1, sl
 8001f0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f10:	4651      	mov	r1, sl
 8001f12:	018a      	lsls	r2, r1, #6
 8001f14:	4651      	mov	r1, sl
 8001f16:	ebb2 0801 	subs.w	r8, r2, r1
 8001f1a:	4659      	mov	r1, fp
 8001f1c:	eb63 0901 	sbc.w	r9, r3, r1
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f34:	4690      	mov	r8, r2
 8001f36:	4699      	mov	r9, r3
 8001f38:	4623      	mov	r3, r4
 8001f3a:	eb18 0303 	adds.w	r3, r8, r3
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	462b      	mov	r3, r5
 8001f42:	eb49 0303 	adc.w	r3, r9, r3
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f54:	4629      	mov	r1, r5
 8001f56:	024b      	lsls	r3, r1, #9
 8001f58:	4621      	mov	r1, r4
 8001f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f5e:	4621      	mov	r1, r4
 8001f60:	024a      	lsls	r2, r1, #9
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f74:	f7fe f99c 	bl	80002b0 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f82:	e065      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x420>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f90:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	2200      	movs	r2, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fa6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001faa:	4642      	mov	r2, r8
 8001fac:	464b      	mov	r3, r9
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0159      	lsls	r1, r3, #5
 8001fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fbc:	0150      	lsls	r0, r2, #5
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	1a51      	subs	r1, r2, r1
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	4649      	mov	r1, r9
 8001fca:	eb63 0301 	sbc.w	r3, r3, r1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001fdc:	4659      	mov	r1, fp
 8001fde:	018b      	lsls	r3, r1, #6
 8001fe0:	4651      	mov	r1, sl
 8001fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fe6:	4651      	mov	r1, sl
 8001fe8:	018a      	lsls	r2, r1, #6
 8001fea:	4651      	mov	r1, sl
 8001fec:	1a54      	subs	r4, r2, r1
 8001fee:	4659      	mov	r1, fp
 8001ff0:	eb63 0501 	sbc.w	r5, r3, r1
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	00eb      	lsls	r3, r5, #3
 8001ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002002:	00e2      	lsls	r2, r4, #3
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	4643      	mov	r3, r8
 800200a:	18e3      	adds	r3, r4, r3
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	464b      	mov	r3, r9
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002038:	2200      	movs	r2, #0
 800203a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800203c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800203e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002042:	f7fe f935 	bl	80002b0 <__aeabi_uldivmod>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4613      	mov	r3, r2
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x458>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0f1b      	lsrs	r3, r3, #28
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800205e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800206e:	e003      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800207c:	4618      	mov	r0, r3
 800207e:	37b8      	adds	r7, #184	@ 0xb8
 8002080:	46bd      	mov	sp, r7
 8002082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	00f42400 	.word	0x00f42400

08002090 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e28d      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8083 	beq.w	80021b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020b0:	4b94      	ldr	r3, [pc, #592]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d019      	beq.n	80020f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020bc:	4b91      	ldr	r3, [pc, #580]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b84      	ldr	r3, [pc, #528]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x124>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e25a      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x90>
 8002112:	4b7c      	ldr	r3, [pc, #496]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7b      	ldr	r2, [pc, #492]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xcc>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0xb4>
 800212a:	4b76      	ldr	r3, [pc, #472]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b73      	ldr	r3, [pc, #460]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a72      	ldr	r2, [pc, #456]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xcc>
 8002144:	4b6f      	ldr	r3, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6e      	ldr	r2, [pc, #440]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b6c      	ldr	r3, [pc, #432]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6b      	ldr	r2, [pc, #428]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff f8ba 	bl	80012dc <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff f8b6 	bl	80012dc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	@ 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e21f      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b61      	ldr	r3, [pc, #388]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xdc>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f8a6 	bl	80012dc <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff f8a2 	bl	80012dc <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e20b      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x104>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d06f      	beq.n	80022a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021c2:	4b50      	ldr	r3, [pc, #320]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021da:	4b4a      	ldr	r3, [pc, #296]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b44      	ldr	r3, [pc, #272]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b41      	ldr	r3, [pc, #260]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x186>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1d3      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4937      	ldr	r1, [pc, #220]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x278>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff f84f 	bl	80012dc <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff f84b 	bl	80012dc <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1b4      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4925      	ldr	r1, [pc, #148]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_RCC_OscConfig+0x278>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff f82e 	bl	80012dc <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff f82a 	bl	80012dc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e193      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <HAL_RCC_OscConfig+0x27c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff f80e 	bl	80012dc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff f80a 	bl	80012dc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e173      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x234>
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_OscConfig+0x27c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe fff7 	bl	80012dc <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00e      	b.n	8002310 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe fff3 	bl	80012dc <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d907      	bls.n	8002310 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e15c      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b8a      	ldr	r3, [pc, #552]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8097 	beq.w	8002458 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b83      	ldr	r3, [pc, #524]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a7e      	ldr	r2, [pc, #504]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b7c      	ldr	r3, [pc, #496]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <HAL_RCC_OscConfig+0x4b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <HAL_RCC_OscConfig+0x4b0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <HAL_RCC_OscConfig+0x4b0>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7fe ffb3 	bl	80012dc <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe ffaf 	bl	80012dc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e118      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x4b0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x31e>
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x358>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x340>
 80023b6:	4b61      	ldr	r3, [pc, #388]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a60      	ldr	r2, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	4b5e      	ldr	r3, [pc, #376]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	4a5d      	ldr	r2, [pc, #372]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x358>
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4a59      	ldr	r2, [pc, #356]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	@ 0x70
 80023dc:	4b57      	ldr	r3, [pc, #348]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a56      	ldr	r2, [pc, #344]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	f023 0304 	bic.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe ff74 	bl	80012dc <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe ff70 	bl	80012dc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0d7      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	4b4b      	ldr	r3, [pc, #300]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ee      	beq.n	80023f8 <HAL_RCC_OscConfig+0x368>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe ff5e 	bl	80012dc <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe ff5a 	bl	80012dc <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0c1      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b40      	ldr	r3, [pc, #256]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ee      	bne.n	8002424 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	4a3a      	ldr	r2, [pc, #232]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ad 	beq.w	80025bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002462:	4b36      	ldr	r3, [pc, #216]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d060      	beq.n	8002530 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d145      	bne.n	8002502 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b33      	ldr	r3, [pc, #204]	@ (8002544 <HAL_RCC_OscConfig+0x4b4>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe ff2e 	bl	80012dc <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe ff2a 	bl	80012dc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e093      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b29      	ldr	r3, [pc, #164]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	071b      	lsls	r3, r3, #28
 80024ce:	491b      	ldr	r1, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_RCC_OscConfig+0x4b4>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe feff 	bl	80012dc <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe fefb 	bl	80012dc <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e064      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x452>
 8002500:	e05c      	b.n	80025bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <HAL_RCC_OscConfig+0x4b4>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fee8 	bl	80012dc <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fee4 	bl	80012dc <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e04d      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RCC_OscConfig+0x4ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x480>
 800252e:	e045      	b.n	80025bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e040      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
 800253c:	40023800 	.word	0x40023800
 8002540:	40007000 	.word	0x40007000
 8002544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002548:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_RCC_OscConfig+0x538>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d030      	beq.n	80025b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d129      	bne.n	80025b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d122      	bne.n	80025b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800257e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d119      	bne.n	80025b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d10f      	bne.n	80025b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07b      	b.n	80026d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ee:	d009      	beq.n	8002604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
 80025f6:	e005      	b.n	8002604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fb00 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002688:	ea42 0103 	orr.w	r1, r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0104 	and.w	r1, r3, #4
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f003 0210 	and.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
    return;
 800271e:	e0ce      	b.n	80028be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_SPI_IRQHandler+0x5e>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
    return;
 800273c:	e0bf      	b.n	80028be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_SPI_IRQHandler+0x7e>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80b0 	beq.w	80028be <HAL_SPI_IRQHandler+0x1de>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80aa 	beq.w	80028be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d011      	beq.n	80027a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	e00b      	b.n	80027bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
        return;
 80027ba:	e080      	b.n	80028be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	2b00      	cmp	r3, #0
 800281a:	d04f      	beq.n	80028bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800282a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_SPI_IRQHandler+0x168>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d034      	beq.n	80028b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0203 	bic.w	r2, r2, #3
 8002856:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d011      	beq.n	8002884 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a17      	ldr	r2, [pc, #92]	@ (80028c4 <HAL_SPI_IRQHandler+0x1e4>)
 8002866:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fec2 	bl	80015f6 <HAL_DMA_Abort_IT>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002890:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <HAL_SPI_IRQHandler+0x1e4>)
 8002892:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe feac 	bl	80015f6 <HAL_DMA_Abort_IT>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80028b0:	e003      	b.n	80028ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f808 	bl	80028c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80028b8:	e000      	b.n	80028bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80028ba:	bf00      	nop
    return;
 80028bc:	bf00      	nop
  }
}
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	080028f9 	.word	0x080028f9

080028c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028ea:	b2db      	uxtb	r3, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ffd8 	bl	80028c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e041      	b.n	80029b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f9c4 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 faac 	bl	8002ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d001      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04e      	b.n	8002a76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a23      	ldr	r2, [pc, #140]	@ (8002a84 <HAL_TIM_Base_Start_IT+0xc4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d022      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a02:	d01d      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	@ (8002a88 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d018      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	@ (8002a8c <HAL_TIM_Base_Start_IT+0xcc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00e      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d009      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x80>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xdc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d010      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	e007      	b.n	8002a74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40010400 	.word	0x40010400
 8002a98:	40014000 	.word	0x40014000
 8002a9c:	40001800 	.word	0x40001800

08002aa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01b      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f06f 0202 	mvn.w	r2, #2
 8002b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f999 	bl	8002e80 <HAL_TIM_IC_CaptureCallback>
 8002b4e:	e005      	b.n	8002b5c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f98b 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f99c 	bl	8002e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01b      	beq.n	8002bae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f06f 0204 	mvn.w	r2, #4
 8002b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f973 	bl	8002e80 <HAL_TIM_IC_CaptureCallback>
 8002b9a:	e005      	b.n	8002ba8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f965 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f976 	bl	8002e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01b      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0208 	mvn.w	r2, #8
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f94d 	bl	8002e80 <HAL_TIM_IC_CaptureCallback>
 8002be6:	e005      	b.n	8002bf4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f93f 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f950 	bl	8002e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01b      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f06f 0210 	mvn.w	r2, #16
 8002c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f927 	bl	8002e80 <HAL_TIM_IC_CaptureCallback>
 8002c32:	e005      	b.n	8002c40 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f919 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f92a 	bl	8002e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0201 	mvn.w	r2, #1
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd fce3 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fae3 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8fb 	bl	8002ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0220 	mvn.w	r2, #32
 8002cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fab5 	bl	8003240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_ConfigClockSource+0x1c>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0b4      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x186>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d20:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d32:	d03e      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0xd4>
 8002d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d38:	f200 8087 	bhi.w	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	f000 8086 	beq.w	8002e50 <HAL_TIM_ConfigClockSource+0x172>
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d48:	d87f      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d4a:	2b70      	cmp	r3, #112	@ 0x70
 8002d4c:	d01a      	beq.n	8002d84 <HAL_TIM_ConfigClockSource+0xa6>
 8002d4e:	2b70      	cmp	r3, #112	@ 0x70
 8002d50:	d87b      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d52:	2b60      	cmp	r3, #96	@ 0x60
 8002d54:	d050      	beq.n	8002df8 <HAL_TIM_ConfigClockSource+0x11a>
 8002d56:	2b60      	cmp	r3, #96	@ 0x60
 8002d58:	d877      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d5a:	2b50      	cmp	r3, #80	@ 0x50
 8002d5c:	d03c      	beq.n	8002dd8 <HAL_TIM_ConfigClockSource+0xfa>
 8002d5e:	2b50      	cmp	r3, #80	@ 0x50
 8002d60:	d873      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d62:	2b40      	cmp	r3, #64	@ 0x40
 8002d64:	d058      	beq.n	8002e18 <HAL_TIM_ConfigClockSource+0x13a>
 8002d66:	2b40      	cmp	r3, #64	@ 0x40
 8002d68:	d86f      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d6a:	2b30      	cmp	r3, #48	@ 0x30
 8002d6c:	d064      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x15a>
 8002d6e:	2b30      	cmp	r3, #48	@ 0x30
 8002d70:	d86b      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d060      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x15a>
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d867      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d05c      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d05a      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x15a>
 8002d82:	e062      	b.n	8002e4a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d94:	f000 f9b8 	bl	8003108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002da6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
      break;
 8002db0:	e04f      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc2:	f000 f9a1 	bl	8003108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dd4:	609a      	str	r2, [r3, #8]
      break;
 8002dd6:	e03c      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de4:	461a      	mov	r2, r3
 8002de6:	f000 f915 	bl	8003014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2150      	movs	r1, #80	@ 0x50
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f96e 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002df6:	e02c      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e04:	461a      	mov	r2, r3
 8002e06:	f000 f934 	bl	8003072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2160      	movs	r1, #96	@ 0x60
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f95e 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e16:	e01c      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 f8f5 	bl	8003014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2140      	movs	r1, #64	@ 0x40
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f94e 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e36:	e00c      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f000 f945 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e48:	e003      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4e:	e000      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a46      	ldr	r2, [pc, #280]	@ (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eda:	d00f      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a43      	ldr	r2, [pc, #268]	@ (8002fec <TIM_Base_SetConfig+0x130>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a42      	ldr	r2, [pc, #264]	@ (8002ff0 <TIM_Base_SetConfig+0x134>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a41      	ldr	r2, [pc, #260]	@ (8002ff4 <TIM_Base_SetConfig+0x138>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a40      	ldr	r2, [pc, #256]	@ (8002ff8 <TIM_Base_SetConfig+0x13c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a35      	ldr	r2, [pc, #212]	@ (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1c:	d027      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a32      	ldr	r2, [pc, #200]	@ (8002fec <TIM_Base_SetConfig+0x130>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d023      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a31      	ldr	r2, [pc, #196]	@ (8002ff0 <TIM_Base_SetConfig+0x134>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01f      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a30      	ldr	r2, [pc, #192]	@ (8002ff4 <TIM_Base_SetConfig+0x138>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01b      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff8 <TIM_Base_SetConfig+0x13c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d017      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	@ (8002ffc <TIM_Base_SetConfig+0x140>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2d      	ldr	r2, [pc, #180]	@ (8003000 <TIM_Base_SetConfig+0x144>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00f      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	@ (8003004 <TIM_Base_SetConfig+0x148>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2b      	ldr	r2, [pc, #172]	@ (8003008 <TIM_Base_SetConfig+0x14c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <TIM_Base_SetConfig+0x150>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a29      	ldr	r2, [pc, #164]	@ (8003010 <TIM_Base_SetConfig+0x154>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	@ (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_Base_SetConfig+0xf8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <TIM_Base_SetConfig+0x13c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d103      	bne.n	8002fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f023 0201 	bic.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	611a      	str	r2, [r3, #16]
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800
 8003008:	40001800 	.word	0x40001800
 800300c:	40001c00 	.word	0x40001c00
 8003010:	40002000 	.word	0x40002000

08003014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 030a 	bic.w	r3, r3, #10
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f023 0210 	bic.w	r2, r3, #16
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800309c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	031b      	lsls	r3, r3, #12
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	431a      	orrs	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e05a      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	@ (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ac:	d01d      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	@ (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	@ (800323c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40010400 	.word	0x40010400
 8003238:	40014000 	.word	0x40014000
 800323c:	40001800 	.word	0x40001800

08003240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e042      	b.n	8003300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fd66 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fd69 	bl	8003d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	d175      	bne.n	8003414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_Transmit+0x2c>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e06e      	b.n	8003416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2221      	movs	r2, #33	@ 0x21
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003346:	f7fd ffc9 	bl	80012dc <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003360:	d108      	bne.n	8003374 <HAL_UART_Transmit+0x6c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e003      	b.n	800337c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800337c:	e02e      	b.n	80033dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fb05 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e03a      	b.n	8003416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3302      	adds	r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e007      	b.n	80033ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1cb      	bne.n	800337e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2140      	movs	r1, #64	@ 0x40
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fad1 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b0ba      	sub	sp, #232	@ 0xe8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800345e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_UART_IRQHandler+0x66>
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fbc2 	bl	8003c08 <UART_Receive_IT>
      return;
 8003484:	e25b      	b.n	800393e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80de 	beq.w	800364c <HAL_UART_IRQHandler+0x22c>
 8003490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80d1 	beq.w	800364c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_UART_IRQHandler+0xae>
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0xd2>
 80034da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_UART_IRQHandler+0xf6>
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <HAL_UART_IRQHandler+0x126>
 8003522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800352e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f043 0208 	orr.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 81f2 	beq.w	8003934 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x14e>
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fb4d 	bl	8003c08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_UART_IRQHandler+0x17a>
 8003592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04f      	beq.n	800363a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa55 	bl	8003a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d141      	bne.n	8003632 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1d9      	bne.n	80035ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d013      	beq.n	800362a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	4a7e      	ldr	r2, [pc, #504]	@ (8003800 <HAL_UART_IRQHandler+0x3e0>)
 8003608:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fff1 	bl	80015f6 <HAL_DMA_Abort_IT>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003624:	4610      	mov	r0, r2
 8003626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	e00e      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f99e 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	e00a      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f99a 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	e006      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f996 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003646:	e175      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	bf00      	nop
    return;
 800364a:	e173      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 814f 	bne.w	80038f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8148 	beq.w	80038f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8141 	beq.w	80038f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	f040 80b6 	bne.w	8003804 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8145 	beq.w	8003938 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036b6:	429a      	cmp	r2, r3
 80036b8:	f080 813e 	bcs.w	8003938 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ce:	f000 8088 	beq.w	80037e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800370a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1d9      	bne.n	80036d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800372e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003742:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003746:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800374a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e1      	bne.n	800371e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800376a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800376c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800377e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003780:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003784:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800378c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e3      	bne.n	800375a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e3      	bne.n	80037a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fe9a 	bl	8001516 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8c1 	bl	8003980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037fe:	e09b      	b.n	8003938 <HAL_UART_IRQHandler+0x518>
 8003800:	08003b11 	.word	0x08003b11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800380c:	b29b      	uxth	r3, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 808e 	beq.w	800393c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8089 	beq.w	800393c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800383a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003840:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800384e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003850:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800385c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e3      	bne.n	800382a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	623b      	str	r3, [r7, #32]
   return(result);
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003886:	633a      	str	r2, [r7, #48]	@ 0x30
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800388c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e3      	bne.n	8003862 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0310 	bic.w	r3, r3, #16
 80038be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038cc:	61fa      	str	r2, [r7, #28]
 80038ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	617b      	str	r3, [r7, #20]
   return(result);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e3      	bne.n	80038a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f847 	bl	8003980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038f2:	e023      	b.n	800393c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <HAL_UART_IRQHandler+0x4f4>
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f913 	bl	8003b38 <UART_Transmit_IT>
    return;
 8003912:	e014      	b.n	800393e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <HAL_UART_IRQHandler+0x51e>
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f953 	bl	8003bd8 <UART_EndTransmit_IT>
    return;
 8003932:	e004      	b.n	800393e <HAL_UART_IRQHandler+0x51e>
    return;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <HAL_UART_IRQHandler+0x51e>
      return;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <HAL_UART_IRQHandler+0x51e>
      return;
 800393c:	bf00      	nop
  }
}
 800393e:	37e8      	adds	r7, #232	@ 0xe8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	e03b      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d037      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd fc93 	bl	80012dc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e03a      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d023      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b80      	cmp	r3, #128	@ 0x80
 80039de:	d020      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d01d      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d116      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f81d 	bl	8003a4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2208      	movs	r2, #8
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00f      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d0b4      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b095      	sub	sp, #84	@ 0x54
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a72:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e5      	bne.n	8003a86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d119      	bne.n	8003af6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ae2:	61ba      	str	r2, [r7, #24]
 8003ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6979      	ldr	r1, [r7, #20]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	613b      	str	r3, [r7, #16]
   return(result);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e5      	bne.n	8003ac2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b04:	bf00      	nop
 8003b06:	3754      	adds	r7, #84	@ 0x54
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff1e 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b21      	cmp	r3, #33	@ 0x21
 8003b4a:	d13e      	bne.n	8003bca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b54:	d114      	bne.n	8003b80 <UART_Transmit_IT+0x48>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]
 8003b7e:	e008      	b.n	8003b92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6211      	str	r1, [r2, #32]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fea3 	bl	8003944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	@ 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b22      	cmp	r3, #34	@ 0x22
 8003c1a:	f040 80ae 	bne.w	8003d7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c26:	d117      	bne.n	8003c58 <UART_Receive_IT+0x50>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c56:	e026      	b.n	8003ca6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6a:	d007      	beq.n	8003c7c <UART_Receive_IT+0x74>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <UART_Receive_IT+0x82>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e008      	b.n	8003c9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d15d      	bne.n	8003d76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0220 	bic.w	r2, r2, #32
 8003cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d135      	bne.n	8003d6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	613b      	str	r3, [r7, #16]
   return(result);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f023 0310 	bic.w	r3, r3, #16
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d26:	623a      	str	r2, [r7, #32]
 8003d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	69f9      	ldr	r1, [r7, #28]
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e5      	bne.n	8003d06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d10a      	bne.n	8003d5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fe0b 	bl	8003980 <HAL_UARTEx_RxEventCallback>
 8003d6a:	e002      	b.n	8003d72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fdf3 	bl	8003958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e002      	b.n	8003d7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3730      	adds	r7, #48	@ 0x30
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d88:	b0c0      	sub	sp, #256	@ 0x100
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	68d9      	ldr	r1, [r3, #12]
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	ea40 0301 	orr.w	r3, r0, r1
 8003dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ddc:	f021 010c 	bic.w	r1, r1, #12
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dea:	430b      	orrs	r3, r1
 8003dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	6999      	ldr	r1, [r3, #24]
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	ea40 0301 	orr.w	r3, r0, r1
 8003e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4b8f      	ldr	r3, [pc, #572]	@ (8004050 <UART_SetConfig+0x2cc>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d005      	beq.n	8003e24 <UART_SetConfig+0xa0>
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004054 <UART_SetConfig+0x2d0>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d104      	bne.n	8003e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7fd fef0 	bl	8001c08 <HAL_RCC_GetPCLK2Freq>
 8003e28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e2c:	e003      	b.n	8003e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2e:	f7fd fed7 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8003e32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e40:	f040 810c 	bne.w	800405c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e56:	4622      	mov	r2, r4
 8003e58:	462b      	mov	r3, r5
 8003e5a:	1891      	adds	r1, r2, r2
 8003e5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e5e:	415b      	adcs	r3, r3
 8003e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e66:	4621      	mov	r1, r4
 8003e68:	eb12 0801 	adds.w	r8, r2, r1
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	eb43 0901 	adc.w	r9, r3, r1
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e86:	4690      	mov	r8, r2
 8003e88:	4699      	mov	r9, r3
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	eb18 0303 	adds.w	r3, r8, r3
 8003e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e94:	462b      	mov	r3, r5
 8003e96:	eb49 0303 	adc.w	r3, r9, r3
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	18db      	adds	r3, r3, r3
 8003eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb8:	4613      	mov	r3, r2
 8003eba:	eb42 0303 	adc.w	r3, r2, r3
 8003ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ec8:	f7fc f9f2 	bl	80002b0 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4b61      	ldr	r3, [pc, #388]	@ (8004058 <UART_SetConfig+0x2d4>)
 8003ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011c      	lsls	r4, r3, #4
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003efc:	4641      	mov	r1, r8
 8003efe:	eb12 0a01 	adds.w	sl, r2, r1
 8003f02:	4649      	mov	r1, r9
 8003f04:	eb43 0b01 	adc.w	fp, r3, r1
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f1c:	4692      	mov	sl, r2
 8003f1e:	469b      	mov	fp, r3
 8003f20:	4643      	mov	r3, r8
 8003f22:	eb1a 0303 	adds.w	r3, sl, r3
 8003f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	18db      	adds	r3, r3, r3
 8003f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f4e:	4613      	mov	r3, r2
 8003f50:	eb42 0303 	adc.w	r3, r2, r3
 8003f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f5e:	f7fc f9a7 	bl	80002b0 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	4b3b      	ldr	r3, [pc, #236]	@ (8004058 <UART_SetConfig+0x2d4>)
 8003f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2264      	movs	r2, #100	@ 0x64
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	1acb      	subs	r3, r1, r3
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f7e:	4b36      	ldr	r3, [pc, #216]	@ (8004058 <UART_SetConfig+0x2d4>)
 8003f80:	fba3 2302 	umull	r2, r3, r3, r2
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f8c:	441c      	add	r4, r3
 8003f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	1851      	adds	r1, r2, r1
 8003fb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	414b      	adcs	r3, r1
 8003fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fc8:	4659      	mov	r1, fp
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	00ca      	lsls	r2, r1, #3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	eb42 0303 	adc.w	r3, r2, r3
 8003fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004004:	460b      	mov	r3, r1
 8004006:	18db      	adds	r3, r3, r3
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800400a:	4613      	mov	r3, r2
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800401a:	f7fc f949 	bl	80002b0 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <UART_SetConfig+0x2d4>)
 8004024:	fba3 1302 	umull	r1, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	2164      	movs	r1, #100	@ 0x64
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	3332      	adds	r3, #50	@ 0x32
 8004036:	4a08      	ldr	r2, [pc, #32]	@ (8004058 <UART_SetConfig+0x2d4>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	f003 0207 	and.w	r2, r3, #7
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4422      	add	r2, r4
 800404a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800404c:	e106      	b.n	800425c <UART_SetConfig+0x4d8>
 800404e:	bf00      	nop
 8004050:	40011000 	.word	0x40011000
 8004054:	40011400 	.word	0x40011400
 8004058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004066:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800406a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800406e:	4642      	mov	r2, r8
 8004070:	464b      	mov	r3, r9
 8004072:	1891      	adds	r1, r2, r2
 8004074:	6239      	str	r1, [r7, #32]
 8004076:	415b      	adcs	r3, r3
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407e:	4641      	mov	r1, r8
 8004080:	1854      	adds	r4, r2, r1
 8004082:	4649      	mov	r1, r9
 8004084:	eb43 0501 	adc.w	r5, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	00eb      	lsls	r3, r5, #3
 8004092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004096:	00e2      	lsls	r2, r4, #3
 8004098:	4614      	mov	r4, r2
 800409a:	461d      	mov	r5, r3
 800409c:	4643      	mov	r3, r8
 800409e:	18e3      	adds	r3, r4, r3
 80040a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040a4:	464b      	mov	r3, r9
 80040a6:	eb45 0303 	adc.w	r3, r5, r3
 80040aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040ca:	4629      	mov	r1, r5
 80040cc:	008b      	lsls	r3, r1, #2
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d4:	4621      	mov	r1, r4
 80040d6:	008a      	lsls	r2, r1, #2
 80040d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040dc:	f7fc f8e8 	bl	80002b0 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4b60      	ldr	r3, [pc, #384]	@ (8004268 <UART_SetConfig+0x4e4>)
 80040e6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	011c      	lsls	r4, r3, #4
 80040ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	61b9      	str	r1, [r7, #24]
 8004108:	415b      	adcs	r3, r3
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6139      	str	r1, [r7, #16]
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004144:	464b      	mov	r3, r9
 8004146:	460a      	mov	r2, r1
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800415a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004168:	4649      	mov	r1, r9
 800416a:	008b      	lsls	r3, r1, #2
 800416c:	4641      	mov	r1, r8
 800416e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004172:	4641      	mov	r1, r8
 8004174:	008a      	lsls	r2, r1, #2
 8004176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800417a:	f7fc f899 	bl	80002b0 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4611      	mov	r1, r2
 8004184:	4b38      	ldr	r3, [pc, #224]	@ (8004268 <UART_SetConfig+0x4e4>)
 8004186:	fba3 2301 	umull	r2, r3, r3, r1
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2264      	movs	r2, #100	@ 0x64
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	1acb      	subs	r3, r1, r3
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	3332      	adds	r3, #50	@ 0x32
 8004198:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <UART_SetConfig+0x4e4>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041a4:	441c      	add	r4, r3
 80041a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041aa:	2200      	movs	r2, #0
 80041ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80041ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80041b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	1891      	adds	r1, r2, r2
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	415b      	adcs	r3, r3
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c4:	4641      	mov	r1, r8
 80041c6:	1851      	adds	r1, r2, r1
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	4649      	mov	r1, r9
 80041cc:	414b      	adcs	r3, r1
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041dc:	4659      	mov	r1, fp
 80041de:	00cb      	lsls	r3, r1, #3
 80041e0:	4651      	mov	r1, sl
 80041e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e6:	4651      	mov	r1, sl
 80041e8:	00ca      	lsls	r2, r1, #3
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	4642      	mov	r2, r8
 80041f2:	189b      	adds	r3, r3, r2
 80041f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041f6:	464b      	mov	r3, r9
 80041f8:	460a      	mov	r2, r1
 80041fa:	eb42 0303 	adc.w	r3, r2, r3
 80041fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	663b      	str	r3, [r7, #96]	@ 0x60
 800420a:	667a      	str	r2, [r7, #100]	@ 0x64
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004218:	4649      	mov	r1, r9
 800421a:	008b      	lsls	r3, r1, #2
 800421c:	4641      	mov	r1, r8
 800421e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004222:	4641      	mov	r1, r8
 8004224:	008a      	lsls	r2, r1, #2
 8004226:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800422a:	f7fc f841 	bl	80002b0 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <UART_SetConfig+0x4e4>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2164      	movs	r1, #100	@ 0x64
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	3332      	adds	r3, #50	@ 0x32
 8004246:	4a08      	ldr	r2, [pc, #32]	@ (8004268 <UART_SetConfig+0x4e4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 020f 	and.w	r2, r3, #15
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4422      	add	r2, r4
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004262:	46bd      	mov	sp, r7
 8004264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004268:	51eb851f 	.word	0x51eb851f

0800426c <std>:
 800426c:	2300      	movs	r3, #0
 800426e:	b510      	push	{r4, lr}
 8004270:	4604      	mov	r4, r0
 8004272:	e9c0 3300 	strd	r3, r3, [r0]
 8004276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800427a:	6083      	str	r3, [r0, #8]
 800427c:	8181      	strh	r1, [r0, #12]
 800427e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004280:	81c2      	strh	r2, [r0, #14]
 8004282:	6183      	str	r3, [r0, #24]
 8004284:	4619      	mov	r1, r3
 8004286:	2208      	movs	r2, #8
 8004288:	305c      	adds	r0, #92	@ 0x5c
 800428a:	f000 f906 	bl	800449a <memset>
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <std+0x58>)
 8004290:	6263      	str	r3, [r4, #36]	@ 0x24
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <std+0x5c>)
 8004294:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <std+0x60>)
 8004298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800429a:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <std+0x64>)
 800429c:	6323      	str	r3, [r4, #48]	@ 0x30
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <std+0x68>)
 80042a0:	6224      	str	r4, [r4, #32]
 80042a2:	429c      	cmp	r4, r3
 80042a4:	d006      	beq.n	80042b4 <std+0x48>
 80042a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042aa:	4294      	cmp	r4, r2
 80042ac:	d002      	beq.n	80042b4 <std+0x48>
 80042ae:	33d0      	adds	r3, #208	@ 0xd0
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d105      	bne.n	80042c0 <std+0x54>
 80042b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042bc:	f000 b966 	b.w	800458c <__retarget_lock_init_recursive>
 80042c0:	bd10      	pop	{r4, pc}
 80042c2:	bf00      	nop
 80042c4:	08004415 	.word	0x08004415
 80042c8:	08004437 	.word	0x08004437
 80042cc:	0800446f 	.word	0x0800446f
 80042d0:	08004493 	.word	0x08004493
 80042d4:	20000228 	.word	0x20000228

080042d8 <stdio_exit_handler>:
 80042d8:	4a02      	ldr	r2, [pc, #8]	@ (80042e4 <stdio_exit_handler+0xc>)
 80042da:	4903      	ldr	r1, [pc, #12]	@ (80042e8 <stdio_exit_handler+0x10>)
 80042dc:	4803      	ldr	r0, [pc, #12]	@ (80042ec <stdio_exit_handler+0x14>)
 80042de:	f000 b869 	b.w	80043b4 <_fwalk_sglue>
 80042e2:	bf00      	nop
 80042e4:	20000014 	.word	0x20000014
 80042e8:	08004e2d 	.word	0x08004e2d
 80042ec:	20000024 	.word	0x20000024

080042f0 <cleanup_stdio>:
 80042f0:	6841      	ldr	r1, [r0, #4]
 80042f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <cleanup_stdio+0x34>)
 80042f4:	4299      	cmp	r1, r3
 80042f6:	b510      	push	{r4, lr}
 80042f8:	4604      	mov	r4, r0
 80042fa:	d001      	beq.n	8004300 <cleanup_stdio+0x10>
 80042fc:	f000 fd96 	bl	8004e2c <_fflush_r>
 8004300:	68a1      	ldr	r1, [r4, #8]
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <cleanup_stdio+0x38>)
 8004304:	4299      	cmp	r1, r3
 8004306:	d002      	beq.n	800430e <cleanup_stdio+0x1e>
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fd8f 	bl	8004e2c <_fflush_r>
 800430e:	68e1      	ldr	r1, [r4, #12]
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <cleanup_stdio+0x3c>)
 8004312:	4299      	cmp	r1, r3
 8004314:	d004      	beq.n	8004320 <cleanup_stdio+0x30>
 8004316:	4620      	mov	r0, r4
 8004318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431c:	f000 bd86 	b.w	8004e2c <_fflush_r>
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	20000228 	.word	0x20000228
 8004328:	20000290 	.word	0x20000290
 800432c:	200002f8 	.word	0x200002f8

08004330 <global_stdio_init.part.0>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <global_stdio_init.part.0+0x30>)
 8004334:	4c0b      	ldr	r4, [pc, #44]	@ (8004364 <global_stdio_init.part.0+0x34>)
 8004336:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <global_stdio_init.part.0+0x38>)
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	4620      	mov	r0, r4
 800433c:	2200      	movs	r2, #0
 800433e:	2104      	movs	r1, #4
 8004340:	f7ff ff94 	bl	800426c <std>
 8004344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004348:	2201      	movs	r2, #1
 800434a:	2109      	movs	r1, #9
 800434c:	f7ff ff8e 	bl	800426c <std>
 8004350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004354:	2202      	movs	r2, #2
 8004356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435a:	2112      	movs	r1, #18
 800435c:	f7ff bf86 	b.w	800426c <std>
 8004360:	20000360 	.word	0x20000360
 8004364:	20000228 	.word	0x20000228
 8004368:	080042d9 	.word	0x080042d9

0800436c <__sfp_lock_acquire>:
 800436c:	4801      	ldr	r0, [pc, #4]	@ (8004374 <__sfp_lock_acquire+0x8>)
 800436e:	f000 b90e 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004372:	bf00      	nop
 8004374:	20000369 	.word	0x20000369

08004378 <__sfp_lock_release>:
 8004378:	4801      	ldr	r0, [pc, #4]	@ (8004380 <__sfp_lock_release+0x8>)
 800437a:	f000 b909 	b.w	8004590 <__retarget_lock_release_recursive>
 800437e:	bf00      	nop
 8004380:	20000369 	.word	0x20000369

08004384 <__sinit>:
 8004384:	b510      	push	{r4, lr}
 8004386:	4604      	mov	r4, r0
 8004388:	f7ff fff0 	bl	800436c <__sfp_lock_acquire>
 800438c:	6a23      	ldr	r3, [r4, #32]
 800438e:	b11b      	cbz	r3, 8004398 <__sinit+0x14>
 8004390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004394:	f7ff bff0 	b.w	8004378 <__sfp_lock_release>
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <__sinit+0x28>)
 800439a:	6223      	str	r3, [r4, #32]
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <__sinit+0x2c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f5      	bne.n	8004390 <__sinit+0xc>
 80043a4:	f7ff ffc4 	bl	8004330 <global_stdio_init.part.0>
 80043a8:	e7f2      	b.n	8004390 <__sinit+0xc>
 80043aa:	bf00      	nop
 80043ac:	080042f1 	.word	0x080042f1
 80043b0:	20000360 	.word	0x20000360

080043b4 <_fwalk_sglue>:
 80043b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043b8:	4607      	mov	r7, r0
 80043ba:	4688      	mov	r8, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	2600      	movs	r6, #0
 80043c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043c4:	f1b9 0901 	subs.w	r9, r9, #1
 80043c8:	d505      	bpl.n	80043d6 <_fwalk_sglue+0x22>
 80043ca:	6824      	ldr	r4, [r4, #0]
 80043cc:	2c00      	cmp	r4, #0
 80043ce:	d1f7      	bne.n	80043c0 <_fwalk_sglue+0xc>
 80043d0:	4630      	mov	r0, r6
 80043d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d907      	bls.n	80043ec <_fwalk_sglue+0x38>
 80043dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043e0:	3301      	adds	r3, #1
 80043e2:	d003      	beq.n	80043ec <_fwalk_sglue+0x38>
 80043e4:	4629      	mov	r1, r5
 80043e6:	4638      	mov	r0, r7
 80043e8:	47c0      	blx	r8
 80043ea:	4306      	orrs	r6, r0
 80043ec:	3568      	adds	r5, #104	@ 0x68
 80043ee:	e7e9      	b.n	80043c4 <_fwalk_sglue+0x10>

080043f0 <iprintf>:
 80043f0:	b40f      	push	{r0, r1, r2, r3}
 80043f2:	b507      	push	{r0, r1, r2, lr}
 80043f4:	4906      	ldr	r1, [pc, #24]	@ (8004410 <iprintf+0x20>)
 80043f6:	ab04      	add	r3, sp, #16
 80043f8:	6808      	ldr	r0, [r1, #0]
 80043fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80043fe:	6881      	ldr	r1, [r0, #8]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	f000 f9e9 	bl	80047d8 <_vfiprintf_r>
 8004406:	b003      	add	sp, #12
 8004408:	f85d eb04 	ldr.w	lr, [sp], #4
 800440c:	b004      	add	sp, #16
 800440e:	4770      	bx	lr
 8004410:	20000020 	.word	0x20000020

08004414 <__sread>:
 8004414:	b510      	push	{r4, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	f000 f868 	bl	80044f0 <_read_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	bfab      	itete	ge
 8004424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004426:	89a3      	ldrhlt	r3, [r4, #12]
 8004428:	181b      	addge	r3, r3, r0
 800442a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800442e:	bfac      	ite	ge
 8004430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004432:	81a3      	strhlt	r3, [r4, #12]
 8004434:	bd10      	pop	{r4, pc}

08004436 <__swrite>:
 8004436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	461f      	mov	r7, r3
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	05db      	lsls	r3, r3, #23
 8004440:	4605      	mov	r5, r0
 8004442:	460c      	mov	r4, r1
 8004444:	4616      	mov	r6, r2
 8004446:	d505      	bpl.n	8004454 <__swrite+0x1e>
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	2302      	movs	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	f000 f83c 	bl	80044cc <_lseek_r>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800445a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	4632      	mov	r2, r6
 8004462:	463b      	mov	r3, r7
 8004464:	4628      	mov	r0, r5
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f000 b853 	b.w	8004514 <_write_r>

0800446e <__sseek>:
 800446e:	b510      	push	{r4, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004476:	f000 f829 	bl	80044cc <_lseek_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	bf15      	itete	ne
 8004480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800448a:	81a3      	strheq	r3, [r4, #12]
 800448c:	bf18      	it	ne
 800448e:	81a3      	strhne	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__sclose>:
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 b809 	b.w	80044ac <_close_r>

0800449a <memset>:
 800449a:	4402      	add	r2, r0
 800449c:	4603      	mov	r3, r0
 800449e:	4293      	cmp	r3, r2
 80044a0:	d100      	bne.n	80044a4 <memset+0xa>
 80044a2:	4770      	bx	lr
 80044a4:	f803 1b01 	strb.w	r1, [r3], #1
 80044a8:	e7f9      	b.n	800449e <memset+0x4>
	...

080044ac <_close_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d06      	ldr	r5, [pc, #24]	@ (80044c8 <_close_r+0x1c>)
 80044b0:	2300      	movs	r3, #0
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	f7fc fe03 	bl	80010c2 <_close>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_close_r+0x1a>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_close_r+0x1a>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000364 	.word	0x20000364

080044cc <_lseek_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d07      	ldr	r5, [pc, #28]	@ (80044ec <_lseek_r+0x20>)
 80044d0:	4604      	mov	r4, r0
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7fc fe18 	bl	8001110 <_lseek>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_lseek_r+0x1e>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_lseek_r+0x1e>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000364 	.word	0x20000364

080044f0 <_read_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	@ (8004510 <_read_r+0x20>)
 80044f4:	4604      	mov	r4, r0
 80044f6:	4608      	mov	r0, r1
 80044f8:	4611      	mov	r1, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7fc fdc2 	bl	8001088 <_read>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_read_r+0x1e>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_read_r+0x1e>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000364 	.word	0x20000364

08004514 <_write_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d07      	ldr	r5, [pc, #28]	@ (8004534 <_write_r+0x20>)
 8004518:	4604      	mov	r4, r0
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	2200      	movs	r2, #0
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc fb3a 	bl	8000b9c <_write>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_write_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_write_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000364 	.word	0x20000364

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	@ (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000020 	.word	0x20000020

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	@ (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	@ (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	@ (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	@ (8004588 <__libc_init_array+0x44>)
 8004558:	f000 fdb8 	bl	80050cc <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	08005140 	.word	0x08005140
 8004580:	08005140 	.word	0x08005140
 8004584:	08005140 	.word	0x08005140
 8004588:	08005144 	.word	0x08005144

0800458c <__retarget_lock_init_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_acquire_recursive>:
 800458e:	4770      	bx	lr

08004590 <__retarget_lock_release_recursive>:
 8004590:	4770      	bx	lr
	...

08004594 <_free_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4605      	mov	r5, r0
 8004598:	2900      	cmp	r1, #0
 800459a:	d041      	beq.n	8004620 <_free_r+0x8c>
 800459c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a0:	1f0c      	subs	r4, r1, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bfb8      	it	lt
 80045a6:	18e4      	addlt	r4, r4, r3
 80045a8:	f000 f8e0 	bl	800476c <__malloc_lock>
 80045ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004624 <_free_r+0x90>)
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	b933      	cbnz	r3, 80045c0 <_free_r+0x2c>
 80045b2:	6063      	str	r3, [r4, #4]
 80045b4:	6014      	str	r4, [r2, #0]
 80045b6:	4628      	mov	r0, r5
 80045b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045bc:	f000 b8dc 	b.w	8004778 <__malloc_unlock>
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	d908      	bls.n	80045d6 <_free_r+0x42>
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	1821      	adds	r1, r4, r0
 80045c8:	428b      	cmp	r3, r1
 80045ca:	bf01      	itttt	eq
 80045cc:	6819      	ldreq	r1, [r3, #0]
 80045ce:	685b      	ldreq	r3, [r3, #4]
 80045d0:	1809      	addeq	r1, r1, r0
 80045d2:	6021      	streq	r1, [r4, #0]
 80045d4:	e7ed      	b.n	80045b2 <_free_r+0x1e>
 80045d6:	461a      	mov	r2, r3
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b10b      	cbz	r3, 80045e0 <_free_r+0x4c>
 80045dc:	42a3      	cmp	r3, r4
 80045de:	d9fa      	bls.n	80045d6 <_free_r+0x42>
 80045e0:	6811      	ldr	r1, [r2, #0]
 80045e2:	1850      	adds	r0, r2, r1
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d10b      	bne.n	8004600 <_free_r+0x6c>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4401      	add	r1, r0
 80045ec:	1850      	adds	r0, r2, r1
 80045ee:	4283      	cmp	r3, r0
 80045f0:	6011      	str	r1, [r2, #0]
 80045f2:	d1e0      	bne.n	80045b6 <_free_r+0x22>
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	6053      	str	r3, [r2, #4]
 80045fa:	4408      	add	r0, r1
 80045fc:	6010      	str	r0, [r2, #0]
 80045fe:	e7da      	b.n	80045b6 <_free_r+0x22>
 8004600:	d902      	bls.n	8004608 <_free_r+0x74>
 8004602:	230c      	movs	r3, #12
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	e7d6      	b.n	80045b6 <_free_r+0x22>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	1821      	adds	r1, r4, r0
 800460c:	428b      	cmp	r3, r1
 800460e:	bf04      	itt	eq
 8004610:	6819      	ldreq	r1, [r3, #0]
 8004612:	685b      	ldreq	r3, [r3, #4]
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	bf04      	itt	eq
 8004618:	1809      	addeq	r1, r1, r0
 800461a:	6021      	streq	r1, [r4, #0]
 800461c:	6054      	str	r4, [r2, #4]
 800461e:	e7ca      	b.n	80045b6 <_free_r+0x22>
 8004620:	bd38      	pop	{r3, r4, r5, pc}
 8004622:	bf00      	nop
 8004624:	20000370 	.word	0x20000370

08004628 <sbrk_aligned>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4e0f      	ldr	r6, [pc, #60]	@ (8004668 <sbrk_aligned+0x40>)
 800462c:	460c      	mov	r4, r1
 800462e:	6831      	ldr	r1, [r6, #0]
 8004630:	4605      	mov	r5, r0
 8004632:	b911      	cbnz	r1, 800463a <sbrk_aligned+0x12>
 8004634:	f000 fcb6 	bl	8004fa4 <_sbrk_r>
 8004638:	6030      	str	r0, [r6, #0]
 800463a:	4621      	mov	r1, r4
 800463c:	4628      	mov	r0, r5
 800463e:	f000 fcb1 	bl	8004fa4 <_sbrk_r>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	d103      	bne.n	800464e <sbrk_aligned+0x26>
 8004646:	f04f 34ff 	mov.w	r4, #4294967295
 800464a:	4620      	mov	r0, r4
 800464c:	bd70      	pop	{r4, r5, r6, pc}
 800464e:	1cc4      	adds	r4, r0, #3
 8004650:	f024 0403 	bic.w	r4, r4, #3
 8004654:	42a0      	cmp	r0, r4
 8004656:	d0f8      	beq.n	800464a <sbrk_aligned+0x22>
 8004658:	1a21      	subs	r1, r4, r0
 800465a:	4628      	mov	r0, r5
 800465c:	f000 fca2 	bl	8004fa4 <_sbrk_r>
 8004660:	3001      	adds	r0, #1
 8004662:	d1f2      	bne.n	800464a <sbrk_aligned+0x22>
 8004664:	e7ef      	b.n	8004646 <sbrk_aligned+0x1e>
 8004666:	bf00      	nop
 8004668:	2000036c 	.word	0x2000036c

0800466c <_malloc_r>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	1ccd      	adds	r5, r1, #3
 8004672:	f025 0503 	bic.w	r5, r5, #3
 8004676:	3508      	adds	r5, #8
 8004678:	2d0c      	cmp	r5, #12
 800467a:	bf38      	it	cc
 800467c:	250c      	movcc	r5, #12
 800467e:	2d00      	cmp	r5, #0
 8004680:	4606      	mov	r6, r0
 8004682:	db01      	blt.n	8004688 <_malloc_r+0x1c>
 8004684:	42a9      	cmp	r1, r5
 8004686:	d904      	bls.n	8004692 <_malloc_r+0x26>
 8004688:	230c      	movs	r3, #12
 800468a:	6033      	str	r3, [r6, #0]
 800468c:	2000      	movs	r0, #0
 800468e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004768 <_malloc_r+0xfc>
 8004696:	f000 f869 	bl	800476c <__malloc_lock>
 800469a:	f8d8 3000 	ldr.w	r3, [r8]
 800469e:	461c      	mov	r4, r3
 80046a0:	bb44      	cbnz	r4, 80046f4 <_malloc_r+0x88>
 80046a2:	4629      	mov	r1, r5
 80046a4:	4630      	mov	r0, r6
 80046a6:	f7ff ffbf 	bl	8004628 <sbrk_aligned>
 80046aa:	1c43      	adds	r3, r0, #1
 80046ac:	4604      	mov	r4, r0
 80046ae:	d158      	bne.n	8004762 <_malloc_r+0xf6>
 80046b0:	f8d8 4000 	ldr.w	r4, [r8]
 80046b4:	4627      	mov	r7, r4
 80046b6:	2f00      	cmp	r7, #0
 80046b8:	d143      	bne.n	8004742 <_malloc_r+0xd6>
 80046ba:	2c00      	cmp	r4, #0
 80046bc:	d04b      	beq.n	8004756 <_malloc_r+0xea>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	4639      	mov	r1, r7
 80046c2:	4630      	mov	r0, r6
 80046c4:	eb04 0903 	add.w	r9, r4, r3
 80046c8:	f000 fc6c 	bl	8004fa4 <_sbrk_r>
 80046cc:	4581      	cmp	r9, r0
 80046ce:	d142      	bne.n	8004756 <_malloc_r+0xea>
 80046d0:	6821      	ldr	r1, [r4, #0]
 80046d2:	1a6d      	subs	r5, r5, r1
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff ffa6 	bl	8004628 <sbrk_aligned>
 80046dc:	3001      	adds	r0, #1
 80046de:	d03a      	beq.n	8004756 <_malloc_r+0xea>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	442b      	add	r3, r5
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	bb62      	cbnz	r2, 8004748 <_malloc_r+0xdc>
 80046ee:	f8c8 7000 	str.w	r7, [r8]
 80046f2:	e00f      	b.n	8004714 <_malloc_r+0xa8>
 80046f4:	6822      	ldr	r2, [r4, #0]
 80046f6:	1b52      	subs	r2, r2, r5
 80046f8:	d420      	bmi.n	800473c <_malloc_r+0xd0>
 80046fa:	2a0b      	cmp	r2, #11
 80046fc:	d917      	bls.n	800472e <_malloc_r+0xc2>
 80046fe:	1961      	adds	r1, r4, r5
 8004700:	42a3      	cmp	r3, r4
 8004702:	6025      	str	r5, [r4, #0]
 8004704:	bf18      	it	ne
 8004706:	6059      	strne	r1, [r3, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	bf08      	it	eq
 800470c:	f8c8 1000 	streq.w	r1, [r8]
 8004710:	5162      	str	r2, [r4, r5]
 8004712:	604b      	str	r3, [r1, #4]
 8004714:	4630      	mov	r0, r6
 8004716:	f000 f82f 	bl	8004778 <__malloc_unlock>
 800471a:	f104 000b 	add.w	r0, r4, #11
 800471e:	1d23      	adds	r3, r4, #4
 8004720:	f020 0007 	bic.w	r0, r0, #7
 8004724:	1ac2      	subs	r2, r0, r3
 8004726:	bf1c      	itt	ne
 8004728:	1a1b      	subne	r3, r3, r0
 800472a:	50a3      	strne	r3, [r4, r2]
 800472c:	e7af      	b.n	800468e <_malloc_r+0x22>
 800472e:	6862      	ldr	r2, [r4, #4]
 8004730:	42a3      	cmp	r3, r4
 8004732:	bf0c      	ite	eq
 8004734:	f8c8 2000 	streq.w	r2, [r8]
 8004738:	605a      	strne	r2, [r3, #4]
 800473a:	e7eb      	b.n	8004714 <_malloc_r+0xa8>
 800473c:	4623      	mov	r3, r4
 800473e:	6864      	ldr	r4, [r4, #4]
 8004740:	e7ae      	b.n	80046a0 <_malloc_r+0x34>
 8004742:	463c      	mov	r4, r7
 8004744:	687f      	ldr	r7, [r7, #4]
 8004746:	e7b6      	b.n	80046b6 <_malloc_r+0x4a>
 8004748:	461a      	mov	r2, r3
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	42a3      	cmp	r3, r4
 800474e:	d1fb      	bne.n	8004748 <_malloc_r+0xdc>
 8004750:	2300      	movs	r3, #0
 8004752:	6053      	str	r3, [r2, #4]
 8004754:	e7de      	b.n	8004714 <_malloc_r+0xa8>
 8004756:	230c      	movs	r3, #12
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	4630      	mov	r0, r6
 800475c:	f000 f80c 	bl	8004778 <__malloc_unlock>
 8004760:	e794      	b.n	800468c <_malloc_r+0x20>
 8004762:	6005      	str	r5, [r0, #0]
 8004764:	e7d6      	b.n	8004714 <_malloc_r+0xa8>
 8004766:	bf00      	nop
 8004768:	20000370 	.word	0x20000370

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	@ (8004774 <__malloc_lock+0x8>)
 800476e:	f7ff bf0e 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	20000368 	.word	0x20000368

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	@ (8004780 <__malloc_unlock+0x8>)
 800477a:	f7ff bf09 	b.w	8004590 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	20000368 	.word	0x20000368

08004784 <__sfputc_r>:
 8004784:	6893      	ldr	r3, [r2, #8]
 8004786:	3b01      	subs	r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	b410      	push	{r4}
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	da08      	bge.n	80047a2 <__sfputc_r+0x1e>
 8004790:	6994      	ldr	r4, [r2, #24]
 8004792:	42a3      	cmp	r3, r4
 8004794:	db01      	blt.n	800479a <__sfputc_r+0x16>
 8004796:	290a      	cmp	r1, #10
 8004798:	d103      	bne.n	80047a2 <__sfputc_r+0x1e>
 800479a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479e:	f000 bb6d 	b.w	8004e7c <__swbuf_r>
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	1c58      	adds	r0, r3, #1
 80047a6:	6010      	str	r0, [r2, #0]
 80047a8:	7019      	strb	r1, [r3, #0]
 80047aa:	4608      	mov	r0, r1
 80047ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <__sfputs_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	18d5      	adds	r5, r2, r3
 80047bc:	42ac      	cmp	r4, r5
 80047be:	d101      	bne.n	80047c4 <__sfputs_r+0x12>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <__sfputs_r+0x22>
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	463a      	mov	r2, r7
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7ff ffda 	bl	8004784 <__sfputc_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d1f3      	bne.n	80047bc <__sfputs_r+0xa>
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d8 <_vfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	460d      	mov	r5, r1
 80047de:	b09d      	sub	sp, #116	@ 0x74
 80047e0:	4614      	mov	r4, r2
 80047e2:	4698      	mov	r8, r3
 80047e4:	4606      	mov	r6, r0
 80047e6:	b118      	cbz	r0, 80047f0 <_vfiprintf_r+0x18>
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	b90b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x18>
 80047ec:	f7ff fdca 	bl	8004384 <__sinit>
 80047f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d405      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	059a      	lsls	r2, r3, #22
 80047fa:	d402      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047fe:	f7ff fec6 	bl	800458e <__retarget_lock_acquire_recursive>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	d501      	bpl.n	800480c <_vfiprintf_r+0x34>
 8004808:	692b      	ldr	r3, [r5, #16]
 800480a:	b99b      	cbnz	r3, 8004834 <_vfiprintf_r+0x5c>
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f000 fb72 	bl	8004ef8 <__swsetup_r>
 8004814:	b170      	cbz	r0, 8004834 <_vfiprintf_r+0x5c>
 8004816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004818:	07dc      	lsls	r4, r3, #31
 800481a:	d504      	bpl.n	8004826 <_vfiprintf_r+0x4e>
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	b01d      	add	sp, #116	@ 0x74
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	0598      	lsls	r0, r3, #22
 800482a:	d4f7      	bmi.n	800481c <_vfiprintf_r+0x44>
 800482c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800482e:	f7ff feaf 	bl	8004590 <__retarget_lock_release_recursive>
 8004832:	e7f3      	b.n	800481c <_vfiprintf_r+0x44>
 8004834:	2300      	movs	r3, #0
 8004836:	9309      	str	r3, [sp, #36]	@ 0x24
 8004838:	2320      	movs	r3, #32
 800483a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800483e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004842:	2330      	movs	r3, #48	@ 0x30
 8004844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80049f4 <_vfiprintf_r+0x21c>
 8004848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800484c:	f04f 0901 	mov.w	r9, #1
 8004850:	4623      	mov	r3, r4
 8004852:	469a      	mov	sl, r3
 8004854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004858:	b10a      	cbz	r2, 800485e <_vfiprintf_r+0x86>
 800485a:	2a25      	cmp	r2, #37	@ 0x25
 800485c:	d1f9      	bne.n	8004852 <_vfiprintf_r+0x7a>
 800485e:	ebba 0b04 	subs.w	fp, sl, r4
 8004862:	d00b      	beq.n	800487c <_vfiprintf_r+0xa4>
 8004864:	465b      	mov	r3, fp
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff ffa1 	bl	80047b2 <__sfputs_r>
 8004870:	3001      	adds	r0, #1
 8004872:	f000 80a7 	beq.w	80049c4 <_vfiprintf_r+0x1ec>
 8004876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004878:	445a      	add	r2, fp
 800487a:	9209      	str	r2, [sp, #36]	@ 0x24
 800487c:	f89a 3000 	ldrb.w	r3, [sl]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 809f 	beq.w	80049c4 <_vfiprintf_r+0x1ec>
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004890:	f10a 0a01 	add.w	sl, sl, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800489c:	931a      	str	r3, [sp, #104]	@ 0x68
 800489e:	4654      	mov	r4, sl
 80048a0:	2205      	movs	r2, #5
 80048a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a6:	4853      	ldr	r0, [pc, #332]	@ (80049f4 <_vfiprintf_r+0x21c>)
 80048a8:	f7fb fcb2 	bl	8000210 <memchr>
 80048ac:	9a04      	ldr	r2, [sp, #16]
 80048ae:	b9d8      	cbnz	r0, 80048e8 <_vfiprintf_r+0x110>
 80048b0:	06d1      	lsls	r1, r2, #27
 80048b2:	bf44      	itt	mi
 80048b4:	2320      	movmi	r3, #32
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ba:	0713      	lsls	r3, r2, #28
 80048bc:	bf44      	itt	mi
 80048be:	232b      	movmi	r3, #43	@ 0x2b
 80048c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ca:	d015      	beq.n	80048f8 <_vfiprintf_r+0x120>
 80048cc:	9a07      	ldr	r2, [sp, #28]
 80048ce:	4654      	mov	r4, sl
 80048d0:	2000      	movs	r0, #0
 80048d2:	f04f 0c0a 	mov.w	ip, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048dc:	3b30      	subs	r3, #48	@ 0x30
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d94b      	bls.n	800497a <_vfiprintf_r+0x1a2>
 80048e2:	b1b0      	cbz	r0, 8004912 <_vfiprintf_r+0x13a>
 80048e4:	9207      	str	r2, [sp, #28]
 80048e6:	e014      	b.n	8004912 <_vfiprintf_r+0x13a>
 80048e8:	eba0 0308 	sub.w	r3, r0, r8
 80048ec:	fa09 f303 	lsl.w	r3, r9, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	46a2      	mov	sl, r4
 80048f6:	e7d2      	b.n	800489e <_vfiprintf_r+0xc6>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9103      	str	r1, [sp, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfbb      	ittet	lt
 8004904:	425b      	neglt	r3, r3
 8004906:	f042 0202 	orrlt.w	r2, r2, #2
 800490a:	9307      	strge	r3, [sp, #28]
 800490c:	9307      	strlt	r3, [sp, #28]
 800490e:	bfb8      	it	lt
 8004910:	9204      	strlt	r2, [sp, #16]
 8004912:	7823      	ldrb	r3, [r4, #0]
 8004914:	2b2e      	cmp	r3, #46	@ 0x2e
 8004916:	d10a      	bne.n	800492e <_vfiprintf_r+0x156>
 8004918:	7863      	ldrb	r3, [r4, #1]
 800491a:	2b2a      	cmp	r3, #42	@ 0x2a
 800491c:	d132      	bne.n	8004984 <_vfiprintf_r+0x1ac>
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	9203      	str	r2, [sp, #12]
 8004926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800492a:	3402      	adds	r4, #2
 800492c:	9305      	str	r3, [sp, #20]
 800492e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a04 <_vfiprintf_r+0x22c>
 8004932:	7821      	ldrb	r1, [r4, #0]
 8004934:	2203      	movs	r2, #3
 8004936:	4650      	mov	r0, sl
 8004938:	f7fb fc6a 	bl	8000210 <memchr>
 800493c:	b138      	cbz	r0, 800494e <_vfiprintf_r+0x176>
 800493e:	9b04      	ldr	r3, [sp, #16]
 8004940:	eba0 000a 	sub.w	r0, r0, sl
 8004944:	2240      	movs	r2, #64	@ 0x40
 8004946:	4082      	lsls	r2, r0
 8004948:	4313      	orrs	r3, r2
 800494a:	3401      	adds	r4, #1
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004952:	4829      	ldr	r0, [pc, #164]	@ (80049f8 <_vfiprintf_r+0x220>)
 8004954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004958:	2206      	movs	r2, #6
 800495a:	f7fb fc59 	bl	8000210 <memchr>
 800495e:	2800      	cmp	r0, #0
 8004960:	d03f      	beq.n	80049e2 <_vfiprintf_r+0x20a>
 8004962:	4b26      	ldr	r3, [pc, #152]	@ (80049fc <_vfiprintf_r+0x224>)
 8004964:	bb1b      	cbnz	r3, 80049ae <_vfiprintf_r+0x1d6>
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	3307      	adds	r3, #7
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	3308      	adds	r3, #8
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004974:	443b      	add	r3, r7
 8004976:	9309      	str	r3, [sp, #36]	@ 0x24
 8004978:	e76a      	b.n	8004850 <_vfiprintf_r+0x78>
 800497a:	fb0c 3202 	mla	r2, ip, r2, r3
 800497e:	460c      	mov	r4, r1
 8004980:	2001      	movs	r0, #1
 8004982:	e7a8      	b.n	80048d6 <_vfiprintf_r+0xfe>
 8004984:	2300      	movs	r3, #0
 8004986:	3401      	adds	r4, #1
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	4619      	mov	r1, r3
 800498c:	f04f 0c0a 	mov.w	ip, #10
 8004990:	4620      	mov	r0, r4
 8004992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004996:	3a30      	subs	r2, #48	@ 0x30
 8004998:	2a09      	cmp	r2, #9
 800499a:	d903      	bls.n	80049a4 <_vfiprintf_r+0x1cc>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0c6      	beq.n	800492e <_vfiprintf_r+0x156>
 80049a0:	9105      	str	r1, [sp, #20]
 80049a2:	e7c4      	b.n	800492e <_vfiprintf_r+0x156>
 80049a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a8:	4604      	mov	r4, r0
 80049aa:	2301      	movs	r3, #1
 80049ac:	e7f0      	b.n	8004990 <_vfiprintf_r+0x1b8>
 80049ae:	ab03      	add	r3, sp, #12
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	462a      	mov	r2, r5
 80049b4:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <_vfiprintf_r+0x228>)
 80049b6:	a904      	add	r1, sp, #16
 80049b8:	4630      	mov	r0, r6
 80049ba:	f3af 8000 	nop.w
 80049be:	4607      	mov	r7, r0
 80049c0:	1c78      	adds	r0, r7, #1
 80049c2:	d1d6      	bne.n	8004972 <_vfiprintf_r+0x19a>
 80049c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049c6:	07d9      	lsls	r1, r3, #31
 80049c8:	d405      	bmi.n	80049d6 <_vfiprintf_r+0x1fe>
 80049ca:	89ab      	ldrh	r3, [r5, #12]
 80049cc:	059a      	lsls	r2, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_vfiprintf_r+0x1fe>
 80049d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049d2:	f7ff fddd 	bl	8004590 <__retarget_lock_release_recursive>
 80049d6:	89ab      	ldrh	r3, [r5, #12]
 80049d8:	065b      	lsls	r3, r3, #25
 80049da:	f53f af1f 	bmi.w	800481c <_vfiprintf_r+0x44>
 80049de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049e0:	e71e      	b.n	8004820 <_vfiprintf_r+0x48>
 80049e2:	ab03      	add	r3, sp, #12
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	462a      	mov	r2, r5
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <_vfiprintf_r+0x228>)
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	4630      	mov	r0, r6
 80049ee:	f000 f879 	bl	8004ae4 <_printf_i>
 80049f2:	e7e4      	b.n	80049be <_vfiprintf_r+0x1e6>
 80049f4:	08005104 	.word	0x08005104
 80049f8:	0800510e 	.word	0x0800510e
 80049fc:	00000000 	.word	0x00000000
 8004a00:	080047b3 	.word	0x080047b3
 8004a04:	0800510a 	.word	0x0800510a

08004a08 <_printf_common>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4616      	mov	r6, r2
 8004a0e:	4698      	mov	r8, r3
 8004a10:	688a      	ldr	r2, [r1, #8]
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bfb8      	it	lt
 8004a1c:	4613      	movlt	r3, r2
 8004a1e:	6033      	str	r3, [r6, #0]
 8004a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a24:	4607      	mov	r7, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	b10a      	cbz	r2, 8004a2e <_printf_common+0x26>
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	6033      	str	r3, [r6, #0]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	0699      	lsls	r1, r3, #26
 8004a32:	bf42      	ittt	mi
 8004a34:	6833      	ldrmi	r3, [r6, #0]
 8004a36:	3302      	addmi	r3, #2
 8004a38:	6033      	strmi	r3, [r6, #0]
 8004a3a:	6825      	ldr	r5, [r4, #0]
 8004a3c:	f015 0506 	ands.w	r5, r5, #6
 8004a40:	d106      	bne.n	8004a50 <_printf_common+0x48>
 8004a42:	f104 0a19 	add.w	sl, r4, #25
 8004a46:	68e3      	ldr	r3, [r4, #12]
 8004a48:	6832      	ldr	r2, [r6, #0]
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	42ab      	cmp	r3, r5
 8004a4e:	dc26      	bgt.n	8004a9e <_printf_common+0x96>
 8004a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	3b00      	subs	r3, #0
 8004a58:	bf18      	it	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	0692      	lsls	r2, r2, #26
 8004a5e:	d42b      	bmi.n	8004ab8 <_printf_common+0xb0>
 8004a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a64:	4641      	mov	r1, r8
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c8      	blx	r9
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d01e      	beq.n	8004aac <_printf_common+0xa4>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	f003 0306 	and.w	r3, r3, #6
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf02      	ittt	eq
 8004a7a:	68e5      	ldreq	r5, [r4, #12]
 8004a7c:	6833      	ldreq	r3, [r6, #0]
 8004a7e:	1aed      	subeq	r5, r5, r3
 8004a80:	68a3      	ldr	r3, [r4, #8]
 8004a82:	bf0c      	ite	eq
 8004a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a88:	2500      	movne	r5, #0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bfc4      	itt	gt
 8004a8e:	1a9b      	subgt	r3, r3, r2
 8004a90:	18ed      	addgt	r5, r5, r3
 8004a92:	2600      	movs	r6, #0
 8004a94:	341a      	adds	r4, #26
 8004a96:	42b5      	cmp	r5, r6
 8004a98:	d11a      	bne.n	8004ad0 <_printf_common+0xc8>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e008      	b.n	8004ab0 <_printf_common+0xa8>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	47c8      	blx	r9
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d103      	bne.n	8004ab4 <_printf_common+0xac>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	e7c6      	b.n	8004a46 <_printf_common+0x3e>
 8004ab8:	18e1      	adds	r1, r4, r3
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	2030      	movs	r0, #48	@ 0x30
 8004abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ac2:	4422      	add	r2, r4
 8004ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004acc:	3302      	adds	r3, #2
 8004ace:	e7c7      	b.n	8004a60 <_printf_common+0x58>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	47c8      	blx	r9
 8004ada:	3001      	adds	r0, #1
 8004adc:	d0e6      	beq.n	8004aac <_printf_common+0xa4>
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7d9      	b.n	8004a96 <_printf_common+0x8e>
	...

08004ae4 <_printf_i>:
 8004ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae8:	7e0f      	ldrb	r7, [r1, #24]
 8004aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004aec:	2f78      	cmp	r7, #120	@ 0x78
 8004aee:	4691      	mov	r9, r2
 8004af0:	4680      	mov	r8, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	469a      	mov	sl, r3
 8004af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004afa:	d807      	bhi.n	8004b0c <_printf_i+0x28>
 8004afc:	2f62      	cmp	r7, #98	@ 0x62
 8004afe:	d80a      	bhi.n	8004b16 <_printf_i+0x32>
 8004b00:	2f00      	cmp	r7, #0
 8004b02:	f000 80d2 	beq.w	8004caa <_printf_i+0x1c6>
 8004b06:	2f58      	cmp	r7, #88	@ 0x58
 8004b08:	f000 80b9 	beq.w	8004c7e <_printf_i+0x19a>
 8004b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b14:	e03a      	b.n	8004b8c <_printf_i+0xa8>
 8004b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b1a:	2b15      	cmp	r3, #21
 8004b1c:	d8f6      	bhi.n	8004b0c <_printf_i+0x28>
 8004b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b24 <_printf_i+0x40>)
 8004b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b24:	08004b7d 	.word	0x08004b7d
 8004b28:	08004b91 	.word	0x08004b91
 8004b2c:	08004b0d 	.word	0x08004b0d
 8004b30:	08004b0d 	.word	0x08004b0d
 8004b34:	08004b0d 	.word	0x08004b0d
 8004b38:	08004b0d 	.word	0x08004b0d
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004b0d 	.word	0x08004b0d
 8004b44:	08004b0d 	.word	0x08004b0d
 8004b48:	08004b0d 	.word	0x08004b0d
 8004b4c:	08004b0d 	.word	0x08004b0d
 8004b50:	08004c91 	.word	0x08004c91
 8004b54:	08004bbb 	.word	0x08004bbb
 8004b58:	08004c4b 	.word	0x08004c4b
 8004b5c:	08004b0d 	.word	0x08004b0d
 8004b60:	08004b0d 	.word	0x08004b0d
 8004b64:	08004cb3 	.word	0x08004cb3
 8004b68:	08004b0d 	.word	0x08004b0d
 8004b6c:	08004bbb 	.word	0x08004bbb
 8004b70:	08004b0d 	.word	0x08004b0d
 8004b74:	08004b0d 	.word	0x08004b0d
 8004b78:	08004c53 	.word	0x08004c53
 8004b7c:	6833      	ldr	r3, [r6, #0]
 8004b7e:	1d1a      	adds	r2, r3, #4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6032      	str	r2, [r6, #0]
 8004b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e09d      	b.n	8004ccc <_printf_i+0x1e8>
 8004b90:	6833      	ldr	r3, [r6, #0]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	6031      	str	r1, [r6, #0]
 8004b98:	0606      	lsls	r6, r0, #24
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0xbc>
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	e003      	b.n	8004ba8 <_printf_i+0xc4>
 8004ba0:	0645      	lsls	r5, r0, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0xb8>
 8004ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	da03      	bge.n	8004bb4 <_printf_i+0xd0>
 8004bac:	232d      	movs	r3, #45	@ 0x2d
 8004bae:	426d      	negs	r5, r5
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb4:	4859      	ldr	r0, [pc, #356]	@ (8004d1c <_printf_i+0x238>)
 8004bb6:	230a      	movs	r3, #10
 8004bb8:	e011      	b.n	8004bde <_printf_i+0xfa>
 8004bba:	6821      	ldr	r1, [r4, #0]
 8004bbc:	6833      	ldr	r3, [r6, #0]
 8004bbe:	0608      	lsls	r0, r1, #24
 8004bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bc4:	d402      	bmi.n	8004bcc <_printf_i+0xe8>
 8004bc6:	0649      	lsls	r1, r1, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b2ad      	uxthmi	r5, r5
 8004bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bce:	4853      	ldr	r0, [pc, #332]	@ (8004d1c <_printf_i+0x238>)
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	bf14      	ite	ne
 8004bd4:	230a      	movne	r3, #10
 8004bd6:	2308      	moveq	r3, #8
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bde:	6866      	ldr	r6, [r4, #4]
 8004be0:	60a6      	str	r6, [r4, #8]
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	bfa2      	ittt	ge
 8004be6:	6821      	ldrge	r1, [r4, #0]
 8004be8:	f021 0104 	bicge.w	r1, r1, #4
 8004bec:	6021      	strge	r1, [r4, #0]
 8004bee:	b90d      	cbnz	r5, 8004bf4 <_printf_i+0x110>
 8004bf0:	2e00      	cmp	r6, #0
 8004bf2:	d04b      	beq.n	8004c8c <_printf_i+0x1a8>
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8004bfe:	5dc7      	ldrb	r7, [r0, r7]
 8004c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c04:	462f      	mov	r7, r5
 8004c06:	42bb      	cmp	r3, r7
 8004c08:	460d      	mov	r5, r1
 8004c0a:	d9f4      	bls.n	8004bf6 <_printf_i+0x112>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d10b      	bne.n	8004c28 <_printf_i+0x144>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	07df      	lsls	r7, r3, #31
 8004c14:	d508      	bpl.n	8004c28 <_printf_i+0x144>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	6861      	ldr	r1, [r4, #4]
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	bfde      	ittt	le
 8004c1e:	2330      	movle	r3, #48	@ 0x30
 8004c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c28:	1b92      	subs	r2, r2, r6
 8004c2a:	6122      	str	r2, [r4, #16]
 8004c2c:	f8cd a000 	str.w	sl, [sp]
 8004c30:	464b      	mov	r3, r9
 8004c32:	aa03      	add	r2, sp, #12
 8004c34:	4621      	mov	r1, r4
 8004c36:	4640      	mov	r0, r8
 8004c38:	f7ff fee6 	bl	8004a08 <_printf_common>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d14a      	bne.n	8004cd6 <_printf_i+0x1f2>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	b004      	add	sp, #16
 8004c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	4833      	ldr	r0, [pc, #204]	@ (8004d20 <_printf_i+0x23c>)
 8004c54:	2778      	movs	r7, #120	@ 0x78
 8004c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	6831      	ldr	r1, [r6, #0]
 8004c5e:	061f      	lsls	r7, r3, #24
 8004c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c64:	d402      	bmi.n	8004c6c <_printf_i+0x188>
 8004c66:	065f      	lsls	r7, r3, #25
 8004c68:	bf48      	it	mi
 8004c6a:	b2ad      	uxthmi	r5, r5
 8004c6c:	6031      	str	r1, [r6, #0]
 8004c6e:	07d9      	lsls	r1, r3, #31
 8004c70:	bf44      	itt	mi
 8004c72:	f043 0320 	orrmi.w	r3, r3, #32
 8004c76:	6023      	strmi	r3, [r4, #0]
 8004c78:	b11d      	cbz	r5, 8004c82 <_printf_i+0x19e>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	e7ac      	b.n	8004bd8 <_printf_i+0xf4>
 8004c7e:	4827      	ldr	r0, [pc, #156]	@ (8004d1c <_printf_i+0x238>)
 8004c80:	e7e9      	b.n	8004c56 <_printf_i+0x172>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	f023 0320 	bic.w	r3, r3, #32
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	e7f6      	b.n	8004c7a <_printf_i+0x196>
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	e7bd      	b.n	8004c0c <_printf_i+0x128>
 8004c90:	6833      	ldr	r3, [r6, #0]
 8004c92:	6825      	ldr	r5, [r4, #0]
 8004c94:	6961      	ldr	r1, [r4, #20]
 8004c96:	1d18      	adds	r0, r3, #4
 8004c98:	6030      	str	r0, [r6, #0]
 8004c9a:	062e      	lsls	r6, r5, #24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0x1c0>
 8004ca0:	6019      	str	r1, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0x1c6>
 8004ca4:	0668      	lsls	r0, r5, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0x1bc>
 8004ca8:	8019      	strh	r1, [r3, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	4616      	mov	r6, r2
 8004cb0:	e7bc      	b.n	8004c2c <_printf_i+0x148>
 8004cb2:	6833      	ldr	r3, [r6, #0]
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	6032      	str	r2, [r6, #0]
 8004cb8:	681e      	ldr	r6, [r3, #0]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7fb faa6 	bl	8000210 <memchr>
 8004cc4:	b108      	cbz	r0, 8004cca <_printf_i+0x1e6>
 8004cc6:	1b80      	subs	r0, r0, r6
 8004cc8:	6060      	str	r0, [r4, #4]
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd4:	e7aa      	b.n	8004c2c <_printf_i+0x148>
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4649      	mov	r1, r9
 8004cdc:	4640      	mov	r0, r8
 8004cde:	47d0      	blx	sl
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d0ad      	beq.n	8004c40 <_printf_i+0x15c>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	079b      	lsls	r3, r3, #30
 8004ce8:	d413      	bmi.n	8004d12 <_printf_i+0x22e>
 8004cea:	68e0      	ldr	r0, [r4, #12]
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	4298      	cmp	r0, r3
 8004cf0:	bfb8      	it	lt
 8004cf2:	4618      	movlt	r0, r3
 8004cf4:	e7a6      	b.n	8004c44 <_printf_i+0x160>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	47d0      	blx	sl
 8004d00:	3001      	adds	r0, #1
 8004d02:	d09d      	beq.n	8004c40 <_printf_i+0x15c>
 8004d04:	3501      	adds	r5, #1
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	9903      	ldr	r1, [sp, #12]
 8004d0a:	1a5b      	subs	r3, r3, r1
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dcf2      	bgt.n	8004cf6 <_printf_i+0x212>
 8004d10:	e7eb      	b.n	8004cea <_printf_i+0x206>
 8004d12:	2500      	movs	r5, #0
 8004d14:	f104 0619 	add.w	r6, r4, #25
 8004d18:	e7f5      	b.n	8004d06 <_printf_i+0x222>
 8004d1a:	bf00      	nop
 8004d1c:	08005115 	.word	0x08005115
 8004d20:	08005126 	.word	0x08005126

08004d24 <__sflush_r>:
 8004d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	0716      	lsls	r6, r2, #28
 8004d2e:	4605      	mov	r5, r0
 8004d30:	460c      	mov	r4, r1
 8004d32:	d454      	bmi.n	8004dde <__sflush_r+0xba>
 8004d34:	684b      	ldr	r3, [r1, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dc02      	bgt.n	8004d40 <__sflush_r+0x1c>
 8004d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dd48      	ble.n	8004dd2 <__sflush_r+0xae>
 8004d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	d045      	beq.n	8004dd2 <__sflush_r+0xae>
 8004d46:	2300      	movs	r3, #0
 8004d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d4c:	682f      	ldr	r7, [r5, #0]
 8004d4e:	6a21      	ldr	r1, [r4, #32]
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	d030      	beq.n	8004db6 <__sflush_r+0x92>
 8004d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	0759      	lsls	r1, r3, #29
 8004d5a:	d505      	bpl.n	8004d68 <__sflush_r+0x44>
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d62:	b10b      	cbz	r3, 8004d68 <__sflush_r+0x44>
 8004d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d6c:	6a21      	ldr	r1, [r4, #32]
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b0      	blx	r6
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	d106      	bne.n	8004d86 <__sflush_r+0x62>
 8004d78:	6829      	ldr	r1, [r5, #0]
 8004d7a:	291d      	cmp	r1, #29
 8004d7c:	d82b      	bhi.n	8004dd6 <__sflush_r+0xb2>
 8004d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e28 <__sflush_r+0x104>)
 8004d80:	410a      	asrs	r2, r1
 8004d82:	07d6      	lsls	r6, r2, #31
 8004d84:	d427      	bmi.n	8004dd6 <__sflush_r+0xb2>
 8004d86:	2200      	movs	r2, #0
 8004d88:	6062      	str	r2, [r4, #4]
 8004d8a:	04d9      	lsls	r1, r3, #19
 8004d8c:	6922      	ldr	r2, [r4, #16]
 8004d8e:	6022      	str	r2, [r4, #0]
 8004d90:	d504      	bpl.n	8004d9c <__sflush_r+0x78>
 8004d92:	1c42      	adds	r2, r0, #1
 8004d94:	d101      	bne.n	8004d9a <__sflush_r+0x76>
 8004d96:	682b      	ldr	r3, [r5, #0]
 8004d98:	b903      	cbnz	r3, 8004d9c <__sflush_r+0x78>
 8004d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d9e:	602f      	str	r7, [r5, #0]
 8004da0:	b1b9      	cbz	r1, 8004dd2 <__sflush_r+0xae>
 8004da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004da6:	4299      	cmp	r1, r3
 8004da8:	d002      	beq.n	8004db0 <__sflush_r+0x8c>
 8004daa:	4628      	mov	r0, r5
 8004dac:	f7ff fbf2 	bl	8004594 <_free_r>
 8004db0:	2300      	movs	r3, #0
 8004db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004db4:	e00d      	b.n	8004dd2 <__sflush_r+0xae>
 8004db6:	2301      	movs	r3, #1
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b0      	blx	r6
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	1c50      	adds	r0, r2, #1
 8004dc0:	d1c9      	bne.n	8004d56 <__sflush_r+0x32>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0c6      	beq.n	8004d56 <__sflush_r+0x32>
 8004dc8:	2b1d      	cmp	r3, #29
 8004dca:	d001      	beq.n	8004dd0 <__sflush_r+0xac>
 8004dcc:	2b16      	cmp	r3, #22
 8004dce:	d11e      	bne.n	8004e0e <__sflush_r+0xea>
 8004dd0:	602f      	str	r7, [r5, #0]
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e022      	b.n	8004e1c <__sflush_r+0xf8>
 8004dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dda:	b21b      	sxth	r3, r3
 8004ddc:	e01b      	b.n	8004e16 <__sflush_r+0xf2>
 8004dde:	690f      	ldr	r7, [r1, #16]
 8004de0:	2f00      	cmp	r7, #0
 8004de2:	d0f6      	beq.n	8004dd2 <__sflush_r+0xae>
 8004de4:	0793      	lsls	r3, r2, #30
 8004de6:	680e      	ldr	r6, [r1, #0]
 8004de8:	bf08      	it	eq
 8004dea:	694b      	ldreq	r3, [r1, #20]
 8004dec:	600f      	str	r7, [r1, #0]
 8004dee:	bf18      	it	ne
 8004df0:	2300      	movne	r3, #0
 8004df2:	eba6 0807 	sub.w	r8, r6, r7
 8004df6:	608b      	str	r3, [r1, #8]
 8004df8:	f1b8 0f00 	cmp.w	r8, #0
 8004dfc:	dde9      	ble.n	8004dd2 <__sflush_r+0xae>
 8004dfe:	6a21      	ldr	r1, [r4, #32]
 8004e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e02:	4643      	mov	r3, r8
 8004e04:	463a      	mov	r2, r7
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b0      	blx	r6
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	dc08      	bgt.n	8004e20 <__sflush_r+0xfc>
 8004e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e20:	4407      	add	r7, r0
 8004e22:	eba8 0800 	sub.w	r8, r8, r0
 8004e26:	e7e7      	b.n	8004df8 <__sflush_r+0xd4>
 8004e28:	dfbffffe 	.word	0xdfbffffe

08004e2c <_fflush_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	4605      	mov	r5, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	b913      	cbnz	r3, 8004e3c <_fflush_r+0x10>
 8004e36:	2500      	movs	r5, #0
 8004e38:	4628      	mov	r0, r5
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	b118      	cbz	r0, 8004e46 <_fflush_r+0x1a>
 8004e3e:	6a03      	ldr	r3, [r0, #32]
 8004e40:	b90b      	cbnz	r3, 8004e46 <_fflush_r+0x1a>
 8004e42:	f7ff fa9f 	bl	8004384 <__sinit>
 8004e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f3      	beq.n	8004e36 <_fflush_r+0xa>
 8004e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e50:	07d0      	lsls	r0, r2, #31
 8004e52:	d404      	bmi.n	8004e5e <_fflush_r+0x32>
 8004e54:	0599      	lsls	r1, r3, #22
 8004e56:	d402      	bmi.n	8004e5e <_fflush_r+0x32>
 8004e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e5a:	f7ff fb98 	bl	800458e <__retarget_lock_acquire_recursive>
 8004e5e:	4628      	mov	r0, r5
 8004e60:	4621      	mov	r1, r4
 8004e62:	f7ff ff5f 	bl	8004d24 <__sflush_r>
 8004e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e68:	07da      	lsls	r2, r3, #31
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	d4e4      	bmi.n	8004e38 <_fflush_r+0xc>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	059b      	lsls	r3, r3, #22
 8004e72:	d4e1      	bmi.n	8004e38 <_fflush_r+0xc>
 8004e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e76:	f7ff fb8b 	bl	8004590 <__retarget_lock_release_recursive>
 8004e7a:	e7dd      	b.n	8004e38 <_fflush_r+0xc>

08004e7c <__swbuf_r>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	460e      	mov	r6, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	4605      	mov	r5, r0
 8004e84:	b118      	cbz	r0, 8004e8e <__swbuf_r+0x12>
 8004e86:	6a03      	ldr	r3, [r0, #32]
 8004e88:	b90b      	cbnz	r3, 8004e8e <__swbuf_r+0x12>
 8004e8a:	f7ff fa7b 	bl	8004384 <__sinit>
 8004e8e:	69a3      	ldr	r3, [r4, #24]
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	071a      	lsls	r2, r3, #28
 8004e96:	d501      	bpl.n	8004e9c <__swbuf_r+0x20>
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	b943      	cbnz	r3, 8004eae <__swbuf_r+0x32>
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f82a 	bl	8004ef8 <__swsetup_r>
 8004ea4:	b118      	cbz	r0, 8004eae <__swbuf_r+0x32>
 8004ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8004eaa:	4638      	mov	r0, r7
 8004eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6922      	ldr	r2, [r4, #16]
 8004eb2:	1a98      	subs	r0, r3, r2
 8004eb4:	6963      	ldr	r3, [r4, #20]
 8004eb6:	b2f6      	uxtb	r6, r6
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	4637      	mov	r7, r6
 8004ebc:	dc05      	bgt.n	8004eca <__swbuf_r+0x4e>
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f7ff ffb3 	bl	8004e2c <_fflush_r>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d1ed      	bne.n	8004ea6 <__swbuf_r+0x2a>
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	6022      	str	r2, [r4, #0]
 8004ed6:	701e      	strb	r6, [r3, #0]
 8004ed8:	6962      	ldr	r2, [r4, #20]
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d004      	beq.n	8004eea <__swbuf_r+0x6e>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	07db      	lsls	r3, r3, #31
 8004ee4:	d5e1      	bpl.n	8004eaa <__swbuf_r+0x2e>
 8004ee6:	2e0a      	cmp	r6, #10
 8004ee8:	d1df      	bne.n	8004eaa <__swbuf_r+0x2e>
 8004eea:	4621      	mov	r1, r4
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7ff ff9d 	bl	8004e2c <_fflush_r>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d0d9      	beq.n	8004eaa <__swbuf_r+0x2e>
 8004ef6:	e7d6      	b.n	8004ea6 <__swbuf_r+0x2a>

08004ef8 <__swsetup_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <__swsetup_r+0xa8>)
 8004efc:	4605      	mov	r5, r0
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	460c      	mov	r4, r1
 8004f02:	b118      	cbz	r0, 8004f0c <__swsetup_r+0x14>
 8004f04:	6a03      	ldr	r3, [r0, #32]
 8004f06:	b90b      	cbnz	r3, 8004f0c <__swsetup_r+0x14>
 8004f08:	f7ff fa3c 	bl	8004384 <__sinit>
 8004f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f10:	0719      	lsls	r1, r3, #28
 8004f12:	d422      	bmi.n	8004f5a <__swsetup_r+0x62>
 8004f14:	06da      	lsls	r2, r3, #27
 8004f16:	d407      	bmi.n	8004f28 <__swsetup_r+0x30>
 8004f18:	2209      	movs	r2, #9
 8004f1a:	602a      	str	r2, [r5, #0]
 8004f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295
 8004f26:	e033      	b.n	8004f90 <__swsetup_r+0x98>
 8004f28:	0758      	lsls	r0, r3, #29
 8004f2a:	d512      	bpl.n	8004f52 <__swsetup_r+0x5a>
 8004f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f2e:	b141      	cbz	r1, 8004f42 <__swsetup_r+0x4a>
 8004f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f34:	4299      	cmp	r1, r3
 8004f36:	d002      	beq.n	8004f3e <__swsetup_r+0x46>
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7ff fb2b 	bl	8004594 <_free_r>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6063      	str	r3, [r4, #4]
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f043 0308 	orr.w	r3, r3, #8
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	b94b      	cbnz	r3, 8004f72 <__swsetup_r+0x7a>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f68:	d003      	beq.n	8004f72 <__swsetup_r+0x7a>
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 f84f 	bl	8005010 <__smakebuf_r>
 8004f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f76:	f013 0201 	ands.w	r2, r3, #1
 8004f7a:	d00a      	beq.n	8004f92 <__swsetup_r+0x9a>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60a2      	str	r2, [r4, #8]
 8004f80:	6962      	ldr	r2, [r4, #20]
 8004f82:	4252      	negs	r2, r2
 8004f84:	61a2      	str	r2, [r4, #24]
 8004f86:	6922      	ldr	r2, [r4, #16]
 8004f88:	b942      	cbnz	r2, 8004f9c <__swsetup_r+0xa4>
 8004f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f8e:	d1c5      	bne.n	8004f1c <__swsetup_r+0x24>
 8004f90:	bd38      	pop	{r3, r4, r5, pc}
 8004f92:	0799      	lsls	r1, r3, #30
 8004f94:	bf58      	it	pl
 8004f96:	6962      	ldrpl	r2, [r4, #20]
 8004f98:	60a2      	str	r2, [r4, #8]
 8004f9a:	e7f4      	b.n	8004f86 <__swsetup_r+0x8e>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e7f7      	b.n	8004f90 <__swsetup_r+0x98>
 8004fa0:	20000020 	.word	0x20000020

08004fa4 <_sbrk_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d06      	ldr	r5, [pc, #24]	@ (8004fc0 <_sbrk_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f7fc f8bc 	bl	800112c <_sbrk>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_sbrk_r+0x1a>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_sbrk_r+0x1a>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	20000364 	.word	0x20000364

08004fc4 <__swhatbuf_r>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	b096      	sub	sp, #88	@ 0x58
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	461e      	mov	r6, r3
 8004fd4:	da0d      	bge.n	8004ff2 <__swhatbuf_r+0x2e>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	bf14      	ite	ne
 8004fe2:	2340      	movne	r3, #64	@ 0x40
 8004fe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fe8:	2000      	movs	r0, #0
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	b016      	add	sp, #88	@ 0x58
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	466a      	mov	r2, sp
 8004ff4:	f000 f848 	bl	8005088 <_fstat_r>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	dbec      	blt.n	8004fd6 <__swhatbuf_r+0x12>
 8004ffc:	9901      	ldr	r1, [sp, #4]
 8004ffe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005002:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005006:	4259      	negs	r1, r3
 8005008:	4159      	adcs	r1, r3
 800500a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800500e:	e7eb      	b.n	8004fe8 <__swhatbuf_r+0x24>

08005010 <__smakebuf_r>:
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005014:	079d      	lsls	r5, r3, #30
 8005016:	4606      	mov	r6, r0
 8005018:	460c      	mov	r4, r1
 800501a:	d507      	bpl.n	800502c <__smakebuf_r+0x1c>
 800501c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	2301      	movs	r3, #1
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	b003      	add	sp, #12
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	ab01      	add	r3, sp, #4
 800502e:	466a      	mov	r2, sp
 8005030:	f7ff ffc8 	bl	8004fc4 <__swhatbuf_r>
 8005034:	9f00      	ldr	r7, [sp, #0]
 8005036:	4605      	mov	r5, r0
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff fb16 	bl	800466c <_malloc_r>
 8005040:	b948      	cbnz	r0, 8005056 <__smakebuf_r+0x46>
 8005042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005046:	059a      	lsls	r2, r3, #22
 8005048:	d4ee      	bmi.n	8005028 <__smakebuf_r+0x18>
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	e7e2      	b.n	800501c <__smakebuf_r+0xc>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	6020      	str	r0, [r4, #0]
 800505a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005066:	b15b      	cbz	r3, 8005080 <__smakebuf_r+0x70>
 8005068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f81d 	bl	80050ac <_isatty_r>
 8005072:	b128      	cbz	r0, 8005080 <__smakebuf_r+0x70>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	431d      	orrs	r5, r3
 8005084:	81a5      	strh	r5, [r4, #12]
 8005086:	e7cf      	b.n	8005028 <__smakebuf_r+0x18>

08005088 <_fstat_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	@ (80050a8 <_fstat_r+0x20>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	f7fc f820 	bl	80010da <_fstat>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d102      	bne.n	80050a4 <_fstat_r+0x1c>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	b103      	cbz	r3, 80050a4 <_fstat_r+0x1c>
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	20000364 	.word	0x20000364

080050ac <_isatty_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d06      	ldr	r5, [pc, #24]	@ (80050c8 <_isatty_r+0x1c>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fc f81f 	bl	80010fa <_isatty>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_isatty_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_isatty_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000364 	.word	0x20000364

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
