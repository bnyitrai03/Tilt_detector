
emeles_erzekelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007840  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007a10  08007a10  00008a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa8  08007aa8  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa8  08007aa8  00008aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab0  08007ab0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab0  08007ab0  00008ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab4  08007ab4  00008ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ab8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000074  08007b2c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08007b2c  000093c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb7b  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003015  00000000  00000000  00027c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  0002ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f6  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024134  00000000  00000000  0002dc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019385  00000000  00000000  00051d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc08a  00000000  00000000  0006b0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d7c  00000000  00000000  001471b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0014ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079f8 	.word	0x080079f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080079f8 	.word	0x080079f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <_write>:
static int32_t Convert_digit_UPSIDE(uint8_t digit);
static int32_t Convert_digit_DOWNSIDE(uint8_t digit);

// Redirect the printf to COM port
int _write(int fd, char * ptr, int len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <_write+0x28>)
 8000eb4:	f004 fd1c 	bl	80058f0 <HAL_UART_Transmit>
  return len;
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001bc 	.word	0x200001bc

08000ec8 <Start_buzzer>:

void Start_buzzer(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <Start_buzzer+0x10>)
 8000ece:	f004 f86b 	bl	8004fa8 <HAL_TIM_Base_Start_IT>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000174 	.word	0x20000174

08000edc <Stop_buzzer>:

void Stop_buzzer(){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <Stop_buzzer+0x10>)
 8000ee2:	f004 f8d1 	bl	8005088 <HAL_TIM_Base_Stop_IT>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000174 	.word	0x20000174

08000ef0 <Calculate_bitmask>:

int32_t Calculate_bitmask(uint8_t digit, Orientation display){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
	int32_t bitmask;

	switch(display){
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <Calculate_bitmask+0x26>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10b      	bne.n	8000f22 <Calculate_bitmask+0x32>
	case UP:
		bitmask = Convert_digit_UPSIDE(digit);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f80f 	bl	8000f30 <Convert_digit_UPSIDE>
 8000f12:	60f8      	str	r0, [r7, #12]
		break;
 8000f14:	e007      	b.n	8000f26 <Calculate_bitmask+0x36>
	case DOWN:
		bitmask = Convert_digit_DOWNSIDE(digit);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f851 	bl	8000fc0 <Convert_digit_DOWNSIDE>
 8000f1e:	60f8      	str	r0, [r7, #12]
		break;
 8000f20:	e001      	b.n	8000f26 <Calculate_bitmask+0x36>
	default:
		bitmask = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
	}

	return bitmask;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Convert_digit_UPSIDE>:
| |   |    _|   _|  |_|  |_   |_     |  |_|  |_|
|_|   |   |_    _|    |   _|  |_|    |  |_|   _|
0x3F 0x24 0x79 0x6D 0x66 0x4F 0x5F 0x25 0x7F 0x6F

 */
static int32_t Convert_digit_UPSIDE(uint8_t digit){
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	int32_t bitmask;
	switch(digit){
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b09      	cmp	r3, #9
 8000f3e:	d835      	bhi.n	8000fac <Convert_digit_UPSIDE+0x7c>
 8000f40:	a201      	add	r2, pc, #4	@ (adr r2, 8000f48 <Convert_digit_UPSIDE+0x18>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000f71 	.word	0x08000f71
 8000f4c:	08000f77 	.word	0x08000f77
 8000f50:	08000f7d 	.word	0x08000f7d
 8000f54:	08000f83 	.word	0x08000f83
 8000f58:	08000f89 	.word	0x08000f89
 8000f5c:	08000f8f 	.word	0x08000f8f
 8000f60:	08000f95 	.word	0x08000f95
 8000f64:	08000f9b 	.word	0x08000f9b
 8000f68:	08000fa1 	.word	0x08000fa1
 8000f6c:	08000fa7 	.word	0x08000fa7
	case 0:
		bitmask = 0x3F;
 8000f70:	233f      	movs	r3, #63	@ 0x3f
 8000f72:	60fb      	str	r3, [r7, #12]
		break;
 8000f74:	e01d      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 1:
		bitmask = 0x24;
 8000f76:	2324      	movs	r3, #36	@ 0x24
 8000f78:	60fb      	str	r3, [r7, #12]
		break;
 8000f7a:	e01a      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 2:
		bitmask = 0x79;
 8000f7c:	2379      	movs	r3, #121	@ 0x79
 8000f7e:	60fb      	str	r3, [r7, #12]
		break;
 8000f80:	e017      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 3:
		bitmask = 0x6D;
 8000f82:	236d      	movs	r3, #109	@ 0x6d
 8000f84:	60fb      	str	r3, [r7, #12]
		break;
 8000f86:	e014      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 4:
		bitmask = 0x66;
 8000f88:	2366      	movs	r3, #102	@ 0x66
 8000f8a:	60fb      	str	r3, [r7, #12]
		break;
 8000f8c:	e011      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 5:
		bitmask = 0x4F;
 8000f8e:	234f      	movs	r3, #79	@ 0x4f
 8000f90:	60fb      	str	r3, [r7, #12]
		break;
 8000f92:	e00e      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 6:
		bitmask = 0x5F;
 8000f94:	235f      	movs	r3, #95	@ 0x5f
 8000f96:	60fb      	str	r3, [r7, #12]
		break;
 8000f98:	e00b      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 7:
		bitmask = 0x25;
 8000f9a:	2325      	movs	r3, #37	@ 0x25
 8000f9c:	60fb      	str	r3, [r7, #12]
		break;
 8000f9e:	e008      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 8:
		bitmask = 0x7F;
 8000fa0:	237f      	movs	r3, #127	@ 0x7f
 8000fa2:	60fb      	str	r3, [r7, #12]
		break;
 8000fa4:	e005      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	case 9:
		bitmask = 0x6F;
 8000fa6:	236f      	movs	r3, #111	@ 0x6f
 8000fa8:	60fb      	str	r3, [r7, #12]
		break;
 8000faa:	e002      	b.n	8000fb2 <Convert_digit_UPSIDE+0x82>
	default:
		// If the input digit is not between '0' and '9', return 0
		bitmask = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
		break;
 8000fb0:	bf00      	nop
	}

	return bitmask;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <Convert_digit_DOWNSIDE>:
| |   |    _|  |_   |_   |_   |_|  |    |_|  |_
|_|   |   |_   |_   | |   _|   _|  |_   |_|  |_|
0x3F 0x12 0x79 0x5B 0x56 0x4F 0x6F 0x1A 0x7F 0x5F

 */
static int32_t Convert_digit_DOWNSIDE(uint8_t digit){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
    int32_t bitmask;
    switch (digit) {
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	d835      	bhi.n	800103c <Convert_digit_DOWNSIDE+0x7c>
 8000fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <Convert_digit_DOWNSIDE+0x18>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08001001 	.word	0x08001001
 8000fdc:	08001007 	.word	0x08001007
 8000fe0:	0800100d 	.word	0x0800100d
 8000fe4:	08001013 	.word	0x08001013
 8000fe8:	08001019 	.word	0x08001019
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	08001025 	.word	0x08001025
 8000ff4:	0800102b 	.word	0x0800102b
 8000ff8:	08001031 	.word	0x08001031
 8000ffc:	08001037 	.word	0x08001037
        case 0:
            bitmask = 0x3F;
 8001000:	233f      	movs	r3, #63	@ 0x3f
 8001002:	60fb      	str	r3, [r7, #12]
            break;
 8001004:	e01d      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 1:
            bitmask = 0x12;
 8001006:	2312      	movs	r3, #18
 8001008:	60fb      	str	r3, [r7, #12]
            break;
 800100a:	e01a      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 2:
            bitmask = 0x79;
 800100c:	2379      	movs	r3, #121	@ 0x79
 800100e:	60fb      	str	r3, [r7, #12]
            break;
 8001010:	e017      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 3:
            bitmask = 0x5B;
 8001012:	235b      	movs	r3, #91	@ 0x5b
 8001014:	60fb      	str	r3, [r7, #12]
            break;
 8001016:	e014      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 4:
            bitmask = 0x56;
 8001018:	2356      	movs	r3, #86	@ 0x56
 800101a:	60fb      	str	r3, [r7, #12]
            break;
 800101c:	e011      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 5:
            bitmask = 0x4F;
 800101e:	234f      	movs	r3, #79	@ 0x4f
 8001020:	60fb      	str	r3, [r7, #12]
            break;
 8001022:	e00e      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 6:
            bitmask = 0x6F;
 8001024:	236f      	movs	r3, #111	@ 0x6f
 8001026:	60fb      	str	r3, [r7, #12]
            break;
 8001028:	e00b      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 7:
            bitmask = 0x1A;
 800102a:	231a      	movs	r3, #26
 800102c:	60fb      	str	r3, [r7, #12]
            break;
 800102e:	e008      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 8:
            bitmask = 0x7F;
 8001030:	237f      	movs	r3, #127	@ 0x7f
 8001032:	60fb      	str	r3, [r7, #12]
            break;
 8001034:	e005      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        case 9:
            bitmask = 0x5F;
 8001036:	235f      	movs	r3, #95	@ 0x5f
 8001038:	60fb      	str	r3, [r7, #12]
            break;
 800103a:	e002      	b.n	8001042 <Convert_digit_DOWNSIDE+0x82>
        default:
            // If the input digit is not between '0' and '9', return 0
            bitmask = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
            break;
 8001040:	bf00      	nop
    }
    return bitmask;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <wrap_platform_read>:

LSM6DSL_Object_t Accelerometer;
LSM6DSL_Axes_t acc_axes;
static int16_t i = 0;

int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	603a      	str	r2, [r7, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	460b      	mov	r3, r1
 8001060:	71bb      	strb	r3, [r7, #6]
 8001062:	4613      	mov	r3, r2
 8001064:	80bb      	strh	r3, [r7, #4]
  uint32_t ret;
  Reg |= 0x80;
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800106c:	b2db      	uxtb	r3, r3
 800106e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2101      	movs	r1, #1
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <wrap_platform_read+0x5c>)
 8001076:	f002 f9f5 	bl	8003464 <HAL_GPIO_WritePin>
  ret = BSP_SPI2_Send(&Reg, 1);
 800107a:	1dbb      	adds	r3, r7, #6
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fe0c 	bl	8001c9c <BSP_SPI2_Send>
 8001084:	4603      	mov	r3, r0
 8001086:	60fb      	str	r3, [r7, #12]
  ret = BSP_SPI2_Recv(Bufp, len);
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	4619      	mov	r1, r3
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f000 fe21 	bl	8001cd4 <BSP_SPI2_Recv>
 8001092:	4603      	mov	r3, r0
 8001094:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2101      	movs	r1, #1
 800109a:	4804      	ldr	r0, [pc, #16]	@ (80010ac <wrap_platform_read+0x5c>)
 800109c:	f002 f9e2 	bl	8003464 <HAL_GPIO_WritePin>
  return ret;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020400 	.word	0x40020400

080010b0 <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	603a      	str	r2, [r7, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	80bb      	strh	r3, [r7, #4]
  uint32_t ret;
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	480d      	ldr	r0, [pc, #52]	@ (8001100 <wrap_platform_write+0x50>)
 80010cc:	f002 f9ca 	bl	8003464 <HAL_GPIO_WritePin>
  ret = BSP_SPI2_Send(&Reg, 1);
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	2101      	movs	r1, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fde1 	bl	8001c9c <BSP_SPI2_Send>
 80010da:	4603      	mov	r3, r0
 80010dc:	60fb      	str	r3, [r7, #12]
  ret = BSP_SPI2_Send(Bufp, len);
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	f000 fdda 	bl	8001c9c <BSP_SPI2_Send>
 80010e8:	4603      	mov	r3, r0
 80010ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2101      	movs	r1, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	@ (8001100 <wrap_platform_write+0x50>)
 80010f2:	f002 f9b7 	bl	8003464 <HAL_GPIO_WritePin>
  return ret;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020400 	.word	0x40020400

08001104 <MEMS_Init>:

void MEMS_Init()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;

  /* Link SPI functions to the LSM6DSL driver */
  io_ctx.BusType   = LSM6DSL_SPI_4WIRES_BUS;
 800110a:	2301      	movs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
  io_ctx.Address   = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	743b      	strb	r3, [r7, #16]
  io_ctx.Init    = BSP_SPI2_Init;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MEMS_Init+0x78>)
 8001114:	607b      	str	r3, [r7, #4]
  io_ctx.DeInit   = BSP_SPI2_DeInit;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MEMS_Init+0x7c>)
 8001118:	60bb      	str	r3, [r7, #8]
  io_ctx.ReadReg   = wrap_platform_read;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MEMS_Init+0x80>)
 800111c:	61bb      	str	r3, [r7, #24]
  io_ctx.WriteReg  = wrap_platform_write;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MEMS_Init+0x84>)
 8001120:	617b      	str	r3, [r7, #20]
  io_ctx.GetTick   = BSP_GetTick;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MEMS_Init+0x88>)
 8001124:	61fb      	str	r3, [r7, #28]
  LSM6DSL_RegisterBusIO(&Accelerometer, &io_ctx);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4819      	ldr	r0, [pc, #100]	@ (8001190 <MEMS_Init+0x8c>)
 800112c:	f000 ff8c 	bl	8002048 <LSM6DSL_RegisterBusIO>

  // Pull the SS high before starting communication
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2101      	movs	r1, #1
 8001134:	4817      	ldr	r0, [pc, #92]	@ (8001194 <MEMS_Init+0x90>)
 8001136:	f002 f995 	bl	8003464 <HAL_GPIO_WritePin>

  /* Read the LSM6DSL WHO_AM_I register */
  uint8_t ret = LSM6DSL_ReadID(&Accelerometer, &id);
 800113a:	1cfb      	adds	r3, r7, #3
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <MEMS_Init+0x8c>)
 8001140:	f001 f855 	bl	80021ee <LSM6DSL_ReadID>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (id != LSM6DSL_ID) {
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	2b6a      	cmp	r3, #106	@ 0x6a
 800114e:	d001      	beq.n	8001154 <MEMS_Init+0x50>
    Error_Handler();
 8001150:	f000 fba2 	bl	8001898 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&Accelerometer);
 8001154:	480e      	ldr	r0, [pc, #56]	@ (8001190 <MEMS_Init+0x8c>)
 8001156:	f000 ffe1 	bl	800211c <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&Accelerometer, 26.0f); /* 26 Hz */
 800115a:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 800115e:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MEMS_Init+0x8c>)
 8001160:	f001 f8c6 	bl	80022f0 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&Accelerometer, 4);          /* [-4000mg; +4000mg] */
 8001164:	2104      	movs	r1, #4
 8001166:	480a      	ldr	r0, [pc, #40]	@ (8001190 <MEMS_Init+0x8c>)
 8001168:	f001 f8de 	bl	8002328 <LSM6DSL_ACC_SetFullScale>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&Accelerometer);
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <MEMS_Init+0x8c>)
 800116e:	f001 f854 	bl	800221a <LSM6DSL_ACC_Enable>
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	@ 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08001bed 	.word	0x08001bed
 8001180:	08001c4d 	.word	0x08001c4d
 8001184:	08001051 	.word	0x08001051
 8001188:	080010b1 	.word	0x080010b1
 800118c:	08001d0d 	.word	0x08001d0d
 8001190:	20000090 	.word	0x20000090
 8001194:	40020400 	.word	0x40020400

08001198 <Measure_tilt>:

int32_t Measure_tilt(){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	double tilt;
	LSM6DSL_ACC_GetAxes(&Accelerometer, &acc_axes); // read the accelerometer
 800119e:	4928      	ldr	r1, [pc, #160]	@ (8001240 <Measure_tilt+0xa8>)
 80011a0:	4828      	ldr	r0, [pc, #160]	@ (8001244 <Measure_tilt+0xac>)
 80011a2:	f001 f8e9 	bl	8002378 <LSM6DSL_ACC_GetAxes>

	if(acc_axes.z < 0){ // we only measure angles from -90˙ ... +90˙
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <Measure_tilt+0xa8>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da0f      	bge.n	80011ce <Measure_tilt+0x36>

		if(acc_axes.x < 0){
 80011ae:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <Measure_tilt+0xa8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da05      	bge.n	80011c2 <Measure_tilt+0x2a>
			tilt = 90; // if the tilt is bigger than +90˙, we display the max value
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <Measure_tilt+0xb0>)
 80011bc:	e9c7 2300 	strd	r2, r3, [r7]
 80011c0:	e02f      	b.n	8001222 <Measure_tilt+0x8a>
		}
		else{
			tilt = -90; // if we are under -90˙, we display the smallest value
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <Measure_tilt+0xb4>)
 80011c8:	e9c7 2300 	strd	r2, r3, [r7]
 80011cc:	e029      	b.n	8001222 <Measure_tilt+0x8a>
		}

	}else{
		tilt = atan( ((double)acc_axes.x)/ ((double)acc_axes.z) ) * (180/PI) * (-1); // -1 is to change the orientation
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <Measure_tilt+0xa8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9be 	bl	8000554 <__aeabi_i2d>
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <Measure_tilt+0xa8>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9b7 	bl	8000554 <__aeabi_i2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff fb45 	bl	800087c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	ec43 2b17 	vmov	d7, r2, r3
 80011fa:	eeb0 0a47 	vmov.f32	s0, s14
 80011fe:	eef0 0a67 	vmov.f32	s1, s15
 8001202:	f006 fa59 	bl	80076b8 <atan>
 8001206:	ec51 0b10 	vmov	r0, r1, d0
 800120a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001238 <Measure_tilt+0xa0>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff fa0a 	bl	8000628 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4611      	mov	r1, r2
 800121a:	6039      	str	r1, [r7, #0]
 800121c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001220:	607b      	str	r3, [r7, #4]
	}

	return (int32_t)tilt;
 8001222:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001226:	f7ff fc99 	bl	8000b5c <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	f3af 8000 	nop.w
 8001238:	1a63c1f8 	.word	0x1a63c1f8
 800123c:	404ca5dc 	.word	0x404ca5dc
 8001240:	200000c8 	.word	0x200000c8
 8001244:	20000090 	.word	0x20000090
 8001248:	40568000 	.word	0x40568000
 800124c:	c0568000 	.word	0xc0568000

08001250 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4){ // measuring the accelerometer
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a09      	ldr	r2, [pc, #36]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d102      	bne.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x18>
		measure = 1;
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM10){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d103      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_GPIO_TogglePin(GPIOC, buzzer_Pin); // generate 4kHz square wave for the buzzer
 8001272:	2101      	movs	r1, #1
 8001274:	4806      	ldr	r0, [pc, #24]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001276:	f002 f90e 	bl	8003496 <HAL_GPIO_TogglePin>
	}

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000800 	.word	0x40000800
 8001288:	20000204 	.word	0x20000204
 800128c:	40014400 	.word	0x40014400
 8001290:	40020800 	.word	0x40020800

08001294 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button_up_Pin) {
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d108      	bne.n	80012b6 <HAL_GPIO_EXTI_Callback+0x22>
		if(limit < 90){
 80012a4:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x48>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b59      	cmp	r3, #89	@ 0x59
 80012aa:	dc04      	bgt.n	80012b6 <HAL_GPIO_EXTI_Callback+0x22>
			limit++;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x48>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x48>)
 80012b4:	6013      	str	r3, [r2, #0]
		}
	}

	if (GPIO_Pin == button_down_Pin) {
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d108      	bne.n	80012ce <HAL_GPIO_EXTI_Callback+0x3a>
		if(0 < limit){
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x48>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd04      	ble.n	80012ce <HAL_GPIO_EXTI_Callback+0x3a>
			limit--;
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x48>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_GPIO_EXTI_Callback+0x48>)
 80012cc:	6013      	str	r3, [r2, #0]
		}
	}

}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80012e4:	f001 fbca 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f8d6 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 fa12 	bl	8001714 <MX_GPIO_Init>
  MX_SPI3_Init();
 80012f0:	f000 f93e 	bl	8001570 <MX_SPI3_Init>
  MX_TIM4_Init();
 80012f4:	f000 f972 	bl	80015dc <MX_TIM4_Init>
  MX_TIM10_Init();
 80012f8:	f000 f9be 	bl	8001678 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80012fc:	f000 f9e0 	bl	80016c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_SPI2_Init();
 8001300:	f000 fc74 	bl	8001bec <BSP_SPI2_Init>
  MEMS_Init();
 8001304:	f7ff fefe 	bl	8001104 <MEMS_Init>

  HAL_TIM_Base_Start_IT(&htim4); // measure accelerometer every 100 ms
 8001308:	4858      	ldr	r0, [pc, #352]	@ (800146c <main+0x18c>)
 800130a:	f003 fe4d 	bl	8004fa8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (measure) {
 800130e:	4b58      	ldr	r3, [pc, #352]	@ (8001470 <main+0x190>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0fa      	beq.n	800130e <main+0x2e>
			measure = 0;
 8001318:	4b55      	ldr	r3, [pc, #340]	@ (8001470 <main+0x190>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

			current_limit = limit;     // Sampling the data
 800131e:	4b55      	ldr	r3, [pc, #340]	@ (8001474 <main+0x194>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a55      	ldr	r2, [pc, #340]	@ (8001478 <main+0x198>)
 8001324:	6013      	str	r3, [r2, #0]
			degree = Measure_tilt();
 8001326:	f7ff ff37 	bl	8001198 <Measure_tilt>
 800132a:	4603      	mov	r3, r0
 800132c:	4a53      	ldr	r2, [pc, #332]	@ (800147c <main+0x19c>)
 800132e:	6013      	str	r3, [r2, #0]

			if(degree < 0){
 8001330:	4b52      	ldr	r3, [pc, #328]	@ (800147c <main+0x19c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da03      	bge.n	8001340 <main+0x60>
				display = DOWN;
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <main+0x1a0>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
 800133e:	e002      	b.n	8001346 <main+0x66>
			}
			else{
				display = UP;
 8001340:	4b4f      	ldr	r3, [pc, #316]	@ (8001480 <main+0x1a0>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
			}

			if(abs(degree) > current_limit){
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <main+0x19c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800134e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001352:	4b49      	ldr	r3, [pc, #292]	@ (8001478 <main+0x198>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	dd02      	ble.n	8001360 <main+0x80>
				Start_buzzer();
 800135a:	f7ff fdb5 	bl	8000ec8 <Start_buzzer>
 800135e:	e001      	b.n	8001364 <main+0x84>
			}
			else{
				Stop_buzzer();
 8001360:	f7ff fdbc 	bl	8000edc <Stop_buzzer>
			}


			if (previous_limit != current_limit) { // When the limit changes display the new value,
 8001364:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <main+0x1a4>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <main+0x198>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d029      	beq.n	80013c4 <main+0xe4>
				                                  // otherwise display the current tilt on the emulated 7seg display
				bitmask_lower = Calculate_bitmask((uint8_t)(current_limit % 10), display);
 8001370:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <main+0x198>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <main+0x1a8>)
 8001376:	fb83 1302 	smull	r1, r3, r3, r2
 800137a:	1099      	asrs	r1, r3, #2
 800137c:	17d3      	asrs	r3, r2, #31
 800137e:	1ac9      	subs	r1, r1, r3
 8001380:	460b      	mov	r3, r1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	1ad1      	subs	r1, r2, r3
 800138a:	b2cb      	uxtb	r3, r1
 800138c:	4a3c      	ldr	r2, [pc, #240]	@ (8001480 <main+0x1a0>)
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fdac 	bl	8000ef0 <Calculate_bitmask>
 8001398:	4603      	mov	r3, r0
 800139a:	4a3c      	ldr	r2, [pc, #240]	@ (800148c <main+0x1ac>)
 800139c:	6013      	str	r3, [r2, #0]
				bitmask_higher = Calculate_bitmask((uint8_t)(current_limit / 10), display);
 800139e:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <main+0x198>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a39      	ldr	r2, [pc, #228]	@ (8001488 <main+0x1a8>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	1092      	asrs	r2, r2, #2
 80013aa:	17db      	asrs	r3, r3, #31
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4a33      	ldr	r2, [pc, #204]	@ (8001480 <main+0x1a0>)
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd9a 	bl	8000ef0 <Calculate_bitmask>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a34      	ldr	r2, [pc, #208]	@ (8001490 <main+0x1b0>)
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e02f      	b.n	8001424 <main+0x144>
			} else {
				bitmask_lower = Calculate_bitmask((uint8_t)(abs(degree) % 10), display);
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <main+0x19c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <main+0x1a8>)
 80013d2:	fb83 1302 	smull	r1, r3, r3, r2
 80013d6:	1099      	asrs	r1, r3, #2
 80013d8:	17d3      	asrs	r3, r2, #31
 80013da:	1ac9      	subs	r1, r1, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	b2cb      	uxtb	r3, r1
 80013e8:	4a25      	ldr	r2, [pc, #148]	@ (8001480 <main+0x1a0>)
 80013ea:	7812      	ldrb	r2, [r2, #0]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fd7e 	bl	8000ef0 <Calculate_bitmask>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a25      	ldr	r2, [pc, #148]	@ (800148c <main+0x1ac>)
 80013f8:	6013      	str	r3, [r2, #0]
				bitmask_higher = Calculate_bitmask((uint8_t)(abs(degree) / 10), display);
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <main+0x19c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bfb8      	it	lt
 8001402:	425b      	neglt	r3, r3
 8001404:	4a20      	ldr	r2, [pc, #128]	@ (8001488 <main+0x1a8>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1092      	asrs	r2, r2, #2
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <main+0x1a0>)
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fd69 	bl	8000ef0 <Calculate_bitmask>
 800141e:	4603      	mov	r3, r0
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <main+0x1b0>)
 8001422:	6013      	str	r3, [r2, #0]
			}
			if(bitmask_higher == 0x3F){ // if the number is single digit
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <main+0x1b0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b3f      	cmp	r3, #63	@ 0x3f
 800142a:	d102      	bne.n	8001432 <main+0x152>
				bitmask_higher = 0;     // don't display a 0 unnecessarily
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <main+0x1b0>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
			}

			// Send data to the PC
			printf("%d\r\n", (int)degree);
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <main+0x19c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4816      	ldr	r0, [pc, #88]	@ (8001494 <main+0x1b4>)
 800143a:	f005 facd 	bl	80069d8 <iprintf>
			printf("%d\r\n", (int)current_limit);
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <main+0x198>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4813      	ldr	r0, [pc, #76]	@ (8001494 <main+0x1b4>)
 8001446:	f005 fac7 	bl	80069d8 <iprintf>
			printf("%d\r\n", (int)bitmask_lower);
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <main+0x1ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4810      	ldr	r0, [pc, #64]	@ (8001494 <main+0x1b4>)
 8001452:	f005 fac1 	bl	80069d8 <iprintf>
			printf("%d\r\n", (int)bitmask_higher);
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <main+0x1b0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <main+0x1b4>)
 800145e:	f005 fabb 	bl	80069d8 <iprintf>

			previous_limit = current_limit;
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <main+0x198>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <main+0x1a4>)
 8001468:	6013      	str	r3, [r2, #0]
		if (measure) {
 800146a:	e750      	b.n	800130e <main+0x2e>
 800146c:	2000012c 	.word	0x2000012c
 8001470:	20000204 	.word	0x20000204
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	20000208 	.word	0x20000208
 8001480:	20000214 	.word	0x20000214
 8001484:	20000008 	.word	0x20000008
 8001488:	66666667 	.word	0x66666667
 800148c:	2000020c 	.word	0x2000020c
 8001490:	20000210 	.word	0x20000210
 8001494:	08007a10 	.word	0x08007a10

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	@ 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2234      	movs	r2, #52	@ 0x34
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f005 faeb 	bl	8006a82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b29      	ldr	r3, [pc, #164]	@ (8001568 <SystemClock_Config+0xd0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	4a28      	ldr	r2, [pc, #160]	@ (8001568 <SystemClock_Config+0xd0>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80014cc:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <SystemClock_Config+0xd0>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014d8:	2300      	movs	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <SystemClock_Config+0xd4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014e4:	4a21      	ldr	r2, [pc, #132]	@ (800156c <SystemClock_Config+0xd4>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <SystemClock_Config+0xd4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001500:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800150a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001510:	2348      	movs	r3, #72	@ 0x48
 8001512:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001518:	2303      	movs	r3, #3
 800151a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fb33 	bl	8003b90 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001530:	f000 f9b2 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2102      	movs	r1, #2
 8001550:	4618      	mov	r0, r3
 8001552:	f001 ffd3 	bl	80034fc <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800155c:	f000 f99c 	bl	8001898 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3750      	adds	r7, #80	@ 0x50
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_SPI3_Init+0x64>)
 8001576:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <MX_SPI3_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_SPI3_Init+0x64>)
 800157c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001580:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_SPI3_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_SPI3_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_SPI3_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_SPI3_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_SPI3_Init+0x64>)
 800159c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_SPI3_Init+0x64>)
 80015a4:	2218      	movs	r2, #24
 80015a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <MX_SPI3_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_SPI3_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <MX_SPI3_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_SPI3_Init+0x64>)
 80015bc:	220a      	movs	r2, #10
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_SPI3_Init+0x64>)
 80015c2:	f002 fd83 	bl	80040cc <HAL_SPI_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80015cc:	f000 f964 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000d4 	.word	0x200000d4
 80015d8:	40003c00 	.word	0x40003c00

080015dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <MX_TIM4_Init+0x94>)
 80015fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <MX_TIM4_Init+0x98>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 69;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_TIM4_Init+0x94>)
 8001600:	2245      	movs	r2, #69	@ 0x45
 8001602:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_TIM4_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_TIM4_Init+0x94>)
 800160c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001610:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_TIM4_Init+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_TIM4_Init+0x94>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800161e:	4814      	ldr	r0, [pc, #80]	@ (8001670 <MX_TIM4_Init+0x94>)
 8001620:	f003 fc72 	bl	8004f08 <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800162a:	f000 f935 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_TIM4_Init+0x94>)
 800163c:	f003 fe43 	bl	80052c6 <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 f927 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	@ (8001670 <MX_TIM4_Init+0x94>)
 8001658:	f004 f86a 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001662:	f000 f919 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000012c 	.word	0x2000012c
 8001674:	40000800 	.word	0x40000800

08001678 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_TIM10_Init+0x40>)
 800167e:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <MX_TIM10_Init+0x44>)
 8001680:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <MX_TIM10_Init+0x40>)
 8001684:	2201      	movs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_TIM10_Init+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 11250;
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <MX_TIM10_Init+0x40>)
 8001690:	f642 32f2 	movw	r2, #11250	@ 0x2bf2
 8001694:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_TIM10_Init+0x40>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_TIM10_Init+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_TIM10_Init+0x40>)
 80016a4:	f003 fc30 	bl	8004f08 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80016ae:	f000 f8f3 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000174 	.word	0x20000174
 80016bc:	40014400 	.word	0x40014400

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f004 f8aa 	bl	8005850 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f8c9 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200001bc 	.word	0x200001bc
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a54      	ldr	r2, [pc, #336]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b52      	ldr	r3, [pc, #328]	@ (8001884 <MX_GPIO_Init+0x170>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b4e      	ldr	r3, [pc, #312]	@ (8001884 <MX_GPIO_Init+0x170>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a4d      	ldr	r2, [pc, #308]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b4b      	ldr	r3, [pc, #300]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a46      	ldr	r2, [pc, #280]	@ (8001884 <MX_GPIO_Init+0x170>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b44      	ldr	r3, [pc, #272]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b40      	ldr	r3, [pc, #256]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a3f      	ldr	r2, [pc, #252]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b3d      	ldr	r3, [pc, #244]	@ (8001884 <MX_GPIO_Init+0x170>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <MX_GPIO_Init+0x170>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a38      	ldr	r2, [pc, #224]	@ (8001884 <MX_GPIO_Init+0x170>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b36      	ldr	r3, [pc, #216]	@ (8001884 <MX_GPIO_Init+0x170>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, buzzer_Pin|SS_7seg_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2121      	movs	r1, #33	@ 0x21
 80017ba:	4833      	ldr	r0, [pc, #204]	@ (8001888 <MX_GPIO_Init+0x174>)
 80017bc:	f001 fe52 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2120      	movs	r1, #32
 80017c4:	4831      	ldr	r0, [pc, #196]	@ (800188c <MX_GPIO_Init+0x178>)
 80017c6:	f001 fe4d 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_accel_Pin|OE_7seg_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2103      	movs	r1, #3
 80017ce:	4830      	ldr	r0, [pc, #192]	@ (8001890 <MX_GPIO_Init+0x17c>)
 80017d0:	f001 fe48 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : buzzer_Pin SS_7seg_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|SS_7seg_Pin;
 80017d4:	2321      	movs	r3, #33	@ 0x21
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4827      	ldr	r0, [pc, #156]	@ (8001888 <MX_GPIO_Init+0x174>)
 80017ec:	f001 fbb2 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017f0:	2320      	movs	r3, #32
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4821      	ldr	r0, [pc, #132]	@ (800188c <MX_GPIO_Init+0x178>)
 8001808:	f001 fba4 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_accel_Pin OE_7seg_Pin */
  GPIO_InitStruct.Pin = SS_accel_Pin|OE_7seg_Pin;
 800180c:	2303      	movs	r3, #3
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	481b      	ldr	r0, [pc, #108]	@ (8001890 <MX_GPIO_Init+0x17c>)
 8001824:	f001 fb96 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_up_Pin */
  GPIO_InitStruct.Pin = button_up_Pin;
 8001828:	2304      	movs	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_up_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4815      	ldr	r0, [pc, #84]	@ (8001894 <MX_GPIO_Init+0x180>)
 800183e:	f001 fb89 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_down_Pin */
  GPIO_InitStruct.Pin = button_down_Pin;
 8001842:	2320      	movs	r3, #32
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001846:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_down_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	@ (8001890 <MX_GPIO_Init+0x17c>)
 8001858:	f001 fb7c 	bl	8002f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2008      	movs	r0, #8
 8001862:	f001 faa0 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001866:	2008      	movs	r0, #8
 8001868:	f001 fab9 	bl	8002dde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2017      	movs	r0, #23
 8001872:	f001 fa98 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001876:	2017      	movs	r0, #23
 8001878:	f001 fab1 	bl	8002dde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020c00 	.word	0x40020c00

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 80018a0:	2120      	movs	r1, #32
 80018a2:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <Error_Handler+0x1c>)
 80018a4:	f001 fdf7 	bl	8003496 <HAL_GPIO_TogglePin>
	  HAL_Delay(5000);
 80018a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018ac:	f001 f958 	bl	8002b60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 80018b0:	bf00      	nop
 80018b2:	e7f5      	b.n	80018a0 <Error_Handler+0x8>
 80018b4:	40020000 	.word	0x40020000

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f001 fa4a 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <HAL_SPI_MspInit+0xa4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d13c      	bne.n	80019a4 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_SPI_MspInit+0xa8>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a1f      	ldr	r2, [pc, #124]	@ (80019b0 <HAL_SPI_MspInit+0xa8>)
 8001934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_SPI_MspInit+0xa8>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_SPI_MspInit+0xa8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_SPI_MspInit+0xa8>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_SPI_MspInit+0xa8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001972:	2305      	movs	r3, #5
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <HAL_SPI_MspInit+0xac>)
 800197e:	f001 fae9 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001994:	2306      	movs	r3, #6
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_SPI_MspInit+0xac>)
 80019a0:	f001 fad8 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40003c00 	.word	0x40003c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020800 	.word	0x40020800

080019b8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_SPI_MspDeInit+0x30>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10a      	bne.n	80019e0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_SPI_MspDeInit+0x34>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_SPI_MspDeInit+0x34>)
 80019d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_10);
 80019d6:	f240 4102 	movw	r1, #1026	@ 0x402
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <HAL_SPI_MspDeInit+0x38>)
 80019dc:	f001 fc4e 	bl	800327c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40003c00 	.word	0x40003c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800

080019f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <HAL_TIM_Base_MspInit+0x80>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d116      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <HAL_TIM_Base_MspInit+0x84>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a78 <HAL_TIM_Base_MspInit+0x84>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_TIM_Base_MspInit+0x84>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	201e      	movs	r0, #30
 8001a28:	f001 f9bd 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a2c:	201e      	movs	r0, #30
 8001a2e:	f001 f9d6 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001a32:	e01a      	b.n	8001a6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_TIM_Base_MspInit+0x88>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d115      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <HAL_TIM_Base_MspInit+0x84>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <HAL_TIM_Base_MspInit+0x84>)
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_TIM_Base_MspInit+0x84>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2019      	movs	r0, #25
 8001a60:	f001 f9a1 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a64:	2019      	movs	r0, #25
 8001a66:	f001 f9ba 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40000800 	.word	0x40000800
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40014400 	.word	0x40014400

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <HAL_UART_MspInit+0x94>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d133      	bne.n	8001b0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_UART_MspInit+0x98>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <HAL_UART_MspInit+0x98>)
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_UART_MspInit+0x98>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_UART_MspInit+0x98>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <HAL_UART_MspInit+0x98>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_UART_MspInit+0x98>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ada:	230c      	movs	r3, #12
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aea:	2307      	movs	r3, #7
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <HAL_UART_MspInit+0x9c>)
 8001af6:	f001 fa2d 	bl	8002f54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2026      	movs	r0, #38	@ 0x26
 8001b00:	f001 f951 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b04:	2026      	movs	r0, #38	@ 0x26
 8001b06:	f001 f96a 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	@ 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 ffd3 	bl	8002b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_up_Pin);
 8001b82:	2004      	movs	r0, #4
 8001b84:	f001 fca2 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_down_Pin);
 8001b90:	2020      	movs	r0, #32
 8001b92:	f001 fc9b 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ba2:	f003 faa0 	bl	80050e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000174 	.word	0x20000174

08001bb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <TIM4_IRQHandler+0x10>)
 8001bb6:	f003 fa96 	bl	80050e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000012c 	.word	0x2000012c

08001bc4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <SPI2_IRQHandler+0x10>)
 8001bca:	f002 ff3b 	bl	8004a44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000218 	.word	0x20000218

08001bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <USART2_IRQHandler+0x10>)
 8001bde:	f003 ff13 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200001bc 	.word	0x200001bc

08001bec <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <BSP_SPI2_Init+0x54>)
 8001bf8:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <BSP_SPI2_Init+0x58>)
 8001bfa:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <BSP_SPI2_Init+0x5c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	4911      	ldr	r1, [pc, #68]	@ (8001c48 <BSP_SPI2_Init+0x5c>)
 8001c04:	600a      	str	r2, [r1, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d114      	bne.n	8001c34 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <BSP_SPI2_Init+0x54>)
 8001c0c:	f003 f818 	bl	8004c40 <HAL_SPI_GetState>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10e      	bne.n	8001c34 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8001c16:	480a      	ldr	r0, [pc, #40]	@ (8001c40 <BSP_SPI2_Init+0x54>)
 8001c18:	f000 f8bc 	bl	8001d94 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8001c22:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <BSP_SPI2_Init+0x54>)
 8001c24:	f000 f87a 	bl	8001d1c <MX_SPI2_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001c2e:	f06f 0307 	mvn.w	r3, #7
 8001c32:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000218 	.word	0x20000218
 8001c44:	40003800 	.word	0x40003800
 8001c48:	20000270 	.word	0x20000270

08001c4c <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8001c52:	f06f 0307 	mvn.w	r3, #7
 8001c56:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <BSP_SPI2_DeInit+0x48>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <BSP_SPI2_DeInit+0x3c>
  {
    if (--SPI2InitCounter == 0)
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <BSP_SPI2_DeInit+0x48>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <BSP_SPI2_DeInit+0x48>)
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <BSP_SPI2_DeInit+0x48>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <BSP_SPI2_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI2_MspDeInit(&hspi2);
 8001c72:	4809      	ldr	r0, [pc, #36]	@ (8001c98 <BSP_SPI2_DeInit+0x4c>)
 8001c74:	f000 f900 	bl	8001e78 <SPI2_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8001c78:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <BSP_SPI2_DeInit+0x4c>)
 8001c7a:	f002 fab0 	bl	80041de <HAL_SPI_DeInit>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <BSP_SPI2_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000270 	.word	0x20000270
 8001c98:	20000218 	.word	0x20000218

08001c9c <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4806      	ldr	r0, [pc, #24]	@ (8001cd0 <BSP_SPI2_Send+0x34>)
 8001cb6:	f002 faba 	bl	800422e <HAL_SPI_Transmit>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001cc0:	f06f 0305 	mvn.w	r3, #5
 8001cc4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000218 	.word	0x20000218

08001cd4 <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <BSP_SPI2_Recv+0x34>)
 8001cee:	f002 fbe1 	bl	80044b4 <HAL_SPI_Receive>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001cf8:	f06f 0305 	mvn.w	r3, #5
 8001cfc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000218 	.word	0x20000218

08001d0c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d10:	f000 ff1a 	bl	8002b48 <HAL_GetTick>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <MX_SPI2_Init+0x74>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d34:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d54:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2218      	movs	r2, #24
 8001d5a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	220a      	movs	r2, #10
 8001d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f002 f9a9 	bl	80040cc <HAL_SPI_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40003800 	.word	0x40003800

08001d94 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	4a31      	ldr	r2, [pc, #196]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001da6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <SPI2_MspInit+0xd8>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8001df0:	2304      	movs	r3, #4
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8001e00:	2305      	movs	r3, #5
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4819      	ldr	r0, [pc, #100]	@ (8001e70 <SPI2_MspInit+0xdc>)
 8001e0c:	f001 f8a2 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001e10:	2308      	movs	r3, #8
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8001e20:	2305      	movs	r3, #5
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <SPI2_MspInit+0xdc>)
 8001e2c:	f001 f892 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8001e42:	2305      	movs	r3, #5
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4809      	ldr	r0, [pc, #36]	@ (8001e74 <SPI2_MspInit+0xe0>)
 8001e4e:	f001 f881 	bl	8002f54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2024      	movs	r0, #36	@ 0x24
 8001e58:	f000 ffa5 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e5c:	2024      	movs	r0, #36	@ 0x24
 8001e5e:	f000 ffbe 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020400 	.word	0x40020400

08001e78 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <SPI2_MspDeInit+0x3c>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <SPI2_MspDeInit+0x3c>)
 8001e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e8a:	6413      	str	r3, [r2, #64]	@ 0x40
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	480a      	ldr	r0, [pc, #40]	@ (8001eb8 <SPI2_MspDeInit+0x40>)
 8001e90:	f001 f9f4 	bl	800327c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8001e94:	2108      	movs	r1, #8
 8001e96:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <SPI2_MspDeInit+0x40>)
 8001e98:	f001 f9f0 	bl	800327c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 8001e9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ea0:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <SPI2_MspDeInit+0x44>)
 8001ea2:	f001 f9eb 	bl	800327c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001ea6:	2024      	movs	r0, #36	@ 0x24
 8001ea8:	f000 ffa7 	bl	8002dfa <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020400 	.word	0x40020400

08001ec0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e00a      	b.n	8001ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	b2ca      	uxtb	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf0      	blt.n	8001ed2 <_read+0x12>
  }

  return len;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f22:	605a      	str	r2, [r3, #4]
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_isatty>:

int _isatty(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f004 fdc4 	bl	8006b20 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20020000 	.word	0x20020000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	20000274 	.word	0x20000274
 8001fcc:	200003c8 	.word	0x200003c8

08001fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800202c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ff8:	f7ff ffea 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffe:	490d      	ldr	r1, [pc, #52]	@ (8002034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002014:	4c0a      	ldr	r4, [pc, #40]	@ (8002040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002022:	f004 fd83 	bl	8006b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002026:	f7ff f95b 	bl	80012e0 <main>
  bx  lr    
 800202a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800202c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002038:	08007ab8 	.word	0x08007ab8
  ldr r2, =_sbss
 800203c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002040:	200003c8 	.word	0x200003c8

08002044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC_IRQHandler>
	...

08002048 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e051      	b.n	8002108 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	7b1a      	ldrb	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <LSM6DSL_RegisterBusIO+0xcc>)
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <LSM6DSL_RegisterBusIO+0xd0>)
 80020a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e020      	b.n	8002108 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4798      	blx	r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e016      	b.n	8002108 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d112      	bne.n	8002108 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80020ec:	230c      	movs	r3, #12
 80020ee:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	461a      	mov	r2, r3
 80020f4:	2112      	movs	r1, #18
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f995 	bl	8002426 <LSM6DSL_Write_Reg>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002108:	68fb      	ldr	r3, [r7, #12]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	08002679 	.word	0x08002679
 8002118:	080026af 	.word	0x080026af

0800211c <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fc59 	bl	80029e2 <lsm6dsl_auto_increment_set>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e054      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3320      	adds	r3, #32
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fbce 	bl	80028e4 <lsm6dsl_block_data_update_set>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e048      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3320      	adds	r3, #32
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fc67 	bl	8002a2e <lsm6dsl_fifo_mode_set>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e03c      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3320      	adds	r3, #32
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fb40 	bl	8002800 <lsm6dsl_xl_data_rate_set>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e02c      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3320      	adds	r3, #32
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fad6 	bl	8002744 <lsm6dsl_xl_full_scale_set>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e020      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fb70 	bl	8002898 <lsm6dsl_gy_data_rate_set>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e010      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3320      	adds	r3, #32
 80021c8:	2106      	movs	r1, #6
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fb3e 	bl	800284c <lsm6dsl_gy_full_scale_set>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e004      	b.n	80021e6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3320      	adds	r3, #32
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fbde 	bl	80029c0 <lsm6dsl_device_id_get>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e000      	b.n	8002212 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e014      	b.n	800225a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f103 0220 	add.w	r2, r3, #32
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fade 	bl	8002800 <lsm6dsl_xl_data_rate_set>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e004      	b.n	800225a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3320      	adds	r3, #32
 8002276:	f107 020b 	add.w	r2, r7, #11
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa87 	bl	8002790 <lsm6dsl_xl_full_scale_get>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e023      	b.n	80022d6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d81b      	bhi.n	80022cc <LSM6DSL_ACC_GetSensitivity+0x68>
 8002294:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022c5 	.word	0x080022c5
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	080022bd 	.word	0x080022bd
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80022b0:	601a      	str	r2, [r3, #0]
      break;
 80022b2:	e00f      	b.n	80022d4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 80022b8:	601a      	str	r2, [r3, #0]
      break;
 80022ba:	e00b      	b.n	80022d4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80022c0:	601a      	str	r2, [r3, #0]
      break;
 80022c2:	e007      	b.n	80022d4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <LSM6DSL_ACC_GetSensitivity+0x88>)
 80022c8:	601a      	str	r2, [r3, #0]
      break;
 80022ca:	e003      	b.n	80022d4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	60fb      	str	r3, [r7, #12]
      break;
 80022d2:	bf00      	nop
  }

  return ret;
 80022d4:	68fb      	ldr	r3, [r7, #12]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	3d79db23 	.word	0x3d79db23
 80022e4:	3df9db23 	.word	0x3df9db23
 80022e8:	3e79db23 	.word	0x3e79db23
 80022ec:	3ef9db23 	.word	0x3ef9db23

080022f0 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002302:	2b01      	cmp	r3, #1
 8002304:	d106      	bne.n	8002314 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002306:	ed97 0a00 	vldr	s0, [r7]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8a6 	bl	800245c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002310:	4603      	mov	r3, r0
 8002312:	e005      	b.n	8002320 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002314:	ed97 0a00 	vldr	s0, [r7]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f92b 	bl	8002574 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800231e:	4603      	mov	r3, r0
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b02      	cmp	r3, #2
 8002336:	dd0b      	ble.n	8002350 <LSM6DSL_ACC_SetFullScale+0x28>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b04      	cmp	r3, #4
 800233c:	dd06      	ble.n	800234c <LSM6DSL_ACC_SetFullScale+0x24>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b08      	cmp	r3, #8
 8002342:	dc01      	bgt.n	8002348 <LSM6DSL_ACC_SetFullScale+0x20>
 8002344:	2303      	movs	r3, #3
 8002346:	e004      	b.n	8002352 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002348:	2301      	movs	r3, #1
 800234a:	e002      	b.n	8002352 <LSM6DSL_ACC_SetFullScale+0x2a>
 800234c:	2302      	movs	r3, #2
 800234e:	e000      	b.n	8002352 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002350:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8002352:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3320      	adds	r3, #32
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f9f1 	bl	8002744 <lsm6dsl_xl_full_scale_set>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	e000      	b.n	8002370 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3320      	adds	r3, #32
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f000 facc 	bl	8002930 <lsm6dsl_acceleration_raw_get>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e03c      	b.n	800241e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff5a 	bl	8002264 <LSM6DSL_ACC_GetSensitivity>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e030      	b.n	800241e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80023bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80023dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f4:	ee17 2a90 	vmov	r2, s15
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80023fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002408:	edd7 7a03 	vldr	s15, [r7, #12]
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002414:	ee17 2a90 	vmov	r2, s15
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
 8002432:	4613      	mov	r3, r2
 8002434:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f103 0020 	add.w	r0, r3, #32
 800243c:	1cba      	adds	r2, r7, #2
 800243e:	78f9      	ldrb	r1, [r7, #3]
 8002440:	2301      	movs	r3, #1
 8002442:	f000 f967 	bl	8002714 <lsm6dsl_write_reg>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	e000      	b.n	8002454 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002468:	edd7 7a00 	vldr	s15, [r7]
 800246c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	d801      	bhi.n	800247e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800247a:	2301      	movs	r3, #1
 800247c:	e058      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800247e:	edd7 7a00 	vldr	s15, [r7]
 8002482:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	d801      	bhi.n	8002494 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002490:	2302      	movs	r3, #2
 8002492:	e04d      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002494:	edd7 7a00 	vldr	s15, [r7]
 8002498:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002558 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d801      	bhi.n	80024aa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e042      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80024aa:	edd7 7a00 	vldr	s15, [r7]
 80024ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800255c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d801      	bhi.n	80024c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80024bc:	2304      	movs	r3, #4
 80024be:	e037      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80024c0:	edd7 7a00 	vldr	s15, [r7]
 80024c4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002560 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80024c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	d801      	bhi.n	80024d6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e02c      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80024d6:	edd7 7a00 	vldr	s15, [r7]
 80024da:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002564 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80024de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	d801      	bhi.n	80024ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e021      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80024ec:	edd7 7a00 	vldr	s15, [r7]
 80024f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002568 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80024f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d801      	bhi.n	8002502 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80024fe:	2307      	movs	r3, #7
 8002500:	e016      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002502:	edd7 7a00 	vldr	s15, [r7]
 8002506:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800256c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d801      	bhi.n	8002518 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002514:	2308      	movs	r3, #8
 8002516:	e00b      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002518:	edd7 7a00 	vldr	s15, [r7]
 800251c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002570 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	d801      	bhi.n	800252e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800252a:	2309      	movs	r3, #9
 800252c:	e000      	b.n	8002530 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800252e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002530:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3320      	adds	r3, #32
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f960 	bl	8002800 <lsm6dsl_xl_data_rate_set>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	e000      	b.n	800254e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	42500000 	.word	0x42500000
 800255c:	42d00000 	.word	0x42d00000
 8002560:	43500000 	.word	0x43500000
 8002564:	43d00000 	.word	0x43d00000
 8002568:	44504000 	.word	0x44504000
 800256c:	44cf8000 	.word	0x44cf8000
 8002570:	45502000 	.word	0x45502000

08002574 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002580:	edd7 7a00 	vldr	s15, [r7]
 8002584:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	d801      	bhi.n	8002596 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002592:	2301      	movs	r3, #1
 8002594:	e058      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002596:	edd7 7a00 	vldr	s15, [r7]
 800259a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d801      	bhi.n	80025ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e04d      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80025ac:	edd7 7a00 	vldr	s15, [r7]
 80025b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800265c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	d801      	bhi.n	80025c2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80025be:	2303      	movs	r3, #3
 80025c0:	e042      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80025c2:	edd7 7a00 	vldr	s15, [r7]
 80025c6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002660 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80025ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d801      	bhi.n	80025d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e037      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80025d8:	edd7 7a00 	vldr	s15, [r7]
 80025dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002664 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80025e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d801      	bhi.n	80025ee <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e02c      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80025ee:	edd7 7a00 	vldr	s15, [r7]
 80025f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002668 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80025f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d801      	bhi.n	8002604 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002600:	2306      	movs	r3, #6
 8002602:	e021      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002604:	edd7 7a00 	vldr	s15, [r7]
 8002608:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800266c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800260c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002614:	d801      	bhi.n	800261a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002616:	2307      	movs	r3, #7
 8002618:	e016      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800261a:	edd7 7a00 	vldr	s15, [r7]
 800261e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002670 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8002622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d801      	bhi.n	8002630 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800262c:	2308      	movs	r3, #8
 800262e:	e00b      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002630:	edd7 7a00 	vldr	s15, [r7]
 8002634:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002674 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d801      	bhi.n	8002646 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002642:	2309      	movs	r3, #9
 8002644:	e000      	b.n	8002648 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002646:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	42500000 	.word	0x42500000
 8002660:	42d00000 	.word	0x42d00000
 8002664:	43500000 	.word	0x43500000
 8002668:	43d00000 	.word	0x43d00000
 800266c:	44504000 	.word	0x44504000
 8002670:	44cf8000 	.word	0x44cf8000
 8002674:	45502000 	.word	0x45502000

08002678 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	460b      	mov	r3, r1
 8002686:	72fb      	strb	r3, [r7, #11]
 8002688:	4613      	mov	r3, r2
 800268a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	695c      	ldr	r4, [r3, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	7b1b      	ldrb	r3, [r3, #12]
 8002698:	4618      	mov	r0, r3
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	b299      	uxth	r1, r3
 800269e:	893b      	ldrh	r3, [r7, #8]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	47a0      	blx	r4
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026ae:	b590      	push	{r4, r7, lr}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	461a      	mov	r2, r3
 80026ba:	460b      	mov	r3, r1
 80026bc:	72fb      	strb	r3, [r7, #11]
 80026be:	4613      	mov	r3, r2
 80026c0:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	691c      	ldr	r4, [r3, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	7b1b      	ldrb	r3, [r3, #12]
 80026ce:	4618      	mov	r0, r3
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	b299      	uxth	r1, r3
 80026d4:	893b      	ldrh	r3, [r7, #8]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	47a0      	blx	r4
 80026da:	4603      	mov	r3, r0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}

080026e4 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	461a      	mov	r2, r3
 80026f0:	460b      	mov	r3, r1
 80026f2:	72fb      	strb	r3, [r7, #11]
 80026f4:	4613      	mov	r3, r2
 80026f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685c      	ldr	r4, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68d8      	ldr	r0, [r3, #12]
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	7af9      	ldrb	r1, [r7, #11]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	47a0      	blx	r4
 8002708:	6178      	str	r0, [r7, #20]

  return ret;
 800270a:	697b      	ldr	r3, [r7, #20]
}
 800270c:	4618      	mov	r0, r3
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd90      	pop	{r4, r7, pc}

08002714 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	72fb      	strb	r3, [r7, #11]
 8002724:	4613      	mov	r3, r2
 8002726:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681c      	ldr	r4, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	68d8      	ldr	r0, [r3, #12]
 8002730:	893b      	ldrh	r3, [r7, #8]
 8002732:	7af9      	ldrb	r1, [r7, #11]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	47a0      	blx	r4
 8002738:	6178      	str	r0, [r7, #20]

  return ret;
 800273a:	697b      	ldr	r3, [r7, #20]
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd90      	pop	{r4, r7, pc}

08002744 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002750:	f107 0208 	add.w	r2, r7, #8
 8002754:	2301      	movs	r3, #1
 8002756:	2110      	movs	r1, #16
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ffc3 	bl	80026e4 <lsm6dsl_read_reg>
 800275e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	b2da      	uxtb	r2, r3
 800276e:	7a3b      	ldrb	r3, [r7, #8]
 8002770:	f362 0383 	bfi	r3, r2, #2, #2
 8002774:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002776:	f107 0208 	add.w	r2, r7, #8
 800277a:	2301      	movs	r3, #1
 800277c:	2110      	movs	r1, #16
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffc8 	bl	8002714 <lsm6dsl_write_reg>
 8002784:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800279a:	f107 0208 	add.w	r2, r7, #8
 800279e:	2301      	movs	r3, #1
 80027a0:	2110      	movs	r1, #16
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff9e 	bl	80026e4 <lsm6dsl_read_reg>
 80027a8:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 80027aa:	7a3b      	ldrb	r3, [r7, #8]
 80027ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d81a      	bhi.n	80027ec <lsm6dsl_xl_full_scale_get+0x5c>
 80027b6:	a201      	add	r2, pc, #4	@ (adr r2, 80027bc <lsm6dsl_xl_full_scale_get+0x2c>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d5 	.word	0x080027d5
 80027c4:	080027dd 	.word	0x080027dd
 80027c8:	080027e5 	.word	0x080027e5
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
      break;
 80027d2:	e00f      	b.n	80027f4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
      break;
 80027da:	e00b      	b.n	80027f4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
      break;
 80027e2:	e007      	b.n	80027f4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2203      	movs	r2, #3
 80027e8:	701a      	strb	r2, [r3, #0]
      break;
 80027ea:	e003      	b.n	80027f4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2204      	movs	r2, #4
 80027f0:	701a      	strb	r2, [r3, #0]
      break;
 80027f2:	bf00      	nop
  }

  return ret;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop

08002800 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800280c:	f107 0208 	add.w	r2, r7, #8
 8002810:	2301      	movs	r3, #1
 8002812:	2110      	movs	r1, #16
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff65 	bl	80026e4 <lsm6dsl_read_reg>
 800281a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	b2da      	uxtb	r2, r3
 800282a:	7a3b      	ldrb	r3, [r7, #8]
 800282c:	f362 1307 	bfi	r3, r2, #4, #4
 8002830:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002832:	f107 0208 	add.w	r2, r7, #8
 8002836:	2301      	movs	r3, #1
 8002838:	2110      	movs	r1, #16
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff6a 	bl	8002714 <lsm6dsl_write_reg>
 8002840:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002842:	68fb      	ldr	r3, [r7, #12]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002858:	f107 0208 	add.w	r2, r7, #8
 800285c:	2301      	movs	r3, #1
 800285e:	2111      	movs	r1, #17
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff3f 	bl	80026e4 <lsm6dsl_read_reg>
 8002866:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	b2da      	uxtb	r2, r3
 8002876:	7a3b      	ldrb	r3, [r7, #8]
 8002878:	f362 0343 	bfi	r3, r2, #1, #3
 800287c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800287e:	f107 0208 	add.w	r2, r7, #8
 8002882:	2301      	movs	r3, #1
 8002884:	2111      	movs	r1, #17
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff44 	bl	8002714 <lsm6dsl_write_reg>
 800288c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80028a4:	f107 0208 	add.w	r2, r7, #8
 80028a8:	2301      	movs	r3, #1
 80028aa:	2111      	movs	r1, #17
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff19 	bl	80026e4 <lsm6dsl_read_reg>
 80028b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	7a3b      	ldrb	r3, [r7, #8]
 80028c4:	f362 1307 	bfi	r3, r2, #4, #4
 80028c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80028ca:	f107 0208 	add.w	r2, r7, #8
 80028ce:	2301      	movs	r3, #1
 80028d0:	2111      	movs	r1, #17
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff1e 	bl	8002714 <lsm6dsl_write_reg>
 80028d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028f0:	f107 0208 	add.w	r2, r7, #8
 80028f4:	2301      	movs	r3, #1
 80028f6:	2112      	movs	r1, #18
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fef3 	bl	80026e4 <lsm6dsl_read_reg>
 80028fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	7a3b      	ldrb	r3, [r7, #8]
 8002910:	f362 1386 	bfi	r3, r2, #6, #1
 8002914:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002916:	f107 0208 	add.w	r2, r7, #8
 800291a:	2301      	movs	r3, #1
 800291c:	2112      	movs	r1, #18
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fef8 	bl	8002714 <lsm6dsl_write_reg>
 8002924:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800293a:	f107 020c 	add.w	r2, r7, #12
 800293e:	2306      	movs	r3, #6
 8002940:	2128      	movs	r1, #40	@ 0x28
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fece 	bl	80026e4 <lsm6dsl_read_reg>
 8002948:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800294a:	7b7b      	ldrb	r3, [r7, #13]
 800294c:	b21a      	sxth	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002958:	b29b      	uxth	r3, r3
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	b29b      	uxth	r3, r3
 800295e:	7b3a      	ldrb	r2, [r7, #12]
 8002960:	4413      	add	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	b21a      	sxth	r2, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3302      	adds	r3, #2
 8002970:	b212      	sxth	r2, r2
 8002972:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	3302      	adds	r3, #2
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	b29b      	uxth	r3, r3
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	b29b      	uxth	r3, r3
 8002982:	7bba      	ldrb	r2, [r7, #14]
 8002984:	4413      	add	r3, r2
 8002986:	b29a      	uxth	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3302      	adds	r3, #2
 800298c:	b212      	sxth	r2, r2
 800298e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002990:	7c7a      	ldrb	r2, [r7, #17]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	3304      	adds	r3, #4
 8002996:	b212      	sxth	r2, r2
 8002998:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3304      	adds	r3, #4
 800299e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	7c3a      	ldrb	r2, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	3304      	adds	r3, #4
 80029b2:	b212      	sxth	r2, r2
 80029b4:	801a      	strh	r2, [r3, #0]

  return ret;
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80029ca:	2301      	movs	r3, #1
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	210f      	movs	r1, #15
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fe87 	bl	80026e4 <lsm6dsl_read_reg>
 80029d6:	60f8      	str	r0, [r7, #12]

  return ret;
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80029ee:	f107 0208 	add.w	r2, r7, #8
 80029f2:	2301      	movs	r3, #1
 80029f4:	2112      	movs	r1, #18
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe74 	bl	80026e4 <lsm6dsl_read_reg>
 80029fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	7a3b      	ldrb	r3, [r7, #8]
 8002a0e:	f362 0382 	bfi	r3, r2, #2, #1
 8002a12:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002a14:	f107 0208 	add.w	r2, r7, #8
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2112      	movs	r1, #18
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe79 	bl	8002714 <lsm6dsl_write_reg>
 8002a22:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002a3a:	f107 0208 	add.w	r2, r7, #8
 8002a3e:	2301      	movs	r3, #1
 8002a40:	210a      	movs	r1, #10
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fe4e 	bl	80026e4 <lsm6dsl_read_reg>
 8002a48:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10f      	bne.n	8002a70 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	7a3b      	ldrb	r3, [r7, #8]
 8002a5a:	f362 0302 	bfi	r3, r2, #0, #3
 8002a5e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002a60:	f107 0208 	add.w	r2, r7, #8
 8002a64:	2301      	movs	r3, #1
 8002a66:	210a      	movs	r1, #10
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe53 	bl	8002714 <lsm6dsl_write_reg>
 8002a6e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002a70:	68fb      	ldr	r3, [r7, #12]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a80:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <HAL_Init+0x40>)
 8002a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <HAL_Init+0x40>)
 8002a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a07      	ldr	r2, [pc, #28]	@ (8002abc <HAL_Init+0x40>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f000 f973 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f808 	bl	8002ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab0:	f7fe ff02 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00

08002ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_InitTick+0x54>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_InitTick+0x58>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f999 	bl	8002e16 <HAL_SYSTICK_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00e      	b.n	8002b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0f      	cmp	r3, #15
 8002af2:	d80a      	bhi.n	8002b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af4:	2200      	movs	r2, #0
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f000 f953 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b00:	4a06      	ldr	r2, [pc, #24]	@ (8002b1c <HAL_InitTick+0x5c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	20000014 	.word	0x20000014
 8002b1c:	20000010 	.word	0x20000010

08002b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_IncTick+0x20>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_IncTick+0x24>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <HAL_IncTick+0x24>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000014 	.word	0x20000014
 8002b44:	20000278 	.word	0x20000278

08002b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000278 	.word	0x20000278

08002b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff ffee 	bl	8002b48 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d005      	beq.n	8002b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_Delay+0x44>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b86:	bf00      	nop
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d8f7      	bhi.n	8002b88 <HAL_Delay+0x28>
  {
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000014 	.word	0x20000014

08002ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 0307 	and.w	r3, r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db0b      	blt.n	8002c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4907      	ldr	r1, [pc, #28]	@ (8002c44 <__NVIC_EnableIRQ+0x38>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db12      	blt.n	8002c80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	490a      	ldr	r1, [pc, #40]	@ (8002c8c <__NVIC_DisableIRQ+0x44>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	3320      	adds	r3, #32
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c74:	f3bf 8f4f 	dsb	sy
}
 8002c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c7a:	f3bf 8f6f 	isb	sy
}
 8002c7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	@ (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	@ (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	@ 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff05 	bl	8002ba8 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff1a 	bl	8002bf0 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff8e 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5d 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff0d 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff1d 	bl	8002c48 <__NVIC_DisableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff94 	bl	8002d4c <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fe84 	bl	8002b48 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d008      	beq.n	8002e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2280      	movs	r2, #128	@ 0x80
 8002e52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e052      	b.n	8002f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0216 	bic.w	r2, r2, #22
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <HAL_DMA_Abort+0x62>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0208 	bic.w	r2, r2, #8
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb0:	e013      	b.n	8002eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb2:	f7ff fe49 	bl	8002b48 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d90c      	bls.n	8002eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e015      	b.n	8002f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e4      	bne.n	8002eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	223f      	movs	r2, #63	@ 0x3f
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2280      	movs	r2, #128	@ 0x80
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e00c      	b.n	8002f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e165      	b.n	800323c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8154 	bne.w	8003236 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80ae 	beq.w	8003236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b5d      	ldr	r3, [pc, #372]	@ (8003254 <HAL_GPIO_Init+0x300>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003254 <HAL_GPIO_Init+0x300>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003254 <HAL_GPIO_Init+0x300>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f6:	4a58      	ldr	r2, [pc, #352]	@ (8003258 <HAL_GPIO_Init+0x304>)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	220f      	movs	r2, #15
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4f      	ldr	r2, [pc, #316]	@ (800325c <HAL_GPIO_Init+0x308>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d025      	beq.n	800316e <HAL_GPIO_Init+0x21a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4e      	ldr	r2, [pc, #312]	@ (8003260 <HAL_GPIO_Init+0x30c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01f      	beq.n	800316a <HAL_GPIO_Init+0x216>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4d      	ldr	r2, [pc, #308]	@ (8003264 <HAL_GPIO_Init+0x310>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d019      	beq.n	8003166 <HAL_GPIO_Init+0x212>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4c      	ldr	r2, [pc, #304]	@ (8003268 <HAL_GPIO_Init+0x314>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <HAL_GPIO_Init+0x318>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00d      	beq.n	800315e <HAL_GPIO_Init+0x20a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <HAL_GPIO_Init+0x31c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <HAL_GPIO_Init+0x206>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a49      	ldr	r2, [pc, #292]	@ (8003274 <HAL_GPIO_Init+0x320>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_GPIO_Init+0x202>
 8003152:	2306      	movs	r3, #6
 8003154:	e00c      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 8003156:	2307      	movs	r3, #7
 8003158:	e00a      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 800315a:	2305      	movs	r3, #5
 800315c:	e008      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 800315e:	2304      	movs	r3, #4
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 8003162:	2303      	movs	r3, #3
 8003164:	e004      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 8003166:	2302      	movs	r3, #2
 8003168:	e002      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_GPIO_Init+0x21c>
 800316e:	2300      	movs	r3, #0
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	f002 0203 	and.w	r2, r2, #3
 8003176:	0092      	lsls	r2, r2, #2
 8003178:	4093      	lsls	r3, r2
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003180:	4935      	ldr	r1, [pc, #212]	@ (8003258 <HAL_GPIO_Init+0x304>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318e:	4b3a      	ldr	r3, [pc, #232]	@ (8003278 <HAL_GPIO_Init+0x324>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b2:	4a31      	ldr	r2, [pc, #196]	@ (8003278 <HAL_GPIO_Init+0x324>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003278 <HAL_GPIO_Init+0x324>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031dc:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <HAL_GPIO_Init+0x324>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e2:	4b25      	ldr	r3, [pc, #148]	@ (8003278 <HAL_GPIO_Init+0x324>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003206:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <HAL_GPIO_Init+0x324>)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320c:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <HAL_GPIO_Init+0x324>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003230:	4a11      	ldr	r2, [pc, #68]	@ (8003278 <HAL_GPIO_Init+0x324>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3301      	adds	r3, #1
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b0f      	cmp	r3, #15
 8003240:	f67f ae96 	bls.w	8002f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3724      	adds	r7, #36	@ 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40013800 	.word	0x40013800
 800325c:	40020000 	.word	0x40020000
 8003260:	40020400 	.word	0x40020400
 8003264:	40020800 	.word	0x40020800
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40021000 	.word	0x40021000
 8003270:	40021400 	.word	0x40021400
 8003274:	40021800 	.word	0x40021800
 8003278:	40013c00 	.word	0x40013c00

0800327c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e0c7      	b.n	8003428 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003298:	2201      	movs	r2, #1
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f040 80b7 	bne.w	8003422 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80032b4:	4a62      	ldr	r2, [pc, #392]	@ (8003440 <HAL_GPIO_DeInit+0x1c4>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4013      	ands	r3, r2
 80032d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003444 <HAL_GPIO_DeInit+0x1c8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_DeInit+0xae>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a59      	ldr	r2, [pc, #356]	@ (8003448 <HAL_GPIO_DeInit+0x1cc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_DeInit+0xaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a58      	ldr	r2, [pc, #352]	@ (800344c <HAL_GPIO_DeInit+0x1d0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_DeInit+0xa6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_GPIO_DeInit+0x1d4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_DeInit+0xa2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a56      	ldr	r2, [pc, #344]	@ (8003454 <HAL_GPIO_DeInit+0x1d8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_DeInit+0x9e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a55      	ldr	r2, [pc, #340]	@ (8003458 <HAL_GPIO_DeInit+0x1dc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_DeInit+0x9a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a54      	ldr	r2, [pc, #336]	@ (800345c <HAL_GPIO_DeInit+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_DeInit+0x96>
 800330e:	2306      	movs	r3, #6
 8003310:	e00c      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 8003312:	2307      	movs	r3, #7
 8003314:	e00a      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_DeInit+0xb0>
 800332a:	2300      	movs	r3, #0
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d132      	bne.n	80033a2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800333c:	4b48      	ldr	r3, [pc, #288]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	4946      	ldr	r1, [pc, #280]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 8003346:	4013      	ands	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800334a:	4b45      	ldr	r3, [pc, #276]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	4943      	ldr	r1, [pc, #268]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 8003354:	4013      	ands	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003358:	4b41      	ldr	r3, [pc, #260]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	493f      	ldr	r1, [pc, #252]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 8003362:	4013      	ands	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003366:	4b3e      	ldr	r3, [pc, #248]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43db      	mvns	r3, r3
 800336e:	493c      	ldr	r1, [pc, #240]	@ (8003460 <HAL_GPIO_DeInit+0x1e4>)
 8003370:	4013      	ands	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	220f      	movs	r2, #15
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003384:	4a2e      	ldr	r2, [pc, #184]	@ (8003440 <HAL_GPIO_DeInit+0x1c4>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	43da      	mvns	r2, r3
 8003394:	482a      	ldr	r0, [pc, #168]	@ (8003440 <HAL_GPIO_DeInit+0x1c4>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	400a      	ands	r2, r1
 800339c:	3302      	adds	r3, #2
 800339e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2103      	movs	r1, #3
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	220f      	movs	r2, #15
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	08d2      	lsrs	r2, r2, #3
 80033d8:	4019      	ands	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2103      	movs	r1, #3
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	401a      	ands	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	2101      	movs	r1, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2103      	movs	r1, #3
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3301      	adds	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f af34 	bls.w	8003298 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40013800 	.word	0x40013800
 8003444:	40020000 	.word	0x40020000
 8003448:	40020400 	.word	0x40020400
 800344c:	40020800 	.word	0x40020800
 8003450:	40020c00 	.word	0x40020c00
 8003454:	40021000 	.word	0x40021000
 8003458:	40021400 	.word	0x40021400
 800345c:	40021800 	.word	0x40021800
 8003460:	40013c00 	.word	0x40013c00

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003480:	e003      	b.n	800348a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	041a      	lsls	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	619a      	str	r2, [r3, #24]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4013      	ands	r3, r2
 80034ae:	041a      	lsls	r2, r3, #16
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	400b      	ands	r3, r1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e2:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fed2 	bl	8001294 <HAL_GPIO_EXTI_Callback>
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7ff faac 	bl	8002b48 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7ff faa8 	bl	8002b48 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f855 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	@ (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fa0c 	bl	8002ac0 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08007a18 	.word	0x08007a18
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	20000010 	.word	0x20000010

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e4:	f7ff fff0 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a9b      	lsrs	r3, r3, #10
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	08007a28 	.word	0x08007a28

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800370c:	f7ff ffdc 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0b5b      	lsrs	r3, r3, #13
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4903      	ldr	r1, [pc, #12]	@ (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	08007a28 	.word	0x08007a28

08003730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003734:	b0ae      	sub	sp, #184	@ 0xb8
 8003736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003756:	4bcb      	ldr	r3, [pc, #812]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b0c      	cmp	r3, #12
 8003760:	f200 8206 	bhi.w	8003b70 <HAL_RCC_GetSysClockFreq+0x440>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	080037a1 	.word	0x080037a1
 8003770:	08003b71 	.word	0x08003b71
 8003774:	08003b71 	.word	0x08003b71
 8003778:	08003b71 	.word	0x08003b71
 800377c:	080037a9 	.word	0x080037a9
 8003780:	08003b71 	.word	0x08003b71
 8003784:	08003b71 	.word	0x08003b71
 8003788:	08003b71 	.word	0x08003b71
 800378c:	080037b1 	.word	0x080037b1
 8003790:	08003b71 	.word	0x08003b71
 8003794:	08003b71 	.word	0x08003b71
 8003798:	08003b71 	.word	0x08003b71
 800379c:	080039a1 	.word	0x080039a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4bb9      	ldr	r3, [pc, #740]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x358>)
 80037a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80037a6:	e1e7      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a8:	4bb8      	ldr	r3, [pc, #736]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x35c>)
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ae:	e1e3      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4bb4      	ldr	r3, [pc, #720]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037bc:	4bb1      	ldr	r3, [pc, #708]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d071      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c8:	4bae      	ldr	r3, [pc, #696]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037d4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80037d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	0159      	lsls	r1, r3, #5
 80037fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003800:	0150      	lsls	r0, r2, #5
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4621      	mov	r1, r4
 8003808:	1a51      	subs	r1, r2, r1
 800380a:	6439      	str	r1, [r7, #64]	@ 0x40
 800380c:	4629      	mov	r1, r5
 800380e:	eb63 0301 	sbc.w	r3, r3, r1
 8003812:	647b      	str	r3, [r7, #68]	@ 0x44
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003820:	4649      	mov	r1, r9
 8003822:	018b      	lsls	r3, r1, #6
 8003824:	4641      	mov	r1, r8
 8003826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800382a:	4641      	mov	r1, r8
 800382c:	018a      	lsls	r2, r1, #6
 800382e:	4641      	mov	r1, r8
 8003830:	1a51      	subs	r1, r2, r1
 8003832:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003834:	4649      	mov	r1, r9
 8003836:	eb63 0301 	sbc.w	r3, r3, r1
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003848:	4649      	mov	r1, r9
 800384a:	00cb      	lsls	r3, r1, #3
 800384c:	4641      	mov	r1, r8
 800384e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003852:	4641      	mov	r1, r8
 8003854:	00ca      	lsls	r2, r1, #3
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	4603      	mov	r3, r0
 800385c:	4622      	mov	r2, r4
 800385e:	189b      	adds	r3, r3, r2
 8003860:	633b      	str	r3, [r7, #48]	@ 0x30
 8003862:	462b      	mov	r3, r5
 8003864:	460a      	mov	r2, r1
 8003866:	eb42 0303 	adc.w	r3, r2, r3
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003878:	4629      	mov	r1, r5
 800387a:	024b      	lsls	r3, r1, #9
 800387c:	4621      	mov	r1, r4
 800387e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003882:	4621      	mov	r1, r4
 8003884:	024a      	lsls	r2, r1, #9
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003894:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003898:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800389c:	f7fd f986 	bl	8000bac <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038aa:	e067      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ac:	4b75      	ldr	r3, [pc, #468]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80038bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038c6:	2300      	movs	r3, #0
 80038c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80038ce:	4622      	mov	r2, r4
 80038d0:	462b      	mov	r3, r5
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	0159      	lsls	r1, r3, #5
 80038dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e0:	0150      	lsls	r0, r2, #5
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4621      	mov	r1, r4
 80038e8:	1a51      	subs	r1, r2, r1
 80038ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038ec:	4629      	mov	r1, r5
 80038ee:	eb63 0301 	sbc.w	r3, r3, r1
 80038f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003900:	4649      	mov	r1, r9
 8003902:	018b      	lsls	r3, r1, #6
 8003904:	4641      	mov	r1, r8
 8003906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390a:	4641      	mov	r1, r8
 800390c:	018a      	lsls	r2, r1, #6
 800390e:	4641      	mov	r1, r8
 8003910:	ebb2 0a01 	subs.w	sl, r2, r1
 8003914:	4649      	mov	r1, r9
 8003916:	eb63 0b01 	sbc.w	fp, r3, r1
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003926:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800392a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800392e:	4692      	mov	sl, r2
 8003930:	469b      	mov	fp, r3
 8003932:	4623      	mov	r3, r4
 8003934:	eb1a 0303 	adds.w	r3, sl, r3
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	462b      	mov	r3, r5
 800393c:	eb4b 0303 	adc.w	r3, fp, r3
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800394e:	4629      	mov	r1, r5
 8003950:	028b      	lsls	r3, r1, #10
 8003952:	4621      	mov	r1, r4
 8003954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003958:	4621      	mov	r1, r4
 800395a:	028a      	lsls	r2, r1, #10
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003964:	2200      	movs	r2, #0
 8003966:	673b      	str	r3, [r7, #112]	@ 0x70
 8003968:	677a      	str	r2, [r7, #116]	@ 0x74
 800396a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800396e:	f7fd f91d 	bl	8000bac <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4613      	mov	r3, r2
 8003978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800397c:	4b41      	ldr	r3, [pc, #260]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800398e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800399e:	e0eb      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4b38      	ldr	r3, [pc, #224]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ac:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d06b      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b8:	4b32      	ldr	r3, [pc, #200]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	2200      	movs	r2, #0
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80039cc:	2300      	movs	r3, #0
 80039ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80039d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039d4:	4622      	mov	r2, r4
 80039d6:	462b      	mov	r3, r5
 80039d8:	f04f 0000 	mov.w	r0, #0
 80039dc:	f04f 0100 	mov.w	r1, #0
 80039e0:	0159      	lsls	r1, r3, #5
 80039e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e6:	0150      	lsls	r0, r2, #5
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4621      	mov	r1, r4
 80039ee:	1a51      	subs	r1, r2, r1
 80039f0:	61b9      	str	r1, [r7, #24]
 80039f2:	4629      	mov	r1, r5
 80039f4:	eb63 0301 	sbc.w	r3, r3, r1
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a06:	4659      	mov	r1, fp
 8003a08:	018b      	lsls	r3, r1, #6
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a10:	4651      	mov	r1, sl
 8003a12:	018a      	lsls	r2, r1, #6
 8003a14:	4651      	mov	r1, sl
 8003a16:	ebb2 0801 	subs.w	r8, r2, r1
 8003a1a:	4659      	mov	r1, fp
 8003a1c:	eb63 0901 	sbc.w	r9, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a34:	4690      	mov	r8, r2
 8003a36:	4699      	mov	r9, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	eb18 0303 	adds.w	r3, r8, r3
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	462b      	mov	r3, r5
 8003a42:	eb49 0303 	adc.w	r3, r9, r3
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a54:	4629      	mov	r1, r5
 8003a56:	024b      	lsls	r3, r1, #9
 8003a58:	4621      	mov	r1, r4
 8003a5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a5e:	4621      	mov	r1, r4
 8003a60:	024a      	lsls	r2, r1, #9
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a74:	f7fd f89a 	bl	8000bac <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a82:	e065      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x420>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a90:	4b3d      	ldr	r3, [pc, #244]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	2200      	movs	r2, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aa6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003aaa:	4642      	mov	r2, r8
 8003aac:	464b      	mov	r3, r9
 8003aae:	f04f 0000 	mov.w	r0, #0
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	0159      	lsls	r1, r3, #5
 8003ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003abc:	0150      	lsls	r0, r2, #5
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	1a51      	subs	r1, r2, r1
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	4649      	mov	r1, r9
 8003aca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003adc:	4659      	mov	r1, fp
 8003ade:	018b      	lsls	r3, r1, #6
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	018a      	lsls	r2, r1, #6
 8003aea:	4651      	mov	r1, sl
 8003aec:	1a54      	subs	r4, r2, r1
 8003aee:	4659      	mov	r1, fp
 8003af0:	eb63 0501 	sbc.w	r5, r3, r1
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	00eb      	lsls	r3, r5, #3
 8003afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b02:	00e2      	lsls	r2, r4, #3
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	18e3      	adds	r3, r4, r3
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	464b      	mov	r3, r9
 8003b10:	eb45 0303 	adc.w	r3, r5, r3
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b22:	4629      	mov	r1, r5
 8003b24:	028b      	lsls	r3, r1, #10
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	028a      	lsls	r2, r1, #10
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b38:	2200      	movs	r2, #0
 8003b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b3c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b42:	f7fd f833 	bl	8000bac <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b50:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0f1b      	lsrs	r3, r3, #28
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b6e:	e003      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	37b8      	adds	r7, #184	@ 0xb8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	00f42400 	.word	0x00f42400

08003b90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e28d      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8083 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb0:	4b94      	ldr	r3, [pc, #592]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d019      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bbc:	4b91      	ldr	r3, [pc, #580]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b8b      	ldr	r3, [pc, #556]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d112      	bne.n	8003c08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be2:	4b88      	ldr	r3, [pc, #544]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bee:	d10b      	bne.n	8003c08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	4b84      	ldr	r3, [pc, #528]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05b      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x124>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d157      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e25a      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c10:	d106      	bne.n	8003c20 <HAL_RCC_OscConfig+0x90>
 8003c12:	4b7c      	ldr	r3, [pc, #496]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7b      	ldr	r2, [pc, #492]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xcc>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0xb4>
 8003c2a:	4b76      	ldr	r3, [pc, #472]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a75      	ldr	r2, [pc, #468]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b73      	ldr	r3, [pc, #460]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a72      	ldr	r2, [pc, #456]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xcc>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b6c      	ldr	r3, [pc, #432]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6b      	ldr	r2, [pc, #428]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe ff70 	bl	8002b48 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe ff6c 	bl	8002b48 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	@ 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e21f      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xdc>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe ff5c 	bl	8002b48 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe ff58 	bl	8002b48 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e20b      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b57      	ldr	r3, [pc, #348]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x104>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d06f      	beq.n	8003da2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cc2:	4b50      	ldr	r3, [pc, #320]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d017      	beq.n	8003cfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cce:	4b4d      	ldr	r3, [pc, #308]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cda:	4b4a      	ldr	r3, [pc, #296]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b47      	ldr	r3, [pc, #284]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b44      	ldr	r3, [pc, #272]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b41      	ldr	r3, [pc, #260]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x186>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1d3      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4937      	ldr	r1, [pc, #220]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b34      	ldr	r3, [pc, #208]	@ (8003e08 <HAL_RCC_OscConfig+0x278>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe ff05 	bl	8002b48 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe ff01 	bl	8002b48 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1b4      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b2b      	ldr	r3, [pc, #172]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4925      	ldr	r1, [pc, #148]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b24      	ldr	r3, [pc, #144]	@ (8003e08 <HAL_RCC_OscConfig+0x278>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fee4 	bl	8002b48 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fe fee0 	bl	8002b48 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e193      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d036      	beq.n	8003e1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b15      	ldr	r3, [pc, #84]	@ (8003e0c <HAL_RCC_OscConfig+0x27c>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fe fec4 	bl	8002b48 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fec0 	bl	8002b48 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e173      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x234>
 8003de2:	e01b      	b.n	8003e1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <HAL_RCC_OscConfig+0x27c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe fead 	bl	8002b48 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e00e      	b.n	8003e10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fea9 	bl	8002b48 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d907      	bls.n	8003e10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e15c      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	42470000 	.word	0x42470000
 8003e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b8a      	ldr	r3, [pc, #552]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ea      	bne.n	8003df2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8097 	beq.w	8003f58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2e:	4b83      	ldr	r3, [pc, #524]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	4a7e      	ldr	r2, [pc, #504]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b79      	ldr	r3, [pc, #484]	@ (8004040 <HAL_RCC_OscConfig+0x4b0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <HAL_RCC_OscConfig+0x4b0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a75      	ldr	r2, [pc, #468]	@ (8004040 <HAL_RCC_OscConfig+0x4b0>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fe fe69 	bl	8002b48 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fe fe65 	bl	8002b48 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e118      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004040 <HAL_RCC_OscConfig+0x4b0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x31e>
 8003ea0:	4b66      	ldr	r3, [pc, #408]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	4a65      	ldr	r2, [pc, #404]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x358>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x340>
 8003eb6:	4b61      	ldr	r3, [pc, #388]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a60      	ldr	r2, [pc, #384]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a5d      	ldr	r2, [pc, #372]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x358>
 8003ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	4a59      	ldr	r2, [pc, #356]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003edc:	4b57      	ldr	r3, [pc, #348]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a56      	ldr	r2, [pc, #344]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fe2a 	bl	8002b48 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fe fe26 	bl	8002b48 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0d7      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ee      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x368>
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fe14 	bl	8002b48 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fe fe10 	bl	8002b48 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0c1      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	4b40      	ldr	r3, [pc, #256]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ee      	bne.n	8003f24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	4a3a      	ldr	r2, [pc, #232]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80ad 	beq.w	80040bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f62:	4b36      	ldr	r3, [pc, #216]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d060      	beq.n	8004030 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d145      	bne.n	8004002 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b33      	ldr	r3, [pc, #204]	@ (8004044 <HAL_RCC_OscConfig+0x4b4>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fde4 	bl	8002b48 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe fde0 	bl	8002b48 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e093      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b29      	ldr	r3, [pc, #164]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	071b      	lsls	r3, r3, #28
 8003fce:	491b      	ldr	r1, [pc, #108]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_RCC_OscConfig+0x4b4>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fe fdb5 	bl	8002b48 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fe fdb1 	bl	8002b48 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e064      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	4b11      	ldr	r3, [pc, #68]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x452>
 8004000:	e05c      	b.n	80040bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <HAL_RCC_OscConfig+0x4b4>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fd9e 	bl	8002b48 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe fd9a 	bl	8002b48 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e04d      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_RCC_OscConfig+0x4ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x480>
 800402e:	e045      	b.n	80040bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e040      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
 800403c:	40023800 	.word	0x40023800
 8004040:	40007000 	.word	0x40007000
 8004044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004048:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <HAL_RCC_OscConfig+0x538>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d030      	beq.n	80040b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d129      	bne.n	80040b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d122      	bne.n	80040b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800407e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004080:	4293      	cmp	r3, r2
 8004082:	d119      	bne.n	80040b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d10f      	bne.n	80040b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07b      	b.n	80041d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d108      	bne.n	80040f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ee:	d009      	beq.n	8004104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
 80040f6:	e005      	b.n	8004104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd fbf2 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800413a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0104 	and.w	r1, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	f003 0210 	and.w	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e01a      	b.n	8004226 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004206:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fbd5 	bl	80019b8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b088      	sub	sp, #32
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_SPI_Transmit+0x22>
 800424c:	2302      	movs	r3, #2
 800424e:	e12d      	b.n	80044ac <HAL_SPI_Transmit+0x27e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004258:	f7fe fc76 	bl	8002b48 <HAL_GetTick>
 800425c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004272:	e116      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x52>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004284:	e10d      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042cc:	d10f      	bne.n	80042ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d007      	beq.n	800430c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004314:	d14f      	bne.n	80043b6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Transmit+0xf6>
 800431e:	8afb      	ldrh	r3, [r7, #22]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d142      	bne.n	80043aa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004348:	e02f      	b.n	80043aa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d112      	bne.n	800437e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800437c:	e015      	b.n	80043aa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437e:	f7fe fbe3 	bl	8002b48 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d803      	bhi.n	8004396 <HAL_SPI_Transmit+0x168>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d102      	bne.n	800439c <HAL_SPI_Transmit+0x16e>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043a8:	e07b      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ca      	bne.n	800434a <HAL_SPI_Transmit+0x11c>
 80043b4:	e050      	b.n	8004458 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0x196>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d144      	bne.n	800444e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043ea:	e030      	b.n	800444e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d113      	bne.n	8004422 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004420:	e015      	b.n	800444e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004422:	f7fe fb91 	bl	8002b48 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d803      	bhi.n	800443a <HAL_SPI_Transmit+0x20c>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d102      	bne.n	8004440 <HAL_SPI_Transmit+0x212>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800444c:	e029      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1c9      	bne.n	80043ec <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fcff 	bl	8004e60 <SPI_EndRxTxTransaction>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e003      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
 80044d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044d8:	e0fb      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e2:	d112      	bne.n	800450a <HAL_SPI_Receive+0x56>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10e      	bne.n	800450a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2204      	movs	r2, #4
 80044f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f8ef 	bl	80046e4 <HAL_SPI_TransmitReceive>
 8004506:	4603      	mov	r3, r0
 8004508:	e0e8      	b.n	80046dc <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_SPI_Receive+0x64>
 8004514:	2302      	movs	r3, #2
 8004516:	e0e1      	b.n	80046dc <HAL_SPI_Receive+0x228>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004520:	f7fe fb12 	bl	8002b48 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_Receive+0x7e>
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004536:	e0cc      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2204      	movs	r2, #4
 800453c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	88fa      	ldrh	r2, [r7, #6]
 8004556:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457e:	d10f      	bne.n	80045a0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800458e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d007      	beq.n	80045be <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d16a      	bne.n	800469c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045c6:	e032      	b.n	800462e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d115      	bne.n	8004602 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f103 020c 	add.w	r2, r3, #12
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004600:	e015      	b.n	800462e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004602:	f7fe faa1 	bl	8002b48 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d803      	bhi.n	800461a <HAL_SPI_Receive+0x166>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d102      	bne.n	8004620 <HAL_SPI_Receive+0x16c>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800462c:	e051      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1c7      	bne.n	80045c8 <HAL_SPI_Receive+0x114>
 8004638:	e035      	b.n	80046a6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d113      	bne.n	8004670 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	b292      	uxth	r2, r2
 8004654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	1c9a      	adds	r2, r3, #2
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800466e:	e015      	b.n	800469c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004670:	f7fe fa6a 	bl	8002b48 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d803      	bhi.n	8004688 <HAL_SPI_Receive+0x1d4>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d102      	bne.n	800468e <HAL_SPI_Receive+0x1da>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800469a:	e01a      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1c9      	bne.n	800463a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fb72 	bl	8004d94 <SPI_EndRxTransaction>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
 80046c8:	e003      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	@ 0x30
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046f2:	2301      	movs	r3, #1
 80046f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_SPI_TransmitReceive+0x26>
 8004706:	2302      	movs	r3, #2
 8004708:	e198      	b.n	8004a3c <HAL_SPI_TransmitReceive+0x358>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004712:	f7fe fa19 	bl	8002b48 <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800472c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004730:	2b01      	cmp	r3, #1
 8004732:	d00f      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x70>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800473a:	d107      	bne.n	800474c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_SPI_TransmitReceive+0x68>
 8004744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004748:	2b04      	cmp	r3, #4
 800474a:	d003      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004752:	e16d      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x82>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x82>
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800476c:	e160      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b04      	cmp	r3, #4
 8004778:	d003      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2205      	movs	r2, #5
 800477e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	887a      	ldrh	r2, [r7, #2]
 8004792:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	d007      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047de:	d17c      	bne.n	80048da <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x10a>
 80047e8:	8b7b      	ldrh	r3, [r7, #26]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d16a      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004812:	e057      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d11b      	bne.n	800485a <HAL_SPI_TransmitReceive+0x176>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d016      	beq.n	800485a <HAL_SPI_TransmitReceive+0x176>
 800482c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d113      	bne.n	800485a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d119      	bne.n	800489c <HAL_SPI_TransmitReceive+0x1b8>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d014      	beq.n	800489c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800489c:	f7fe f954 	bl	8002b48 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d80b      	bhi.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d007      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80048c2:	e0b5      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1a2      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x130>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d19d      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x130>
 80048d8:	e080      	b.n	80049dc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x204>
 80048e2:	8b7b      	ldrh	r3, [r7, #26]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d16f      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490e:	e05b      	b.n	80049c8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d11c      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x274>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d017      	beq.n	8004958 <HAL_SPI_TransmitReceive+0x274>
 8004928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d114      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d119      	bne.n	800499a <HAL_SPI_TransmitReceive+0x2b6>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d014      	beq.n	800499a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800499a:	f7fe f8d5 	bl	8002b48 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d803      	bhi.n	80049b2 <HAL_SPI_TransmitReceive+0x2ce>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x2d4>
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80049c6:	e033      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d19e      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x22c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d199      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fa3d 	bl	8004e60 <SPI_EndRxTxTransaction>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80049f8:	e01a      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a26:	e003      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3730      	adds	r7, #48	@ 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
    return;
 8004a82:	e0ce      	b.n	8004c22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_SPI_IRQHandler+0x5e>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
    return;
 8004aa0:	e0bf      	b.n	8004c22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_SPI_IRQHandler+0x7e>
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80b0 	beq.w	8004c22 <HAL_SPI_IRQHandler+0x1de>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80aa 	beq.w	8004c22 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d011      	beq.n	8004b08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	e00b      	b.n	8004b20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
        return;
 8004b1e:	e080      	b.n	8004c22 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d014      	beq.n	8004b54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d04f      	beq.n	8004c20 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_SPI_IRQHandler+0x168>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d034      	beq.n	8004c16 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0203 	bic.w	r2, r2, #3
 8004bba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d011      	beq.n	8004be8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc8:	4a17      	ldr	r2, [pc, #92]	@ (8004c28 <HAL_SPI_IRQHandler+0x1e4>)
 8004bca:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe f99c 	bl	8002f0e <HAL_DMA_Abort_IT>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d016      	beq.n	8004c1e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <HAL_SPI_IRQHandler+0x1e4>)
 8004bf6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe f986 	bl	8002f0e <HAL_DMA_Abort_IT>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004c14:	e003      	b.n	8004c1e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f808 	bl	8004c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c1c:	e000      	b.n	8004c20 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004c1e:	bf00      	nop
    return;
 8004c20:	bf00      	nop
  }
}
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08004c5d 	.word	0x08004c5d

08004c2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c4e:	b2db      	uxtb	r3, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff ffd8 	bl	8004c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c94:	f7fd ff58 	bl	8002b48 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ca4:	f7fd ff50 	bl	8002b48 <HAL_GetTick>
 8004ca8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004caa:	4b39      	ldr	r3, [pc, #228]	@ (8004d90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	015b      	lsls	r3, r3, #5
 8004cb0:	0d1b      	lsrs	r3, r3, #20
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cba:	e054      	b.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d050      	beq.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc4:	f7fd ff40 	bl	8002b48 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d902      	bls.n	8004cda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d13d      	bne.n	8004d56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cf2:	d111      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cfc:	d004      	beq.n	8004d08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d107      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d20:	d10f      	bne.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e017      	b.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d19b      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2000000c 	.word	0x2000000c

08004d94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004da8:	d111      	bne.n	8004dce <SPI_EndRxTransaction+0x3a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db2:	d004      	beq.n	8004dbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbc:	d107      	bne.n	8004dce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd6:	d12a      	bne.n	8004e2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de0:	d012      	beq.n	8004e08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2180      	movs	r1, #128	@ 0x80
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff ff49 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d02d      	beq.n	8004e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e026      	b.n	8004e56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2101      	movs	r1, #1
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff ff36 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01a      	beq.n	8004e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e013      	b.n	8004e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2200      	movs	r2, #0
 8004e36:	2101      	movs	r1, #1
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7ff ff23 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e000      	b.n	8004e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2201      	movs	r2, #1
 8004e74:	2102      	movs	r1, #2
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff ff04 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e032      	b.n	8004ef8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e92:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <SPI_EndRxTxTransaction+0xa0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1b      	ldr	r2, [pc, #108]	@ (8004f04 <SPI_EndRxTxTransaction+0xa4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	0d5b      	lsrs	r3, r3, #21
 8004e9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb0:	d112      	bne.n	8004ed8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2180      	movs	r1, #128	@ 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff fee1 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e00f      	b.n	8004ef8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d0f2      	beq.n	8004ed8 <SPI_EndRxTxTransaction+0x78>
 8004ef2:	e000      	b.n	8004ef6 <SPI_EndRxTxTransaction+0x96>
        break;
 8004ef4:	bf00      	nop
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	2000000c 	.word	0x2000000c
 8004f04:	165e9f81 	.word	0x165e9f81

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e041      	b.n	8004f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc fd60 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 faac 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d001      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04e      	b.n	800505e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	@ (800506c <HAL_TIM_Base_Start_IT+0xc4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fea:	d01d      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8005070 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8005074 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <HAL_TIM_Base_Start_IT+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1b      	ldr	r2, [pc, #108]	@ (800507c <HAL_TIM_Base_Start_IT+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	@ (8005080 <HAL_TIM_Base_Start_IT+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <HAL_TIM_Base_Start_IT+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d010      	beq.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e007      	b.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40001800 	.word	0x40001800

08005088 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10f      	bne.n	80050d0 <HAL_TIM_Base_Stop_IT+0x48>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a1a      	ldr	r2, [r3, #32]
 80050b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_Base_Stop_IT+0x48>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d020      	beq.n	800514a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01b      	beq.n	800514a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f06f 0202 	mvn.w	r2, #2
 800511a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f999 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8005136:	e005      	b.n	8005144 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f98b 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f99c 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01b      	beq.n	8005196 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f06f 0204 	mvn.w	r2, #4
 8005166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f973 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8005182:	e005      	b.n	8005190 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f965 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f976 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d020      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01b      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f06f 0208 	mvn.w	r2, #8
 80051b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f94d 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 80051ce:	e005      	b.n	80051dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f93f 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f950 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01b      	beq.n	800522e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f06f 0210 	mvn.w	r2, #16
 80051fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2208      	movs	r2, #8
 8005204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f927 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 800521a:	e005      	b.n	8005228 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f919 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f92a 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00c      	beq.n	8005252 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f06f 0201 	mvn.w	r2, #1
 800524a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fb ffff 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00c      	beq.n	8005276 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fae3 	bl	800583c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00c      	beq.n	800529a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8fb 	bl	8005490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0220 	mvn.w	r2, #32
 80052b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fab5 	bl	8005828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_ConfigClockSource+0x1c>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0b4      	b.n	800544c <HAL_TIM_ConfigClockSource+0x186>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005300:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005308:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531a:	d03e      	beq.n	800539a <HAL_TIM_ConfigClockSource+0xd4>
 800531c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005320:	f200 8087 	bhi.w	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005328:	f000 8086 	beq.w	8005438 <HAL_TIM_ConfigClockSource+0x172>
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005330:	d87f      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 8005332:	2b70      	cmp	r3, #112	@ 0x70
 8005334:	d01a      	beq.n	800536c <HAL_TIM_ConfigClockSource+0xa6>
 8005336:	2b70      	cmp	r3, #112	@ 0x70
 8005338:	d87b      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 800533a:	2b60      	cmp	r3, #96	@ 0x60
 800533c:	d050      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0x11a>
 800533e:	2b60      	cmp	r3, #96	@ 0x60
 8005340:	d877      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 8005342:	2b50      	cmp	r3, #80	@ 0x50
 8005344:	d03c      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0xfa>
 8005346:	2b50      	cmp	r3, #80	@ 0x50
 8005348:	d873      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d058      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0x13a>
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d86f      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 8005352:	2b30      	cmp	r3, #48	@ 0x30
 8005354:	d064      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x15a>
 8005356:	2b30      	cmp	r3, #48	@ 0x30
 8005358:	d86b      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 800535a:	2b20      	cmp	r3, #32
 800535c:	d060      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x15a>
 800535e:	2b20      	cmp	r3, #32
 8005360:	d867      	bhi.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d05c      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x15a>
 8005366:	2b10      	cmp	r3, #16
 8005368:	d05a      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x15a>
 800536a:	e062      	b.n	8005432 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	f000 f9b8 	bl	80056f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800538e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
      break;
 8005398:	e04f      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	f000 f9a1 	bl	80056f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053bc:	609a      	str	r2, [r3, #8]
      break;
 80053be:	e03c      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053cc:	461a      	mov	r2, r3
 80053ce:	f000 f915 	bl	80055fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2150      	movs	r1, #80	@ 0x50
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 f96e 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80053de:	e02c      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ec:	461a      	mov	r2, r3
 80053ee:	f000 f934 	bl	800565a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2160      	movs	r1, #96	@ 0x60
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f95e 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80053fe:	e01c      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540c:	461a      	mov	r2, r3
 800540e:	f000 f8f5 	bl	80055fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2140      	movs	r1, #64	@ 0x40
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f94e 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 800541e:	e00c      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 f945 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 8005430:	e003      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
      break;
 8005436:	e000      	b.n	800543a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005438:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a46      	ldr	r2, [pc, #280]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c2:	d00f      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a43      	ldr	r2, [pc, #268]	@ (80055d4 <TIM_Base_SetConfig+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a42      	ldr	r2, [pc, #264]	@ (80055d8 <TIM_Base_SetConfig+0x134>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a41      	ldr	r2, [pc, #260]	@ (80055dc <TIM_Base_SetConfig+0x138>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a40      	ldr	r2, [pc, #256]	@ (80055e0 <TIM_Base_SetConfig+0x13c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a35      	ldr	r2, [pc, #212]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d02b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d027      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a32      	ldr	r2, [pc, #200]	@ (80055d4 <TIM_Base_SetConfig+0x130>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d023      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a31      	ldr	r2, [pc, #196]	@ (80055d8 <TIM_Base_SetConfig+0x134>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01f      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a30      	ldr	r2, [pc, #192]	@ (80055dc <TIM_Base_SetConfig+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2f      	ldr	r2, [pc, #188]	@ (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d017      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2e      	ldr	r2, [pc, #184]	@ (80055e4 <TIM_Base_SetConfig+0x140>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2d      	ldr	r2, [pc, #180]	@ (80055e8 <TIM_Base_SetConfig+0x144>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00f      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2c      	ldr	r2, [pc, #176]	@ (80055ec <TIM_Base_SetConfig+0x148>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2b      	ldr	r2, [pc, #172]	@ (80055f0 <TIM_Base_SetConfig+0x14c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2a      	ldr	r2, [pc, #168]	@ (80055f4 <TIM_Base_SetConfig+0x150>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a29      	ldr	r2, [pc, #164]	@ (80055f8 <TIM_Base_SetConfig+0x154>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a12      	ldr	r2, [pc, #72]	@ (80055e0 <TIM_Base_SetConfig+0x13c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]
  }
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800
 80055f0:	40001800 	.word	0x40001800
 80055f4:	40001c00 	.word	0x40001c00
 80055f8:	40002000 	.word	0x40002000

080055fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0201 	bic.w	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f023 030a 	bic.w	r3, r3, #10
 8005638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565a:	b480      	push	{r7}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f023 0210 	bic.w	r2, r3, #16
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	031b      	lsls	r3, r3, #12
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f043 0307 	orr.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800570a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	431a      	orrs	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4313      	orrs	r3, r2
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e05a      	b.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a21      	ldr	r2, [pc, #132]	@ (800580c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005794:	d01d      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a18      	ldr	r2, [pc, #96]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a17      	ldr	r2, [pc, #92]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10c      	bne.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40010000 	.word	0x40010000
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40000c00 	.word	0x40000c00
 800581c:	40010400 	.word	0x40010400
 8005820:	40014000 	.word	0x40014000
 8005824:	40001800 	.word	0x40001800

08005828 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e042      	b.n	80058e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f902 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	@ 0x24
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fd69 	bl	800636c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	@ 0x28
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d175      	bne.n	80059fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Transmit+0x2c>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e06e      	b.n	80059fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2221      	movs	r2, #33	@ 0x21
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592e:	f7fd f90b 	bl	8002b48 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005948:	d108      	bne.n	800595c <HAL_UART_Transmit+0x6c>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e003      	b.n	8005964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005964:	e02e      	b.n	80059c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	2180      	movs	r1, #128	@ 0x80
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fb05 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e03a      	b.n	80059fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	3302      	adds	r3, #2
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e007      	b.n	80059b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3301      	adds	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1cb      	bne.n	8005966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2140      	movs	r1, #64	@ 0x40
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fad1 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e006      	b.n	80059fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <HAL_UART_IRQHandler+0x66>
 8005a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fbc2 	bl	80061f0 <UART_Receive_IT>
      return;
 8005a6c:	e25b      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80de 	beq.w	8005c34 <HAL_UART_IRQHandler+0x22c>
 8005a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80d1 	beq.w	8005c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <HAL_UART_IRQHandler+0xae>
 8005a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <HAL_UART_IRQHandler+0xd2>
 8005ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	f043 0202 	orr.w	r2, r3, #2
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <HAL_UART_IRQHandler+0xf6>
 8005ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	f043 0204 	orr.w	r2, r3, #4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d011      	beq.n	8005b2e <HAL_UART_IRQHandler+0x126>
 8005b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d105      	bne.n	8005b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	f043 0208 	orr.w	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 81f2 	beq.w	8005f1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_UART_IRQHandler+0x14e>
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fb4d 	bl	80061f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b60:	2b40      	cmp	r3, #64	@ 0x40
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <HAL_UART_IRQHandler+0x17a>
 8005b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04f      	beq.n	8005c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa55 	bl	8006032 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b40      	cmp	r3, #64	@ 0x40
 8005b94:	d141      	bne.n	8005c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3314      	adds	r3, #20
 8005bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1d9      	bne.n	8005b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bee:	4a7e      	ldr	r2, [pc, #504]	@ (8005de8 <HAL_UART_IRQHandler+0x3e0>)
 8005bf0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fd f989 	bl	8002f0e <HAL_DMA_Abort_IT>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	e00e      	b.n	8005c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f99e 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	e00a      	b.n	8005c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f99a 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e006      	b.n	8005c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f996 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c2e:	e175      	b.n	8005f1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	bf00      	nop
    return;
 8005c32:	e173      	b.n	8005f1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f040 814f 	bne.w	8005edc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8148 	beq.w	8005edc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8141 	beq.w	8005edc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7a:	2b40      	cmp	r3, #64	@ 0x40
 8005c7c:	f040 80b6 	bne.w	8005dec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8145 	beq.w	8005f20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f080 813e 	bcs.w	8005f20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005caa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb6:	f000 8088 	beq.w	8005dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ce6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1d9      	bne.n	8005cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3314      	adds	r3, #20
 8005d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e1      	bne.n	8005d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3314      	adds	r3, #20
 8005d48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e3      	bne.n	8005d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd f832 	bl	8002e2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8c1 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005de6:	e09b      	b.n	8005f20 <HAL_UART_IRQHandler+0x518>
 8005de8:	080060f9 	.word	0x080060f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 808e 	beq.w	8005f24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8089 	beq.w	8005f24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e36:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e3      	bne.n	8005e12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	623b      	str	r3, [r7, #32]
   return(result);
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e3      	bne.n	8005e4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0310 	bic.w	r3, r3, #16
 8005ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005eb4:	61fa      	str	r2, [r7, #28]
 8005eb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e3      	bne.n	8005e90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ece:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f847 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eda:	e023      	b.n	8005f24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <HAL_UART_IRQHandler+0x4f4>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f913 	bl	8006120 <UART_Transmit_IT>
    return;
 8005efa:	e014      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <HAL_UART_IRQHandler+0x51e>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f953 	bl	80061c0 <UART_EndTransmit_IT>
    return;
 8005f1a:	e004      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f24:	bf00      	nop
  }
}
 8005f26:	37e8      	adds	r7, #232	@ 0xe8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f90:	e03b      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d037      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fc fdd5 	bl	8002b48 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e03a      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d023      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b80      	cmp	r3, #128	@ 0x80
 8005fc6:	d020      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b40      	cmp	r3, #64	@ 0x40
 8005fcc:	d01d      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d116      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f81d 	bl	8006032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e00f      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	429a      	cmp	r2, r3
 8006026:	d0b4      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006032:	b480      	push	{r7}
 8006034:	b095      	sub	sp, #84	@ 0x54
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800605a:	643a      	str	r2, [r7, #64]	@ 0x40
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e5      	bne.n	800603a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	61fb      	str	r3, [r7, #28]
   return(result);
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800608e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d119      	bne.n	80060de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ca:	61ba      	str	r2, [r7, #24]
 80060cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060ec:	bf00      	nop
 80060ee:	3754      	adds	r7, #84	@ 0x54
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff ff1e 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b21      	cmp	r3, #33	@ 0x21
 8006132:	d13e      	bne.n	80061b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613c:	d114      	bne.n	8006168 <UART_Transmit_IT+0x48>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d110      	bne.n	8006168 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	1c9a      	adds	r2, r3, #2
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	621a      	str	r2, [r3, #32]
 8006166:	e008      	b.n	800617a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6211      	str	r1, [r2, #32]
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29b      	uxth	r3, r3
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4619      	mov	r1, r3
 8006188:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10f      	bne.n	80061ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800619c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fea3 	bl	8005f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	@ 0x30
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b22      	cmp	r3, #34	@ 0x22
 8006202:	f040 80ae 	bne.w	8006362 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620e:	d117      	bne.n	8006240 <UART_Receive_IT+0x50>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d113      	bne.n	8006240 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006218:	2300      	movs	r3, #0
 800621a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	b29a      	uxth	r2, r3
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	629a      	str	r2, [r3, #40]	@ 0x28
 800623e:	e026      	b.n	800628e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006252:	d007      	beq.n	8006264 <UART_Receive_IT+0x74>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <UART_Receive_IT+0x82>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b2da      	uxtb	r2, r3
 800626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e008      	b.n	8006284 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627e:	b2da      	uxtb	r2, r3
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4619      	mov	r1, r3
 800629c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d15d      	bne.n	800635e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0220 	bic.w	r2, r2, #32
 80062b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d135      	bne.n	8006354 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	613b      	str	r3, [r7, #16]
   return(result);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f023 0310 	bic.w	r3, r3, #16
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	330c      	adds	r3, #12
 800630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630e:	623a      	str	r2, [r7, #32]
 8006310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	69f9      	ldr	r1, [r7, #28]
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	61bb      	str	r3, [r7, #24]
   return(result);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b10      	cmp	r3, #16
 800632e:	d10a      	bne.n	8006346 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fe0b 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
 8006352:	e002      	b.n	800635a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff fdf3 	bl	8005f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e002      	b.n	8006364 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e000      	b.n	8006364 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006362:	2302      	movs	r3, #2
  }
}
 8006364:	4618      	mov	r0, r3
 8006366:	3730      	adds	r7, #48	@ 0x30
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800636c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006370:	b0c0      	sub	sp, #256	@ 0x100
 8006372:	af00      	add	r7, sp, #0
 8006374:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006388:	68d9      	ldr	r1, [r3, #12]
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	ea40 0301 	orr.w	r3, r0, r1
 8006394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063c4:	f021 010c 	bic.w	r1, r1, #12
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063d2:	430b      	orrs	r3, r1
 80063d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e6:	6999      	ldr	r1, [r3, #24]
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	ea40 0301 	orr.w	r3, r0, r1
 80063f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006638 <UART_SetConfig+0x2cc>)
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d005      	beq.n	800640c <UART_SetConfig+0xa0>
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	4b8d      	ldr	r3, [pc, #564]	@ (800663c <UART_SetConfig+0x2d0>)
 8006408:	429a      	cmp	r2, r3
 800640a:	d104      	bne.n	8006416 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800640c:	f7fd f97c 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8006410:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006414:	e003      	b.n	800641e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006416:	f7fd f963 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 800641a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006428:	f040 810c 	bne.w	8006644 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800642c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006430:	2200      	movs	r2, #0
 8006432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006436:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800643a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800643e:	4622      	mov	r2, r4
 8006440:	462b      	mov	r3, r5
 8006442:	1891      	adds	r1, r2, r2
 8006444:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006446:	415b      	adcs	r3, r3
 8006448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800644a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800644e:	4621      	mov	r1, r4
 8006450:	eb12 0801 	adds.w	r8, r2, r1
 8006454:	4629      	mov	r1, r5
 8006456:	eb43 0901 	adc.w	r9, r3, r1
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800646a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800646e:	4690      	mov	r8, r2
 8006470:	4699      	mov	r9, r3
 8006472:	4623      	mov	r3, r4
 8006474:	eb18 0303 	adds.w	r3, r8, r3
 8006478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800647c:	462b      	mov	r3, r5
 800647e:	eb49 0303 	adc.w	r3, r9, r3
 8006482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006492:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800649a:	460b      	mov	r3, r1
 800649c:	18db      	adds	r3, r3, r3
 800649e:	653b      	str	r3, [r7, #80]	@ 0x50
 80064a0:	4613      	mov	r3, r2
 80064a2:	eb42 0303 	adc.w	r3, r2, r3
 80064a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80064a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064b0:	f7fa fb7c 	bl	8000bac <__aeabi_uldivmod>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4b61      	ldr	r3, [pc, #388]	@ (8006640 <UART_SetConfig+0x2d4>)
 80064ba:	fba3 2302 	umull	r2, r3, r3, r2
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	011c      	lsls	r4, r3, #4
 80064c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	1891      	adds	r1, r2, r2
 80064da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064dc:	415b      	adcs	r3, r3
 80064de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064e4:	4641      	mov	r1, r8
 80064e6:	eb12 0a01 	adds.w	sl, r2, r1
 80064ea:	4649      	mov	r1, r9
 80064ec:	eb43 0b01 	adc.w	fp, r3, r1
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006504:	4692      	mov	sl, r2
 8006506:	469b      	mov	fp, r3
 8006508:	4643      	mov	r3, r8
 800650a:	eb1a 0303 	adds.w	r3, sl, r3
 800650e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006512:	464b      	mov	r3, r9
 8006514:	eb4b 0303 	adc.w	r3, fp, r3
 8006518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006528:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800652c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006530:	460b      	mov	r3, r1
 8006532:	18db      	adds	r3, r3, r3
 8006534:	643b      	str	r3, [r7, #64]	@ 0x40
 8006536:	4613      	mov	r3, r2
 8006538:	eb42 0303 	adc.w	r3, r2, r3
 800653c:	647b      	str	r3, [r7, #68]	@ 0x44
 800653e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006542:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006546:	f7fa fb31 	bl	8000bac <__aeabi_uldivmod>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4611      	mov	r1, r2
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <UART_SetConfig+0x2d4>)
 8006552:	fba3 2301 	umull	r2, r3, r3, r1
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2264      	movs	r2, #100	@ 0x64
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	1acb      	subs	r3, r1, r3
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006566:	4b36      	ldr	r3, [pc, #216]	@ (8006640 <UART_SetConfig+0x2d4>)
 8006568:	fba3 2302 	umull	r2, r3, r3, r2
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006574:	441c      	add	r4, r3
 8006576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657a:	2200      	movs	r2, #0
 800657c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006580:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006584:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	1891      	adds	r1, r2, r2
 800658e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006590:	415b      	adcs	r3, r3
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006598:	4641      	mov	r1, r8
 800659a:	1851      	adds	r1, r2, r1
 800659c:	6339      	str	r1, [r7, #48]	@ 0x30
 800659e:	4649      	mov	r1, r9
 80065a0:	414b      	adcs	r3, r1
 80065a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065b0:	4659      	mov	r1, fp
 80065b2:	00cb      	lsls	r3, r1, #3
 80065b4:	4651      	mov	r1, sl
 80065b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ba:	4651      	mov	r1, sl
 80065bc:	00ca      	lsls	r2, r1, #3
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	4642      	mov	r2, r8
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065cc:	464b      	mov	r3, r9
 80065ce:	460a      	mov	r2, r1
 80065d0:	eb42 0303 	adc.w	r3, r2, r3
 80065d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065ec:	460b      	mov	r3, r1
 80065ee:	18db      	adds	r3, r3, r3
 80065f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f2:	4613      	mov	r3, r2
 80065f4:	eb42 0303 	adc.w	r3, r2, r3
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006602:	f7fa fad3 	bl	8000bac <__aeabi_uldivmod>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <UART_SetConfig+0x2d4>)
 800660c:	fba3 1302 	umull	r1, r3, r3, r2
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	2164      	movs	r1, #100	@ 0x64
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	3332      	adds	r3, #50	@ 0x32
 800661e:	4a08      	ldr	r2, [pc, #32]	@ (8006640 <UART_SetConfig+0x2d4>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f003 0207 	and.w	r2, r3, #7
 800662a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4422      	add	r2, r4
 8006632:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006634:	e106      	b.n	8006844 <UART_SetConfig+0x4d8>
 8006636:	bf00      	nop
 8006638:	40011000 	.word	0x40011000
 800663c:	40011400 	.word	0x40011400
 8006640:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006648:	2200      	movs	r2, #0
 800664a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800664e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006652:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006656:	4642      	mov	r2, r8
 8006658:	464b      	mov	r3, r9
 800665a:	1891      	adds	r1, r2, r2
 800665c:	6239      	str	r1, [r7, #32]
 800665e:	415b      	adcs	r3, r3
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
 8006662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006666:	4641      	mov	r1, r8
 8006668:	1854      	adds	r4, r2, r1
 800666a:	4649      	mov	r1, r9
 800666c:	eb43 0501 	adc.w	r5, r3, r1
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	00eb      	lsls	r3, r5, #3
 800667a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800667e:	00e2      	lsls	r2, r4, #3
 8006680:	4614      	mov	r4, r2
 8006682:	461d      	mov	r5, r3
 8006684:	4643      	mov	r3, r8
 8006686:	18e3      	adds	r3, r4, r3
 8006688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800668c:	464b      	mov	r3, r9
 800668e:	eb45 0303 	adc.w	r3, r5, r3
 8006692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066b2:	4629      	mov	r1, r5
 80066b4:	008b      	lsls	r3, r1, #2
 80066b6:	4621      	mov	r1, r4
 80066b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066bc:	4621      	mov	r1, r4
 80066be:	008a      	lsls	r2, r1, #2
 80066c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066c4:	f7fa fa72 	bl	8000bac <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4b60      	ldr	r3, [pc, #384]	@ (8006850 <UART_SetConfig+0x4e4>)
 80066ce:	fba3 2302 	umull	r2, r3, r3, r2
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	011c      	lsls	r4, r3, #4
 80066d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	1891      	adds	r1, r2, r2
 80066ee:	61b9      	str	r1, [r7, #24]
 80066f0:	415b      	adcs	r3, r3
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066f8:	4641      	mov	r1, r8
 80066fa:	1851      	adds	r1, r2, r1
 80066fc:	6139      	str	r1, [r7, #16]
 80066fe:	4649      	mov	r1, r9
 8006700:	414b      	adcs	r3, r1
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006710:	4659      	mov	r1, fp
 8006712:	00cb      	lsls	r3, r1, #3
 8006714:	4651      	mov	r1, sl
 8006716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671a:	4651      	mov	r1, sl
 800671c:	00ca      	lsls	r2, r1, #3
 800671e:	4610      	mov	r0, r2
 8006720:	4619      	mov	r1, r3
 8006722:	4603      	mov	r3, r0
 8006724:	4642      	mov	r2, r8
 8006726:	189b      	adds	r3, r3, r2
 8006728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800672c:	464b      	mov	r3, r9
 800672e:	460a      	mov	r2, r1
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006742:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006750:	4649      	mov	r1, r9
 8006752:	008b      	lsls	r3, r1, #2
 8006754:	4641      	mov	r1, r8
 8006756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675a:	4641      	mov	r1, r8
 800675c:	008a      	lsls	r2, r1, #2
 800675e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006762:	f7fa fa23 	bl	8000bac <__aeabi_uldivmod>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4611      	mov	r1, r2
 800676c:	4b38      	ldr	r3, [pc, #224]	@ (8006850 <UART_SetConfig+0x4e4>)
 800676e:	fba3 2301 	umull	r2, r3, r3, r1
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	2264      	movs	r2, #100	@ 0x64
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	1acb      	subs	r3, r1, r3
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	3332      	adds	r3, #50	@ 0x32
 8006780:	4a33      	ldr	r2, [pc, #204]	@ (8006850 <UART_SetConfig+0x4e4>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800678c:	441c      	add	r4, r3
 800678e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006792:	2200      	movs	r2, #0
 8006794:	673b      	str	r3, [r7, #112]	@ 0x70
 8006796:	677a      	str	r2, [r7, #116]	@ 0x74
 8006798:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	1891      	adds	r1, r2, r2
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	415b      	adcs	r3, r3
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067ac:	4641      	mov	r1, r8
 80067ae:	1851      	adds	r1, r2, r1
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	4649      	mov	r1, r9
 80067b4:	414b      	adcs	r3, r1
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067c4:	4659      	mov	r1, fp
 80067c6:	00cb      	lsls	r3, r1, #3
 80067c8:	4651      	mov	r1, sl
 80067ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ce:	4651      	mov	r1, sl
 80067d0:	00ca      	lsls	r2, r1, #3
 80067d2:	4610      	mov	r0, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	4603      	mov	r3, r0
 80067d8:	4642      	mov	r2, r8
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067de:	464b      	mov	r3, r9
 80067e0:	460a      	mov	r2, r1
 80067e2:	eb42 0303 	adc.w	r3, r2, r3
 80067e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80067f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006800:	4649      	mov	r1, r9
 8006802:	008b      	lsls	r3, r1, #2
 8006804:	4641      	mov	r1, r8
 8006806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680a:	4641      	mov	r1, r8
 800680c:	008a      	lsls	r2, r1, #2
 800680e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006812:	f7fa f9cb 	bl	8000bac <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <UART_SetConfig+0x4e4>)
 800681c:	fba3 1302 	umull	r1, r3, r3, r2
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	2164      	movs	r1, #100	@ 0x64
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	3332      	adds	r3, #50	@ 0x32
 800682e:	4a08      	ldr	r2, [pc, #32]	@ (8006850 <UART_SetConfig+0x4e4>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	f003 020f 	and.w	r2, r3, #15
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4422      	add	r2, r4
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800684a:	46bd      	mov	sp, r7
 800684c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006850:	51eb851f 	.word	0x51eb851f

08006854 <std>:
 8006854:	2300      	movs	r3, #0
 8006856:	b510      	push	{r4, lr}
 8006858:	4604      	mov	r4, r0
 800685a:	e9c0 3300 	strd	r3, r3, [r0]
 800685e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006862:	6083      	str	r3, [r0, #8]
 8006864:	8181      	strh	r1, [r0, #12]
 8006866:	6643      	str	r3, [r0, #100]	@ 0x64
 8006868:	81c2      	strh	r2, [r0, #14]
 800686a:	6183      	str	r3, [r0, #24]
 800686c:	4619      	mov	r1, r3
 800686e:	2208      	movs	r2, #8
 8006870:	305c      	adds	r0, #92	@ 0x5c
 8006872:	f000 f906 	bl	8006a82 <memset>
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <std+0x58>)
 8006878:	6263      	str	r3, [r4, #36]	@ 0x24
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <std+0x5c>)
 800687c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <std+0x60>)
 8006880:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <std+0x64>)
 8006884:	6323      	str	r3, [r4, #48]	@ 0x30
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <std+0x68>)
 8006888:	6224      	str	r4, [r4, #32]
 800688a:	429c      	cmp	r4, r3
 800688c:	d006      	beq.n	800689c <std+0x48>
 800688e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006892:	4294      	cmp	r4, r2
 8006894:	d002      	beq.n	800689c <std+0x48>
 8006896:	33d0      	adds	r3, #208	@ 0xd0
 8006898:	429c      	cmp	r4, r3
 800689a:	d105      	bne.n	80068a8 <std+0x54>
 800689c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a4:	f000 b966 	b.w	8006b74 <__retarget_lock_init_recursive>
 80068a8:	bd10      	pop	{r4, pc}
 80068aa:	bf00      	nop
 80068ac:	080069fd 	.word	0x080069fd
 80068b0:	08006a1f 	.word	0x08006a1f
 80068b4:	08006a57 	.word	0x08006a57
 80068b8:	08006a7b 	.word	0x08006a7b
 80068bc:	2000027c 	.word	0x2000027c

080068c0 <stdio_exit_handler>:
 80068c0:	4a02      	ldr	r2, [pc, #8]	@ (80068cc <stdio_exit_handler+0xc>)
 80068c2:	4903      	ldr	r1, [pc, #12]	@ (80068d0 <stdio_exit_handler+0x10>)
 80068c4:	4803      	ldr	r0, [pc, #12]	@ (80068d4 <stdio_exit_handler+0x14>)
 80068c6:	f000 b869 	b.w	800699c <_fwalk_sglue>
 80068ca:	bf00      	nop
 80068cc:	20000018 	.word	0x20000018
 80068d0:	08007415 	.word	0x08007415
 80068d4:	20000028 	.word	0x20000028

080068d8 <cleanup_stdio>:
 80068d8:	6841      	ldr	r1, [r0, #4]
 80068da:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <cleanup_stdio+0x34>)
 80068dc:	4299      	cmp	r1, r3
 80068de:	b510      	push	{r4, lr}
 80068e0:	4604      	mov	r4, r0
 80068e2:	d001      	beq.n	80068e8 <cleanup_stdio+0x10>
 80068e4:	f000 fd96 	bl	8007414 <_fflush_r>
 80068e8:	68a1      	ldr	r1, [r4, #8]
 80068ea:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <cleanup_stdio+0x38>)
 80068ec:	4299      	cmp	r1, r3
 80068ee:	d002      	beq.n	80068f6 <cleanup_stdio+0x1e>
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fd8f 	bl	8007414 <_fflush_r>
 80068f6:	68e1      	ldr	r1, [r4, #12]
 80068f8:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <cleanup_stdio+0x3c>)
 80068fa:	4299      	cmp	r1, r3
 80068fc:	d004      	beq.n	8006908 <cleanup_stdio+0x30>
 80068fe:	4620      	mov	r0, r4
 8006900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006904:	f000 bd86 	b.w	8007414 <_fflush_r>
 8006908:	bd10      	pop	{r4, pc}
 800690a:	bf00      	nop
 800690c:	2000027c 	.word	0x2000027c
 8006910:	200002e4 	.word	0x200002e4
 8006914:	2000034c 	.word	0x2000034c

08006918 <global_stdio_init.part.0>:
 8006918:	b510      	push	{r4, lr}
 800691a:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <global_stdio_init.part.0+0x30>)
 800691c:	4c0b      	ldr	r4, [pc, #44]	@ (800694c <global_stdio_init.part.0+0x34>)
 800691e:	4a0c      	ldr	r2, [pc, #48]	@ (8006950 <global_stdio_init.part.0+0x38>)
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	4620      	mov	r0, r4
 8006924:	2200      	movs	r2, #0
 8006926:	2104      	movs	r1, #4
 8006928:	f7ff ff94 	bl	8006854 <std>
 800692c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006930:	2201      	movs	r2, #1
 8006932:	2109      	movs	r1, #9
 8006934:	f7ff ff8e 	bl	8006854 <std>
 8006938:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800693c:	2202      	movs	r2, #2
 800693e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006942:	2112      	movs	r1, #18
 8006944:	f7ff bf86 	b.w	8006854 <std>
 8006948:	200003b4 	.word	0x200003b4
 800694c:	2000027c 	.word	0x2000027c
 8006950:	080068c1 	.word	0x080068c1

08006954 <__sfp_lock_acquire>:
 8006954:	4801      	ldr	r0, [pc, #4]	@ (800695c <__sfp_lock_acquire+0x8>)
 8006956:	f000 b90e 	b.w	8006b76 <__retarget_lock_acquire_recursive>
 800695a:	bf00      	nop
 800695c:	200003bd 	.word	0x200003bd

08006960 <__sfp_lock_release>:
 8006960:	4801      	ldr	r0, [pc, #4]	@ (8006968 <__sfp_lock_release+0x8>)
 8006962:	f000 b909 	b.w	8006b78 <__retarget_lock_release_recursive>
 8006966:	bf00      	nop
 8006968:	200003bd 	.word	0x200003bd

0800696c <__sinit>:
 800696c:	b510      	push	{r4, lr}
 800696e:	4604      	mov	r4, r0
 8006970:	f7ff fff0 	bl	8006954 <__sfp_lock_acquire>
 8006974:	6a23      	ldr	r3, [r4, #32]
 8006976:	b11b      	cbz	r3, 8006980 <__sinit+0x14>
 8006978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697c:	f7ff bff0 	b.w	8006960 <__sfp_lock_release>
 8006980:	4b04      	ldr	r3, [pc, #16]	@ (8006994 <__sinit+0x28>)
 8006982:	6223      	str	r3, [r4, #32]
 8006984:	4b04      	ldr	r3, [pc, #16]	@ (8006998 <__sinit+0x2c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f5      	bne.n	8006978 <__sinit+0xc>
 800698c:	f7ff ffc4 	bl	8006918 <global_stdio_init.part.0>
 8006990:	e7f2      	b.n	8006978 <__sinit+0xc>
 8006992:	bf00      	nop
 8006994:	080068d9 	.word	0x080068d9
 8006998:	200003b4 	.word	0x200003b4

0800699c <_fwalk_sglue>:
 800699c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a0:	4607      	mov	r7, r0
 80069a2:	4688      	mov	r8, r1
 80069a4:	4614      	mov	r4, r2
 80069a6:	2600      	movs	r6, #0
 80069a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ac:	f1b9 0901 	subs.w	r9, r9, #1
 80069b0:	d505      	bpl.n	80069be <_fwalk_sglue+0x22>
 80069b2:	6824      	ldr	r4, [r4, #0]
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d1f7      	bne.n	80069a8 <_fwalk_sglue+0xc>
 80069b8:	4630      	mov	r0, r6
 80069ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069be:	89ab      	ldrh	r3, [r5, #12]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d907      	bls.n	80069d4 <_fwalk_sglue+0x38>
 80069c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069c8:	3301      	adds	r3, #1
 80069ca:	d003      	beq.n	80069d4 <_fwalk_sglue+0x38>
 80069cc:	4629      	mov	r1, r5
 80069ce:	4638      	mov	r0, r7
 80069d0:	47c0      	blx	r8
 80069d2:	4306      	orrs	r6, r0
 80069d4:	3568      	adds	r5, #104	@ 0x68
 80069d6:	e7e9      	b.n	80069ac <_fwalk_sglue+0x10>

080069d8 <iprintf>:
 80069d8:	b40f      	push	{r0, r1, r2, r3}
 80069da:	b507      	push	{r0, r1, r2, lr}
 80069dc:	4906      	ldr	r1, [pc, #24]	@ (80069f8 <iprintf+0x20>)
 80069de:	ab04      	add	r3, sp, #16
 80069e0:	6808      	ldr	r0, [r1, #0]
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	6881      	ldr	r1, [r0, #8]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f000 f9e9 	bl	8006dc0 <_vfiprintf_r>
 80069ee:	b003      	add	sp, #12
 80069f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr
 80069f8:	20000024 	.word	0x20000024

080069fc <__sread>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	f000 f868 	bl	8006ad8 <_read_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	bfab      	itete	ge
 8006a0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a10:	181b      	addge	r3, r3, r0
 8006a12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a16:	bfac      	ite	ge
 8006a18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a1a:	81a3      	strhlt	r3, [r4, #12]
 8006a1c:	bd10      	pop	{r4, pc}

08006a1e <__swrite>:
 8006a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a22:	461f      	mov	r7, r3
 8006a24:	898b      	ldrh	r3, [r1, #12]
 8006a26:	05db      	lsls	r3, r3, #23
 8006a28:	4605      	mov	r5, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	d505      	bpl.n	8006a3c <__swrite+0x1e>
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	2302      	movs	r3, #2
 8006a36:	2200      	movs	r2, #0
 8006a38:	f000 f83c 	bl	8006ab4 <_lseek_r>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	4632      	mov	r2, r6
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	f000 b853 	b.w	8006afc <_write_r>

08006a56 <__sseek>:
 8006a56:	b510      	push	{r4, lr}
 8006a58:	460c      	mov	r4, r1
 8006a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5e:	f000 f829 	bl	8006ab4 <_lseek_r>
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	bf15      	itete	ne
 8006a68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a72:	81a3      	strheq	r3, [r4, #12]
 8006a74:	bf18      	it	ne
 8006a76:	81a3      	strhne	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__sclose>:
 8006a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7e:	f000 b809 	b.w	8006a94 <_close_r>

08006a82 <memset>:
 8006a82:	4402      	add	r2, r0
 8006a84:	4603      	mov	r3, r0
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d100      	bne.n	8006a8c <memset+0xa>
 8006a8a:	4770      	bx	lr
 8006a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a90:	e7f9      	b.n	8006a86 <memset+0x4>
	...

08006a94 <_close_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d06      	ldr	r5, [pc, #24]	@ (8006ab0 <_close_r+0x1c>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f7fb fa2b 	bl	8001efa <_close>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_close_r+0x1a>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_close_r+0x1a>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	200003b8 	.word	0x200003b8

08006ab4 <_lseek_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d07      	ldr	r5, [pc, #28]	@ (8006ad4 <_lseek_r+0x20>)
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4608      	mov	r0, r1
 8006abc:	4611      	mov	r1, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f7fb fa40 	bl	8001f48 <_lseek>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_lseek_r+0x1e>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_lseek_r+0x1e>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200003b8 	.word	0x200003b8

08006ad8 <_read_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d07      	ldr	r5, [pc, #28]	@ (8006af8 <_read_r+0x20>)
 8006adc:	4604      	mov	r4, r0
 8006ade:	4608      	mov	r0, r1
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f7fb f9ea 	bl	8001ec0 <_read>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_read_r+0x1e>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_read_r+0x1e>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	200003b8 	.word	0x200003b8

08006afc <_write_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d07      	ldr	r5, [pc, #28]	@ (8006b1c <_write_r+0x20>)
 8006b00:	4604      	mov	r4, r0
 8006b02:	4608      	mov	r0, r1
 8006b04:	4611      	mov	r1, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	602a      	str	r2, [r5, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f7fa f9c6 	bl	8000e9c <_write>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_write_r+0x1e>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_write_r+0x1e>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	200003b8 	.word	0x200003b8

08006b20 <__errno>:
 8006b20:	4b01      	ldr	r3, [pc, #4]	@ (8006b28 <__errno+0x8>)
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000024 	.word	0x20000024

08006b2c <__libc_init_array>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b64 <__libc_init_array+0x38>)
 8006b30:	4c0d      	ldr	r4, [pc, #52]	@ (8006b68 <__libc_init_array+0x3c>)
 8006b32:	1b64      	subs	r4, r4, r5
 8006b34:	10a4      	asrs	r4, r4, #2
 8006b36:	2600      	movs	r6, #0
 8006b38:	42a6      	cmp	r6, r4
 8006b3a:	d109      	bne.n	8006b50 <__libc_init_array+0x24>
 8006b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b6c <__libc_init_array+0x40>)
 8006b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b70 <__libc_init_array+0x44>)
 8006b40:	f000 ff5a 	bl	80079f8 <_init>
 8006b44:	1b64      	subs	r4, r4, r5
 8006b46:	10a4      	asrs	r4, r4, #2
 8006b48:	2600      	movs	r6, #0
 8006b4a:	42a6      	cmp	r6, r4
 8006b4c:	d105      	bne.n	8006b5a <__libc_init_array+0x2e>
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b54:	4798      	blx	r3
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7ee      	b.n	8006b38 <__libc_init_array+0xc>
 8006b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5e:	4798      	blx	r3
 8006b60:	3601      	adds	r6, #1
 8006b62:	e7f2      	b.n	8006b4a <__libc_init_array+0x1e>
 8006b64:	08007ab0 	.word	0x08007ab0
 8006b68:	08007ab0 	.word	0x08007ab0
 8006b6c:	08007ab0 	.word	0x08007ab0
 8006b70:	08007ab4 	.word	0x08007ab4

08006b74 <__retarget_lock_init_recursive>:
 8006b74:	4770      	bx	lr

08006b76 <__retarget_lock_acquire_recursive>:
 8006b76:	4770      	bx	lr

08006b78 <__retarget_lock_release_recursive>:
 8006b78:	4770      	bx	lr
	...

08006b7c <_free_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4605      	mov	r5, r0
 8006b80:	2900      	cmp	r1, #0
 8006b82:	d041      	beq.n	8006c08 <_free_r+0x8c>
 8006b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b88:	1f0c      	subs	r4, r1, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	bfb8      	it	lt
 8006b8e:	18e4      	addlt	r4, r4, r3
 8006b90:	f000 f8e0 	bl	8006d54 <__malloc_lock>
 8006b94:	4a1d      	ldr	r2, [pc, #116]	@ (8006c0c <_free_r+0x90>)
 8006b96:	6813      	ldr	r3, [r2, #0]
 8006b98:	b933      	cbnz	r3, 8006ba8 <_free_r+0x2c>
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	6014      	str	r4, [r2, #0]
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ba4:	f000 b8dc 	b.w	8006d60 <__malloc_unlock>
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d908      	bls.n	8006bbe <_free_r+0x42>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	1821      	adds	r1, r4, r0
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	bf01      	itttt	eq
 8006bb4:	6819      	ldreq	r1, [r3, #0]
 8006bb6:	685b      	ldreq	r3, [r3, #4]
 8006bb8:	1809      	addeq	r1, r1, r0
 8006bba:	6021      	streq	r1, [r4, #0]
 8006bbc:	e7ed      	b.n	8006b9a <_free_r+0x1e>
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	b10b      	cbz	r3, 8006bc8 <_free_r+0x4c>
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	d9fa      	bls.n	8006bbe <_free_r+0x42>
 8006bc8:	6811      	ldr	r1, [r2, #0]
 8006bca:	1850      	adds	r0, r2, r1
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d10b      	bne.n	8006be8 <_free_r+0x6c>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	4401      	add	r1, r0
 8006bd4:	1850      	adds	r0, r2, r1
 8006bd6:	4283      	cmp	r3, r0
 8006bd8:	6011      	str	r1, [r2, #0]
 8006bda:	d1e0      	bne.n	8006b9e <_free_r+0x22>
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	6053      	str	r3, [r2, #4]
 8006be2:	4408      	add	r0, r1
 8006be4:	6010      	str	r0, [r2, #0]
 8006be6:	e7da      	b.n	8006b9e <_free_r+0x22>
 8006be8:	d902      	bls.n	8006bf0 <_free_r+0x74>
 8006bea:	230c      	movs	r3, #12
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	e7d6      	b.n	8006b9e <_free_r+0x22>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	1821      	adds	r1, r4, r0
 8006bf4:	428b      	cmp	r3, r1
 8006bf6:	bf04      	itt	eq
 8006bf8:	6819      	ldreq	r1, [r3, #0]
 8006bfa:	685b      	ldreq	r3, [r3, #4]
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	bf04      	itt	eq
 8006c00:	1809      	addeq	r1, r1, r0
 8006c02:	6021      	streq	r1, [r4, #0]
 8006c04:	6054      	str	r4, [r2, #4]
 8006c06:	e7ca      	b.n	8006b9e <_free_r+0x22>
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
 8006c0a:	bf00      	nop
 8006c0c:	200003c4 	.word	0x200003c4

08006c10 <sbrk_aligned>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4e0f      	ldr	r6, [pc, #60]	@ (8006c50 <sbrk_aligned+0x40>)
 8006c14:	460c      	mov	r4, r1
 8006c16:	6831      	ldr	r1, [r6, #0]
 8006c18:	4605      	mov	r5, r0
 8006c1a:	b911      	cbnz	r1, 8006c22 <sbrk_aligned+0x12>
 8006c1c:	f000 fcb6 	bl	800758c <_sbrk_r>
 8006c20:	6030      	str	r0, [r6, #0]
 8006c22:	4621      	mov	r1, r4
 8006c24:	4628      	mov	r0, r5
 8006c26:	f000 fcb1 	bl	800758c <_sbrk_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	d103      	bne.n	8006c36 <sbrk_aligned+0x26>
 8006c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c32:	4620      	mov	r0, r4
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
 8006c36:	1cc4      	adds	r4, r0, #3
 8006c38:	f024 0403 	bic.w	r4, r4, #3
 8006c3c:	42a0      	cmp	r0, r4
 8006c3e:	d0f8      	beq.n	8006c32 <sbrk_aligned+0x22>
 8006c40:	1a21      	subs	r1, r4, r0
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 fca2 	bl	800758c <_sbrk_r>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d1f2      	bne.n	8006c32 <sbrk_aligned+0x22>
 8006c4c:	e7ef      	b.n	8006c2e <sbrk_aligned+0x1e>
 8006c4e:	bf00      	nop
 8006c50:	200003c0 	.word	0x200003c0

08006c54 <_malloc_r>:
 8006c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c58:	1ccd      	adds	r5, r1, #3
 8006c5a:	f025 0503 	bic.w	r5, r5, #3
 8006c5e:	3508      	adds	r5, #8
 8006c60:	2d0c      	cmp	r5, #12
 8006c62:	bf38      	it	cc
 8006c64:	250c      	movcc	r5, #12
 8006c66:	2d00      	cmp	r5, #0
 8006c68:	4606      	mov	r6, r0
 8006c6a:	db01      	blt.n	8006c70 <_malloc_r+0x1c>
 8006c6c:	42a9      	cmp	r1, r5
 8006c6e:	d904      	bls.n	8006c7a <_malloc_r+0x26>
 8006c70:	230c      	movs	r3, #12
 8006c72:	6033      	str	r3, [r6, #0]
 8006c74:	2000      	movs	r0, #0
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d50 <_malloc_r+0xfc>
 8006c7e:	f000 f869 	bl	8006d54 <__malloc_lock>
 8006c82:	f8d8 3000 	ldr.w	r3, [r8]
 8006c86:	461c      	mov	r4, r3
 8006c88:	bb44      	cbnz	r4, 8006cdc <_malloc_r+0x88>
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff ffbf 	bl	8006c10 <sbrk_aligned>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	4604      	mov	r4, r0
 8006c96:	d158      	bne.n	8006d4a <_malloc_r+0xf6>
 8006c98:	f8d8 4000 	ldr.w	r4, [r8]
 8006c9c:	4627      	mov	r7, r4
 8006c9e:	2f00      	cmp	r7, #0
 8006ca0:	d143      	bne.n	8006d2a <_malloc_r+0xd6>
 8006ca2:	2c00      	cmp	r4, #0
 8006ca4:	d04b      	beq.n	8006d3e <_malloc_r+0xea>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	4639      	mov	r1, r7
 8006caa:	4630      	mov	r0, r6
 8006cac:	eb04 0903 	add.w	r9, r4, r3
 8006cb0:	f000 fc6c 	bl	800758c <_sbrk_r>
 8006cb4:	4581      	cmp	r9, r0
 8006cb6:	d142      	bne.n	8006d3e <_malloc_r+0xea>
 8006cb8:	6821      	ldr	r1, [r4, #0]
 8006cba:	1a6d      	subs	r5, r5, r1
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff ffa6 	bl	8006c10 <sbrk_aligned>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d03a      	beq.n	8006d3e <_malloc_r+0xea>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	442b      	add	r3, r5
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	bb62      	cbnz	r2, 8006d30 <_malloc_r+0xdc>
 8006cd6:	f8c8 7000 	str.w	r7, [r8]
 8006cda:	e00f      	b.n	8006cfc <_malloc_r+0xa8>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	1b52      	subs	r2, r2, r5
 8006ce0:	d420      	bmi.n	8006d24 <_malloc_r+0xd0>
 8006ce2:	2a0b      	cmp	r2, #11
 8006ce4:	d917      	bls.n	8006d16 <_malloc_r+0xc2>
 8006ce6:	1961      	adds	r1, r4, r5
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	6025      	str	r5, [r4, #0]
 8006cec:	bf18      	it	ne
 8006cee:	6059      	strne	r1, [r3, #4]
 8006cf0:	6863      	ldr	r3, [r4, #4]
 8006cf2:	bf08      	it	eq
 8006cf4:	f8c8 1000 	streq.w	r1, [r8]
 8006cf8:	5162      	str	r2, [r4, r5]
 8006cfa:	604b      	str	r3, [r1, #4]
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f82f 	bl	8006d60 <__malloc_unlock>
 8006d02:	f104 000b 	add.w	r0, r4, #11
 8006d06:	1d23      	adds	r3, r4, #4
 8006d08:	f020 0007 	bic.w	r0, r0, #7
 8006d0c:	1ac2      	subs	r2, r0, r3
 8006d0e:	bf1c      	itt	ne
 8006d10:	1a1b      	subne	r3, r3, r0
 8006d12:	50a3      	strne	r3, [r4, r2]
 8006d14:	e7af      	b.n	8006c76 <_malloc_r+0x22>
 8006d16:	6862      	ldr	r2, [r4, #4]
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	bf0c      	ite	eq
 8006d1c:	f8c8 2000 	streq.w	r2, [r8]
 8006d20:	605a      	strne	r2, [r3, #4]
 8006d22:	e7eb      	b.n	8006cfc <_malloc_r+0xa8>
 8006d24:	4623      	mov	r3, r4
 8006d26:	6864      	ldr	r4, [r4, #4]
 8006d28:	e7ae      	b.n	8006c88 <_malloc_r+0x34>
 8006d2a:	463c      	mov	r4, r7
 8006d2c:	687f      	ldr	r7, [r7, #4]
 8006d2e:	e7b6      	b.n	8006c9e <_malloc_r+0x4a>
 8006d30:	461a      	mov	r2, r3
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	d1fb      	bne.n	8006d30 <_malloc_r+0xdc>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6053      	str	r3, [r2, #4]
 8006d3c:	e7de      	b.n	8006cfc <_malloc_r+0xa8>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	4630      	mov	r0, r6
 8006d44:	f000 f80c 	bl	8006d60 <__malloc_unlock>
 8006d48:	e794      	b.n	8006c74 <_malloc_r+0x20>
 8006d4a:	6005      	str	r5, [r0, #0]
 8006d4c:	e7d6      	b.n	8006cfc <_malloc_r+0xa8>
 8006d4e:	bf00      	nop
 8006d50:	200003c4 	.word	0x200003c4

08006d54 <__malloc_lock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	@ (8006d5c <__malloc_lock+0x8>)
 8006d56:	f7ff bf0e 	b.w	8006b76 <__retarget_lock_acquire_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200003bc 	.word	0x200003bc

08006d60 <__malloc_unlock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	@ (8006d68 <__malloc_unlock+0x8>)
 8006d62:	f7ff bf09 	b.w	8006b78 <__retarget_lock_release_recursive>
 8006d66:	bf00      	nop
 8006d68:	200003bc 	.word	0x200003bc

08006d6c <__sfputc_r>:
 8006d6c:	6893      	ldr	r3, [r2, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	b410      	push	{r4}
 8006d74:	6093      	str	r3, [r2, #8]
 8006d76:	da08      	bge.n	8006d8a <__sfputc_r+0x1e>
 8006d78:	6994      	ldr	r4, [r2, #24]
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	db01      	blt.n	8006d82 <__sfputc_r+0x16>
 8006d7e:	290a      	cmp	r1, #10
 8006d80:	d103      	bne.n	8006d8a <__sfputc_r+0x1e>
 8006d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d86:	f000 bb6d 	b.w	8007464 <__swbuf_r>
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	1c58      	adds	r0, r3, #1
 8006d8e:	6010      	str	r0, [r2, #0]
 8006d90:	7019      	strb	r1, [r3, #0]
 8006d92:	4608      	mov	r0, r1
 8006d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <__sfputs_r>:
 8006d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	460f      	mov	r7, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	18d5      	adds	r5, r2, r3
 8006da4:	42ac      	cmp	r4, r5
 8006da6:	d101      	bne.n	8006dac <__sfputs_r+0x12>
 8006da8:	2000      	movs	r0, #0
 8006daa:	e007      	b.n	8006dbc <__sfputs_r+0x22>
 8006dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db0:	463a      	mov	r2, r7
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ffda 	bl	8006d6c <__sfputc_r>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d1f3      	bne.n	8006da4 <__sfputs_r+0xa>
 8006dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dc0 <_vfiprintf_r>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	b09d      	sub	sp, #116	@ 0x74
 8006dc8:	4614      	mov	r4, r2
 8006dca:	4698      	mov	r8, r3
 8006dcc:	4606      	mov	r6, r0
 8006dce:	b118      	cbz	r0, 8006dd8 <_vfiprintf_r+0x18>
 8006dd0:	6a03      	ldr	r3, [r0, #32]
 8006dd2:	b90b      	cbnz	r3, 8006dd8 <_vfiprintf_r+0x18>
 8006dd4:	f7ff fdca 	bl	800696c <__sinit>
 8006dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d405      	bmi.n	8006dea <_vfiprintf_r+0x2a>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	059a      	lsls	r2, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_vfiprintf_r+0x2a>
 8006de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006de6:	f7ff fec6 	bl	8006b76 <__retarget_lock_acquire_recursive>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	071b      	lsls	r3, r3, #28
 8006dee:	d501      	bpl.n	8006df4 <_vfiprintf_r+0x34>
 8006df0:	692b      	ldr	r3, [r5, #16]
 8006df2:	b99b      	cbnz	r3, 8006e1c <_vfiprintf_r+0x5c>
 8006df4:	4629      	mov	r1, r5
 8006df6:	4630      	mov	r0, r6
 8006df8:	f000 fb72 	bl	80074e0 <__swsetup_r>
 8006dfc:	b170      	cbz	r0, 8006e1c <_vfiprintf_r+0x5c>
 8006dfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e00:	07dc      	lsls	r4, r3, #31
 8006e02:	d504      	bpl.n	8006e0e <_vfiprintf_r+0x4e>
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	b01d      	add	sp, #116	@ 0x74
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d4f7      	bmi.n	8006e04 <_vfiprintf_r+0x44>
 8006e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e16:	f7ff feaf 	bl	8006b78 <__retarget_lock_release_recursive>
 8006e1a:	e7f3      	b.n	8006e04 <_vfiprintf_r+0x44>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e20:	2320      	movs	r3, #32
 8006e22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2a:	2330      	movs	r3, #48	@ 0x30
 8006e2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fdc <_vfiprintf_r+0x21c>
 8006e30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e34:	f04f 0901 	mov.w	r9, #1
 8006e38:	4623      	mov	r3, r4
 8006e3a:	469a      	mov	sl, r3
 8006e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e40:	b10a      	cbz	r2, 8006e46 <_vfiprintf_r+0x86>
 8006e42:	2a25      	cmp	r2, #37	@ 0x25
 8006e44:	d1f9      	bne.n	8006e3a <_vfiprintf_r+0x7a>
 8006e46:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4a:	d00b      	beq.n	8006e64 <_vfiprintf_r+0xa4>
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ffa1 	bl	8006d9a <__sfputs_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f000 80a7 	beq.w	8006fac <_vfiprintf_r+0x1ec>
 8006e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e60:	445a      	add	r2, fp
 8006e62:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 809f 	beq.w	8006fac <_vfiprintf_r+0x1ec>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e78:	f10a 0a01 	add.w	sl, sl, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	9307      	str	r3, [sp, #28]
 8006e80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e84:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e86:	4654      	mov	r4, sl
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8e:	4853      	ldr	r0, [pc, #332]	@ (8006fdc <_vfiprintf_r+0x21c>)
 8006e90:	f7f9 f9be 	bl	8000210 <memchr>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	b9d8      	cbnz	r0, 8006ed0 <_vfiprintf_r+0x110>
 8006e98:	06d1      	lsls	r1, r2, #27
 8006e9a:	bf44      	itt	mi
 8006e9c:	2320      	movmi	r3, #32
 8006e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ea2:	0713      	lsls	r3, r2, #28
 8006ea4:	bf44      	itt	mi
 8006ea6:	232b      	movmi	r3, #43	@ 0x2b
 8006ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eb2:	d015      	beq.n	8006ee0 <_vfiprintf_r+0x120>
 8006eb4:	9a07      	ldr	r2, [sp, #28]
 8006eb6:	4654      	mov	r4, sl
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f04f 0c0a 	mov.w	ip, #10
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec4:	3b30      	subs	r3, #48	@ 0x30
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d94b      	bls.n	8006f62 <_vfiprintf_r+0x1a2>
 8006eca:	b1b0      	cbz	r0, 8006efa <_vfiprintf_r+0x13a>
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	e014      	b.n	8006efa <_vfiprintf_r+0x13a>
 8006ed0:	eba0 0308 	sub.w	r3, r0, r8
 8006ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	46a2      	mov	sl, r4
 8006ede:	e7d2      	b.n	8006e86 <_vfiprintf_r+0xc6>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9103      	str	r1, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfbb      	ittet	lt
 8006eec:	425b      	neglt	r3, r3
 8006eee:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef2:	9307      	strge	r3, [sp, #28]
 8006ef4:	9307      	strlt	r3, [sp, #28]
 8006ef6:	bfb8      	it	lt
 8006ef8:	9204      	strlt	r2, [sp, #16]
 8006efa:	7823      	ldrb	r3, [r4, #0]
 8006efc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006efe:	d10a      	bne.n	8006f16 <_vfiprintf_r+0x156>
 8006f00:	7863      	ldrb	r3, [r4, #1]
 8006f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f04:	d132      	bne.n	8006f6c <_vfiprintf_r+0x1ac>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	1d1a      	adds	r2, r3, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	9203      	str	r2, [sp, #12]
 8006f0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f12:	3402      	adds	r4, #2
 8006f14:	9305      	str	r3, [sp, #20]
 8006f16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fec <_vfiprintf_r+0x22c>
 8006f1a:	7821      	ldrb	r1, [r4, #0]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	4650      	mov	r0, sl
 8006f20:	f7f9 f976 	bl	8000210 <memchr>
 8006f24:	b138      	cbz	r0, 8006f36 <_vfiprintf_r+0x176>
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	eba0 000a 	sub.w	r0, r0, sl
 8006f2c:	2240      	movs	r2, #64	@ 0x40
 8006f2e:	4082      	lsls	r2, r0
 8006f30:	4313      	orrs	r3, r2
 8006f32:	3401      	adds	r4, #1
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f3a:	4829      	ldr	r0, [pc, #164]	@ (8006fe0 <_vfiprintf_r+0x220>)
 8006f3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f40:	2206      	movs	r2, #6
 8006f42:	f7f9 f965 	bl	8000210 <memchr>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d03f      	beq.n	8006fca <_vfiprintf_r+0x20a>
 8006f4a:	4b26      	ldr	r3, [pc, #152]	@ (8006fe4 <_vfiprintf_r+0x224>)
 8006f4c:	bb1b      	cbnz	r3, 8006f96 <_vfiprintf_r+0x1d6>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	3307      	adds	r3, #7
 8006f52:	f023 0307 	bic.w	r3, r3, #7
 8006f56:	3308      	adds	r3, #8
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5c:	443b      	add	r3, r7
 8006f5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f60:	e76a      	b.n	8006e38 <_vfiprintf_r+0x78>
 8006f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f66:	460c      	mov	r4, r1
 8006f68:	2001      	movs	r0, #1
 8006f6a:	e7a8      	b.n	8006ebe <_vfiprintf_r+0xfe>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	3401      	adds	r4, #1
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	4619      	mov	r1, r3
 8006f74:	f04f 0c0a 	mov.w	ip, #10
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f7e:	3a30      	subs	r2, #48	@ 0x30
 8006f80:	2a09      	cmp	r2, #9
 8006f82:	d903      	bls.n	8006f8c <_vfiprintf_r+0x1cc>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0c6      	beq.n	8006f16 <_vfiprintf_r+0x156>
 8006f88:	9105      	str	r1, [sp, #20]
 8006f8a:	e7c4      	b.n	8006f16 <_vfiprintf_r+0x156>
 8006f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f90:	4604      	mov	r4, r0
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f0      	b.n	8006f78 <_vfiprintf_r+0x1b8>
 8006f96:	ab03      	add	r3, sp, #12
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	4b12      	ldr	r3, [pc, #72]	@ (8006fe8 <_vfiprintf_r+0x228>)
 8006f9e:	a904      	add	r1, sp, #16
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f3af 8000 	nop.w
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	1c78      	adds	r0, r7, #1
 8006faa:	d1d6      	bne.n	8006f5a <_vfiprintf_r+0x19a>
 8006fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fae:	07d9      	lsls	r1, r3, #31
 8006fb0:	d405      	bmi.n	8006fbe <_vfiprintf_r+0x1fe>
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	059a      	lsls	r2, r3, #22
 8006fb6:	d402      	bmi.n	8006fbe <_vfiprintf_r+0x1fe>
 8006fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fba:	f7ff fddd 	bl	8006b78 <__retarget_lock_release_recursive>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	065b      	lsls	r3, r3, #25
 8006fc2:	f53f af1f 	bmi.w	8006e04 <_vfiprintf_r+0x44>
 8006fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fc8:	e71e      	b.n	8006e08 <_vfiprintf_r+0x48>
 8006fca:	ab03      	add	r3, sp, #12
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <_vfiprintf_r+0x228>)
 8006fd2:	a904      	add	r1, sp, #16
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f879 	bl	80070cc <_printf_i>
 8006fda:	e7e4      	b.n	8006fa6 <_vfiprintf_r+0x1e6>
 8006fdc:	08007a30 	.word	0x08007a30
 8006fe0:	08007a3a 	.word	0x08007a3a
 8006fe4:	00000000 	.word	0x00000000
 8006fe8:	08006d9b 	.word	0x08006d9b
 8006fec:	08007a36 	.word	0x08007a36

08006ff0 <_printf_common>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	4698      	mov	r8, r3
 8006ff8:	688a      	ldr	r2, [r1, #8]
 8006ffa:	690b      	ldr	r3, [r1, #16]
 8006ffc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007000:	4293      	cmp	r3, r2
 8007002:	bfb8      	it	lt
 8007004:	4613      	movlt	r3, r2
 8007006:	6033      	str	r3, [r6, #0]
 8007008:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800700c:	4607      	mov	r7, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b10a      	cbz	r2, 8007016 <_printf_common+0x26>
 8007012:	3301      	adds	r3, #1
 8007014:	6033      	str	r3, [r6, #0]
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	0699      	lsls	r1, r3, #26
 800701a:	bf42      	ittt	mi
 800701c:	6833      	ldrmi	r3, [r6, #0]
 800701e:	3302      	addmi	r3, #2
 8007020:	6033      	strmi	r3, [r6, #0]
 8007022:	6825      	ldr	r5, [r4, #0]
 8007024:	f015 0506 	ands.w	r5, r5, #6
 8007028:	d106      	bne.n	8007038 <_printf_common+0x48>
 800702a:	f104 0a19 	add.w	sl, r4, #25
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	6832      	ldr	r2, [r6, #0]
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	42ab      	cmp	r3, r5
 8007036:	dc26      	bgt.n	8007086 <_printf_common+0x96>
 8007038:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	3b00      	subs	r3, #0
 8007040:	bf18      	it	ne
 8007042:	2301      	movne	r3, #1
 8007044:	0692      	lsls	r2, r2, #26
 8007046:	d42b      	bmi.n	80070a0 <_printf_common+0xb0>
 8007048:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800704c:	4641      	mov	r1, r8
 800704e:	4638      	mov	r0, r7
 8007050:	47c8      	blx	r9
 8007052:	3001      	adds	r0, #1
 8007054:	d01e      	beq.n	8007094 <_printf_common+0xa4>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	f003 0306 	and.w	r3, r3, #6
 800705e:	2b04      	cmp	r3, #4
 8007060:	bf02      	ittt	eq
 8007062:	68e5      	ldreq	r5, [r4, #12]
 8007064:	6833      	ldreq	r3, [r6, #0]
 8007066:	1aed      	subeq	r5, r5, r3
 8007068:	68a3      	ldr	r3, [r4, #8]
 800706a:	bf0c      	ite	eq
 800706c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007070:	2500      	movne	r5, #0
 8007072:	4293      	cmp	r3, r2
 8007074:	bfc4      	itt	gt
 8007076:	1a9b      	subgt	r3, r3, r2
 8007078:	18ed      	addgt	r5, r5, r3
 800707a:	2600      	movs	r6, #0
 800707c:	341a      	adds	r4, #26
 800707e:	42b5      	cmp	r5, r6
 8007080:	d11a      	bne.n	80070b8 <_printf_common+0xc8>
 8007082:	2000      	movs	r0, #0
 8007084:	e008      	b.n	8007098 <_printf_common+0xa8>
 8007086:	2301      	movs	r3, #1
 8007088:	4652      	mov	r2, sl
 800708a:	4641      	mov	r1, r8
 800708c:	4638      	mov	r0, r7
 800708e:	47c8      	blx	r9
 8007090:	3001      	adds	r0, #1
 8007092:	d103      	bne.n	800709c <_printf_common+0xac>
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709c:	3501      	adds	r5, #1
 800709e:	e7c6      	b.n	800702e <_printf_common+0x3e>
 80070a0:	18e1      	adds	r1, r4, r3
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	2030      	movs	r0, #48	@ 0x30
 80070a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070aa:	4422      	add	r2, r4
 80070ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070b4:	3302      	adds	r3, #2
 80070b6:	e7c7      	b.n	8007048 <_printf_common+0x58>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4622      	mov	r2, r4
 80070bc:	4641      	mov	r1, r8
 80070be:	4638      	mov	r0, r7
 80070c0:	47c8      	blx	r9
 80070c2:	3001      	adds	r0, #1
 80070c4:	d0e6      	beq.n	8007094 <_printf_common+0xa4>
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7d9      	b.n	800707e <_printf_common+0x8e>
	...

080070cc <_printf_i>:
 80070cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	7e0f      	ldrb	r7, [r1, #24]
 80070d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070d4:	2f78      	cmp	r7, #120	@ 0x78
 80070d6:	4691      	mov	r9, r2
 80070d8:	4680      	mov	r8, r0
 80070da:	460c      	mov	r4, r1
 80070dc:	469a      	mov	sl, r3
 80070de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070e2:	d807      	bhi.n	80070f4 <_printf_i+0x28>
 80070e4:	2f62      	cmp	r7, #98	@ 0x62
 80070e6:	d80a      	bhi.n	80070fe <_printf_i+0x32>
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	f000 80d2 	beq.w	8007292 <_printf_i+0x1c6>
 80070ee:	2f58      	cmp	r7, #88	@ 0x58
 80070f0:	f000 80b9 	beq.w	8007266 <_printf_i+0x19a>
 80070f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070fc:	e03a      	b.n	8007174 <_printf_i+0xa8>
 80070fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007102:	2b15      	cmp	r3, #21
 8007104:	d8f6      	bhi.n	80070f4 <_printf_i+0x28>
 8007106:	a101      	add	r1, pc, #4	@ (adr r1, 800710c <_printf_i+0x40>)
 8007108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800710c:	08007165 	.word	0x08007165
 8007110:	08007179 	.word	0x08007179
 8007114:	080070f5 	.word	0x080070f5
 8007118:	080070f5 	.word	0x080070f5
 800711c:	080070f5 	.word	0x080070f5
 8007120:	080070f5 	.word	0x080070f5
 8007124:	08007179 	.word	0x08007179
 8007128:	080070f5 	.word	0x080070f5
 800712c:	080070f5 	.word	0x080070f5
 8007130:	080070f5 	.word	0x080070f5
 8007134:	080070f5 	.word	0x080070f5
 8007138:	08007279 	.word	0x08007279
 800713c:	080071a3 	.word	0x080071a3
 8007140:	08007233 	.word	0x08007233
 8007144:	080070f5 	.word	0x080070f5
 8007148:	080070f5 	.word	0x080070f5
 800714c:	0800729b 	.word	0x0800729b
 8007150:	080070f5 	.word	0x080070f5
 8007154:	080071a3 	.word	0x080071a3
 8007158:	080070f5 	.word	0x080070f5
 800715c:	080070f5 	.word	0x080070f5
 8007160:	0800723b 	.word	0x0800723b
 8007164:	6833      	ldr	r3, [r6, #0]
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6032      	str	r2, [r6, #0]
 800716c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007170:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007174:	2301      	movs	r3, #1
 8007176:	e09d      	b.n	80072b4 <_printf_i+0x1e8>
 8007178:	6833      	ldr	r3, [r6, #0]
 800717a:	6820      	ldr	r0, [r4, #0]
 800717c:	1d19      	adds	r1, r3, #4
 800717e:	6031      	str	r1, [r6, #0]
 8007180:	0606      	lsls	r6, r0, #24
 8007182:	d501      	bpl.n	8007188 <_printf_i+0xbc>
 8007184:	681d      	ldr	r5, [r3, #0]
 8007186:	e003      	b.n	8007190 <_printf_i+0xc4>
 8007188:	0645      	lsls	r5, r0, #25
 800718a:	d5fb      	bpl.n	8007184 <_printf_i+0xb8>
 800718c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007190:	2d00      	cmp	r5, #0
 8007192:	da03      	bge.n	800719c <_printf_i+0xd0>
 8007194:	232d      	movs	r3, #45	@ 0x2d
 8007196:	426d      	negs	r5, r5
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800719c:	4859      	ldr	r0, [pc, #356]	@ (8007304 <_printf_i+0x238>)
 800719e:	230a      	movs	r3, #10
 80071a0:	e011      	b.n	80071c6 <_printf_i+0xfa>
 80071a2:	6821      	ldr	r1, [r4, #0]
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	0608      	lsls	r0, r1, #24
 80071a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0xe8>
 80071ae:	0649      	lsls	r1, r1, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2ad      	uxthmi	r5, r5
 80071b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071b6:	4853      	ldr	r0, [pc, #332]	@ (8007304 <_printf_i+0x238>)
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	bf14      	ite	ne
 80071bc:	230a      	movne	r3, #10
 80071be:	2308      	moveq	r3, #8
 80071c0:	2100      	movs	r1, #0
 80071c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071c6:	6866      	ldr	r6, [r4, #4]
 80071c8:	60a6      	str	r6, [r4, #8]
 80071ca:	2e00      	cmp	r6, #0
 80071cc:	bfa2      	ittt	ge
 80071ce:	6821      	ldrge	r1, [r4, #0]
 80071d0:	f021 0104 	bicge.w	r1, r1, #4
 80071d4:	6021      	strge	r1, [r4, #0]
 80071d6:	b90d      	cbnz	r5, 80071dc <_printf_i+0x110>
 80071d8:	2e00      	cmp	r6, #0
 80071da:	d04b      	beq.n	8007274 <_printf_i+0x1a8>
 80071dc:	4616      	mov	r6, r2
 80071de:	fbb5 f1f3 	udiv	r1, r5, r3
 80071e2:	fb03 5711 	mls	r7, r3, r1, r5
 80071e6:	5dc7      	ldrb	r7, [r0, r7]
 80071e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071ec:	462f      	mov	r7, r5
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	460d      	mov	r5, r1
 80071f2:	d9f4      	bls.n	80071de <_printf_i+0x112>
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d10b      	bne.n	8007210 <_printf_i+0x144>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	07df      	lsls	r7, r3, #31
 80071fc:	d508      	bpl.n	8007210 <_printf_i+0x144>
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	6861      	ldr	r1, [r4, #4]
 8007202:	4299      	cmp	r1, r3
 8007204:	bfde      	ittt	le
 8007206:	2330      	movle	r3, #48	@ 0x30
 8007208:	f806 3c01 	strble.w	r3, [r6, #-1]
 800720c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007210:	1b92      	subs	r2, r2, r6
 8007212:	6122      	str	r2, [r4, #16]
 8007214:	f8cd a000 	str.w	sl, [sp]
 8007218:	464b      	mov	r3, r9
 800721a:	aa03      	add	r2, sp, #12
 800721c:	4621      	mov	r1, r4
 800721e:	4640      	mov	r0, r8
 8007220:	f7ff fee6 	bl	8006ff0 <_printf_common>
 8007224:	3001      	adds	r0, #1
 8007226:	d14a      	bne.n	80072be <_printf_i+0x1f2>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	b004      	add	sp, #16
 800722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	f043 0320 	orr.w	r3, r3, #32
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	4833      	ldr	r0, [pc, #204]	@ (8007308 <_printf_i+0x23c>)
 800723c:	2778      	movs	r7, #120	@ 0x78
 800723e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	6831      	ldr	r1, [r6, #0]
 8007246:	061f      	lsls	r7, r3, #24
 8007248:	f851 5b04 	ldr.w	r5, [r1], #4
 800724c:	d402      	bmi.n	8007254 <_printf_i+0x188>
 800724e:	065f      	lsls	r7, r3, #25
 8007250:	bf48      	it	mi
 8007252:	b2ad      	uxthmi	r5, r5
 8007254:	6031      	str	r1, [r6, #0]
 8007256:	07d9      	lsls	r1, r3, #31
 8007258:	bf44      	itt	mi
 800725a:	f043 0320 	orrmi.w	r3, r3, #32
 800725e:	6023      	strmi	r3, [r4, #0]
 8007260:	b11d      	cbz	r5, 800726a <_printf_i+0x19e>
 8007262:	2310      	movs	r3, #16
 8007264:	e7ac      	b.n	80071c0 <_printf_i+0xf4>
 8007266:	4827      	ldr	r0, [pc, #156]	@ (8007304 <_printf_i+0x238>)
 8007268:	e7e9      	b.n	800723e <_printf_i+0x172>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	f023 0320 	bic.w	r3, r3, #32
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	e7f6      	b.n	8007262 <_printf_i+0x196>
 8007274:	4616      	mov	r6, r2
 8007276:	e7bd      	b.n	80071f4 <_printf_i+0x128>
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	6825      	ldr	r5, [r4, #0]
 800727c:	6961      	ldr	r1, [r4, #20]
 800727e:	1d18      	adds	r0, r3, #4
 8007280:	6030      	str	r0, [r6, #0]
 8007282:	062e      	lsls	r6, r5, #24
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	d501      	bpl.n	800728c <_printf_i+0x1c0>
 8007288:	6019      	str	r1, [r3, #0]
 800728a:	e002      	b.n	8007292 <_printf_i+0x1c6>
 800728c:	0668      	lsls	r0, r5, #25
 800728e:	d5fb      	bpl.n	8007288 <_printf_i+0x1bc>
 8007290:	8019      	strh	r1, [r3, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	6123      	str	r3, [r4, #16]
 8007296:	4616      	mov	r6, r2
 8007298:	e7bc      	b.n	8007214 <_printf_i+0x148>
 800729a:	6833      	ldr	r3, [r6, #0]
 800729c:	1d1a      	adds	r2, r3, #4
 800729e:	6032      	str	r2, [r6, #0]
 80072a0:	681e      	ldr	r6, [r3, #0]
 80072a2:	6862      	ldr	r2, [r4, #4]
 80072a4:	2100      	movs	r1, #0
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7f8 ffb2 	bl	8000210 <memchr>
 80072ac:	b108      	cbz	r0, 80072b2 <_printf_i+0x1e6>
 80072ae:	1b80      	subs	r0, r0, r6
 80072b0:	6060      	str	r0, [r4, #4]
 80072b2:	6863      	ldr	r3, [r4, #4]
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	2300      	movs	r3, #0
 80072b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072bc:	e7aa      	b.n	8007214 <_printf_i+0x148>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	4632      	mov	r2, r6
 80072c2:	4649      	mov	r1, r9
 80072c4:	4640      	mov	r0, r8
 80072c6:	47d0      	blx	sl
 80072c8:	3001      	adds	r0, #1
 80072ca:	d0ad      	beq.n	8007228 <_printf_i+0x15c>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	079b      	lsls	r3, r3, #30
 80072d0:	d413      	bmi.n	80072fa <_printf_i+0x22e>
 80072d2:	68e0      	ldr	r0, [r4, #12]
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	4298      	cmp	r0, r3
 80072d8:	bfb8      	it	lt
 80072da:	4618      	movlt	r0, r3
 80072dc:	e7a6      	b.n	800722c <_printf_i+0x160>
 80072de:	2301      	movs	r3, #1
 80072e0:	4632      	mov	r2, r6
 80072e2:	4649      	mov	r1, r9
 80072e4:	4640      	mov	r0, r8
 80072e6:	47d0      	blx	sl
 80072e8:	3001      	adds	r0, #1
 80072ea:	d09d      	beq.n	8007228 <_printf_i+0x15c>
 80072ec:	3501      	adds	r5, #1
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	9903      	ldr	r1, [sp, #12]
 80072f2:	1a5b      	subs	r3, r3, r1
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	dcf2      	bgt.n	80072de <_printf_i+0x212>
 80072f8:	e7eb      	b.n	80072d2 <_printf_i+0x206>
 80072fa:	2500      	movs	r5, #0
 80072fc:	f104 0619 	add.w	r6, r4, #25
 8007300:	e7f5      	b.n	80072ee <_printf_i+0x222>
 8007302:	bf00      	nop
 8007304:	08007a41 	.word	0x08007a41
 8007308:	08007a52 	.word	0x08007a52

0800730c <__sflush_r>:
 800730c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	0716      	lsls	r6, r2, #28
 8007316:	4605      	mov	r5, r0
 8007318:	460c      	mov	r4, r1
 800731a:	d454      	bmi.n	80073c6 <__sflush_r+0xba>
 800731c:	684b      	ldr	r3, [r1, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	dc02      	bgt.n	8007328 <__sflush_r+0x1c>
 8007322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	dd48      	ble.n	80073ba <__sflush_r+0xae>
 8007328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800732a:	2e00      	cmp	r6, #0
 800732c:	d045      	beq.n	80073ba <__sflush_r+0xae>
 800732e:	2300      	movs	r3, #0
 8007330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007334:	682f      	ldr	r7, [r5, #0]
 8007336:	6a21      	ldr	r1, [r4, #32]
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	d030      	beq.n	800739e <__sflush_r+0x92>
 800733c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	0759      	lsls	r1, r3, #29
 8007342:	d505      	bpl.n	8007350 <__sflush_r+0x44>
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	1ad2      	subs	r2, r2, r3
 8007348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800734a:	b10b      	cbz	r3, 8007350 <__sflush_r+0x44>
 800734c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	2300      	movs	r3, #0
 8007352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007354:	6a21      	ldr	r1, [r4, #32]
 8007356:	4628      	mov	r0, r5
 8007358:	47b0      	blx	r6
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	d106      	bne.n	800736e <__sflush_r+0x62>
 8007360:	6829      	ldr	r1, [r5, #0]
 8007362:	291d      	cmp	r1, #29
 8007364:	d82b      	bhi.n	80073be <__sflush_r+0xb2>
 8007366:	4a2a      	ldr	r2, [pc, #168]	@ (8007410 <__sflush_r+0x104>)
 8007368:	410a      	asrs	r2, r1
 800736a:	07d6      	lsls	r6, r2, #31
 800736c:	d427      	bmi.n	80073be <__sflush_r+0xb2>
 800736e:	2200      	movs	r2, #0
 8007370:	6062      	str	r2, [r4, #4]
 8007372:	04d9      	lsls	r1, r3, #19
 8007374:	6922      	ldr	r2, [r4, #16]
 8007376:	6022      	str	r2, [r4, #0]
 8007378:	d504      	bpl.n	8007384 <__sflush_r+0x78>
 800737a:	1c42      	adds	r2, r0, #1
 800737c:	d101      	bne.n	8007382 <__sflush_r+0x76>
 800737e:	682b      	ldr	r3, [r5, #0]
 8007380:	b903      	cbnz	r3, 8007384 <__sflush_r+0x78>
 8007382:	6560      	str	r0, [r4, #84]	@ 0x54
 8007384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007386:	602f      	str	r7, [r5, #0]
 8007388:	b1b9      	cbz	r1, 80073ba <__sflush_r+0xae>
 800738a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800738e:	4299      	cmp	r1, r3
 8007390:	d002      	beq.n	8007398 <__sflush_r+0x8c>
 8007392:	4628      	mov	r0, r5
 8007394:	f7ff fbf2 	bl	8006b7c <_free_r>
 8007398:	2300      	movs	r3, #0
 800739a:	6363      	str	r3, [r4, #52]	@ 0x34
 800739c:	e00d      	b.n	80073ba <__sflush_r+0xae>
 800739e:	2301      	movs	r3, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b0      	blx	r6
 80073a4:	4602      	mov	r2, r0
 80073a6:	1c50      	adds	r0, r2, #1
 80073a8:	d1c9      	bne.n	800733e <__sflush_r+0x32>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0c6      	beq.n	800733e <__sflush_r+0x32>
 80073b0:	2b1d      	cmp	r3, #29
 80073b2:	d001      	beq.n	80073b8 <__sflush_r+0xac>
 80073b4:	2b16      	cmp	r3, #22
 80073b6:	d11e      	bne.n	80073f6 <__sflush_r+0xea>
 80073b8:	602f      	str	r7, [r5, #0]
 80073ba:	2000      	movs	r0, #0
 80073bc:	e022      	b.n	8007404 <__sflush_r+0xf8>
 80073be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	e01b      	b.n	80073fe <__sflush_r+0xf2>
 80073c6:	690f      	ldr	r7, [r1, #16]
 80073c8:	2f00      	cmp	r7, #0
 80073ca:	d0f6      	beq.n	80073ba <__sflush_r+0xae>
 80073cc:	0793      	lsls	r3, r2, #30
 80073ce:	680e      	ldr	r6, [r1, #0]
 80073d0:	bf08      	it	eq
 80073d2:	694b      	ldreq	r3, [r1, #20]
 80073d4:	600f      	str	r7, [r1, #0]
 80073d6:	bf18      	it	ne
 80073d8:	2300      	movne	r3, #0
 80073da:	eba6 0807 	sub.w	r8, r6, r7
 80073de:	608b      	str	r3, [r1, #8]
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	dde9      	ble.n	80073ba <__sflush_r+0xae>
 80073e6:	6a21      	ldr	r1, [r4, #32]
 80073e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073ea:	4643      	mov	r3, r8
 80073ec:	463a      	mov	r2, r7
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b0      	blx	r6
 80073f2:	2800      	cmp	r0, #0
 80073f4:	dc08      	bgt.n	8007408 <__sflush_r+0xfc>
 80073f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007408:	4407      	add	r7, r0
 800740a:	eba8 0800 	sub.w	r8, r8, r0
 800740e:	e7e7      	b.n	80073e0 <__sflush_r+0xd4>
 8007410:	dfbffffe 	.word	0xdfbffffe

08007414 <_fflush_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	690b      	ldr	r3, [r1, #16]
 8007418:	4605      	mov	r5, r0
 800741a:	460c      	mov	r4, r1
 800741c:	b913      	cbnz	r3, 8007424 <_fflush_r+0x10>
 800741e:	2500      	movs	r5, #0
 8007420:	4628      	mov	r0, r5
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	b118      	cbz	r0, 800742e <_fflush_r+0x1a>
 8007426:	6a03      	ldr	r3, [r0, #32]
 8007428:	b90b      	cbnz	r3, 800742e <_fflush_r+0x1a>
 800742a:	f7ff fa9f 	bl	800696c <__sinit>
 800742e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f3      	beq.n	800741e <_fflush_r+0xa>
 8007436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007438:	07d0      	lsls	r0, r2, #31
 800743a:	d404      	bmi.n	8007446 <_fflush_r+0x32>
 800743c:	0599      	lsls	r1, r3, #22
 800743e:	d402      	bmi.n	8007446 <_fflush_r+0x32>
 8007440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007442:	f7ff fb98 	bl	8006b76 <__retarget_lock_acquire_recursive>
 8007446:	4628      	mov	r0, r5
 8007448:	4621      	mov	r1, r4
 800744a:	f7ff ff5f 	bl	800730c <__sflush_r>
 800744e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007450:	07da      	lsls	r2, r3, #31
 8007452:	4605      	mov	r5, r0
 8007454:	d4e4      	bmi.n	8007420 <_fflush_r+0xc>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	059b      	lsls	r3, r3, #22
 800745a:	d4e1      	bmi.n	8007420 <_fflush_r+0xc>
 800745c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800745e:	f7ff fb8b 	bl	8006b78 <__retarget_lock_release_recursive>
 8007462:	e7dd      	b.n	8007420 <_fflush_r+0xc>

08007464 <__swbuf_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	460e      	mov	r6, r1
 8007468:	4614      	mov	r4, r2
 800746a:	4605      	mov	r5, r0
 800746c:	b118      	cbz	r0, 8007476 <__swbuf_r+0x12>
 800746e:	6a03      	ldr	r3, [r0, #32]
 8007470:	b90b      	cbnz	r3, 8007476 <__swbuf_r+0x12>
 8007472:	f7ff fa7b 	bl	800696c <__sinit>
 8007476:	69a3      	ldr	r3, [r4, #24]
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	071a      	lsls	r2, r3, #28
 800747e:	d501      	bpl.n	8007484 <__swbuf_r+0x20>
 8007480:	6923      	ldr	r3, [r4, #16]
 8007482:	b943      	cbnz	r3, 8007496 <__swbuf_r+0x32>
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f82a 	bl	80074e0 <__swsetup_r>
 800748c:	b118      	cbz	r0, 8007496 <__swbuf_r+0x32>
 800748e:	f04f 37ff 	mov.w	r7, #4294967295
 8007492:	4638      	mov	r0, r7
 8007494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	1a98      	subs	r0, r3, r2
 800749c:	6963      	ldr	r3, [r4, #20]
 800749e:	b2f6      	uxtb	r6, r6
 80074a0:	4283      	cmp	r3, r0
 80074a2:	4637      	mov	r7, r6
 80074a4:	dc05      	bgt.n	80074b2 <__swbuf_r+0x4e>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f7ff ffb3 	bl	8007414 <_fflush_r>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d1ed      	bne.n	800748e <__swbuf_r+0x2a>
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	60a3      	str	r3, [r4, #8]
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	701e      	strb	r6, [r3, #0]
 80074c0:	6962      	ldr	r2, [r4, #20]
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d004      	beq.n	80074d2 <__swbuf_r+0x6e>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	07db      	lsls	r3, r3, #31
 80074cc:	d5e1      	bpl.n	8007492 <__swbuf_r+0x2e>
 80074ce:	2e0a      	cmp	r6, #10
 80074d0:	d1df      	bne.n	8007492 <__swbuf_r+0x2e>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f7ff ff9d 	bl	8007414 <_fflush_r>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0d9      	beq.n	8007492 <__swbuf_r+0x2e>
 80074de:	e7d6      	b.n	800748e <__swbuf_r+0x2a>

080074e0 <__swsetup_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4b29      	ldr	r3, [pc, #164]	@ (8007588 <__swsetup_r+0xa8>)
 80074e4:	4605      	mov	r5, r0
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	460c      	mov	r4, r1
 80074ea:	b118      	cbz	r0, 80074f4 <__swsetup_r+0x14>
 80074ec:	6a03      	ldr	r3, [r0, #32]
 80074ee:	b90b      	cbnz	r3, 80074f4 <__swsetup_r+0x14>
 80074f0:	f7ff fa3c 	bl	800696c <__sinit>
 80074f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f8:	0719      	lsls	r1, r3, #28
 80074fa:	d422      	bmi.n	8007542 <__swsetup_r+0x62>
 80074fc:	06da      	lsls	r2, r3, #27
 80074fe:	d407      	bmi.n	8007510 <__swsetup_r+0x30>
 8007500:	2209      	movs	r2, #9
 8007502:	602a      	str	r2, [r5, #0]
 8007504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	f04f 30ff 	mov.w	r0, #4294967295
 800750e:	e033      	b.n	8007578 <__swsetup_r+0x98>
 8007510:	0758      	lsls	r0, r3, #29
 8007512:	d512      	bpl.n	800753a <__swsetup_r+0x5a>
 8007514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007516:	b141      	cbz	r1, 800752a <__swsetup_r+0x4a>
 8007518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <__swsetup_r+0x46>
 8007520:	4628      	mov	r0, r5
 8007522:	f7ff fb2b 	bl	8006b7c <_free_r>
 8007526:	2300      	movs	r3, #0
 8007528:	6363      	str	r3, [r4, #52]	@ 0x34
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	2300      	movs	r3, #0
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	b94b      	cbnz	r3, 800755a <__swsetup_r+0x7a>
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800754c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007550:	d003      	beq.n	800755a <__swsetup_r+0x7a>
 8007552:	4621      	mov	r1, r4
 8007554:	4628      	mov	r0, r5
 8007556:	f000 f84f 	bl	80075f8 <__smakebuf_r>
 800755a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755e:	f013 0201 	ands.w	r2, r3, #1
 8007562:	d00a      	beq.n	800757a <__swsetup_r+0x9a>
 8007564:	2200      	movs	r2, #0
 8007566:	60a2      	str	r2, [r4, #8]
 8007568:	6962      	ldr	r2, [r4, #20]
 800756a:	4252      	negs	r2, r2
 800756c:	61a2      	str	r2, [r4, #24]
 800756e:	6922      	ldr	r2, [r4, #16]
 8007570:	b942      	cbnz	r2, 8007584 <__swsetup_r+0xa4>
 8007572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007576:	d1c5      	bne.n	8007504 <__swsetup_r+0x24>
 8007578:	bd38      	pop	{r3, r4, r5, pc}
 800757a:	0799      	lsls	r1, r3, #30
 800757c:	bf58      	it	pl
 800757e:	6962      	ldrpl	r2, [r4, #20]
 8007580:	60a2      	str	r2, [r4, #8]
 8007582:	e7f4      	b.n	800756e <__swsetup_r+0x8e>
 8007584:	2000      	movs	r0, #0
 8007586:	e7f7      	b.n	8007578 <__swsetup_r+0x98>
 8007588:	20000024 	.word	0x20000024

0800758c <_sbrk_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d06      	ldr	r5, [pc, #24]	@ (80075a8 <_sbrk_r+0x1c>)
 8007590:	2300      	movs	r3, #0
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	f7fa fce4 	bl	8001f64 <_sbrk>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_sbrk_r+0x1a>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_sbrk_r+0x1a>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	200003b8 	.word	0x200003b8

080075ac <__swhatbuf_r>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	460c      	mov	r4, r1
 80075b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	b096      	sub	sp, #88	@ 0x58
 80075b8:	4615      	mov	r5, r2
 80075ba:	461e      	mov	r6, r3
 80075bc:	da0d      	bge.n	80075da <__swhatbuf_r+0x2e>
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075c4:	f04f 0100 	mov.w	r1, #0
 80075c8:	bf14      	ite	ne
 80075ca:	2340      	movne	r3, #64	@ 0x40
 80075cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075d0:	2000      	movs	r0, #0
 80075d2:	6031      	str	r1, [r6, #0]
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	b016      	add	sp, #88	@ 0x58
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
 80075da:	466a      	mov	r2, sp
 80075dc:	f000 f848 	bl	8007670 <_fstat_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	dbec      	blt.n	80075be <__swhatbuf_r+0x12>
 80075e4:	9901      	ldr	r1, [sp, #4]
 80075e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075ee:	4259      	negs	r1, r3
 80075f0:	4159      	adcs	r1, r3
 80075f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075f6:	e7eb      	b.n	80075d0 <__swhatbuf_r+0x24>

080075f8 <__smakebuf_r>:
 80075f8:	898b      	ldrh	r3, [r1, #12]
 80075fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075fc:	079d      	lsls	r5, r3, #30
 80075fe:	4606      	mov	r6, r0
 8007600:	460c      	mov	r4, r1
 8007602:	d507      	bpl.n	8007614 <__smakebuf_r+0x1c>
 8007604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	2301      	movs	r3, #1
 800760e:	6163      	str	r3, [r4, #20]
 8007610:	b003      	add	sp, #12
 8007612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007614:	ab01      	add	r3, sp, #4
 8007616:	466a      	mov	r2, sp
 8007618:	f7ff ffc8 	bl	80075ac <__swhatbuf_r>
 800761c:	9f00      	ldr	r7, [sp, #0]
 800761e:	4605      	mov	r5, r0
 8007620:	4639      	mov	r1, r7
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff fb16 	bl	8006c54 <_malloc_r>
 8007628:	b948      	cbnz	r0, 800763e <__smakebuf_r+0x46>
 800762a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762e:	059a      	lsls	r2, r3, #22
 8007630:	d4ee      	bmi.n	8007610 <__smakebuf_r+0x18>
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	f043 0302 	orr.w	r3, r3, #2
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	e7e2      	b.n	8007604 <__smakebuf_r+0xc>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	6020      	str	r0, [r4, #0]
 8007642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800764e:	b15b      	cbz	r3, 8007668 <__smakebuf_r+0x70>
 8007650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f81d 	bl	8007694 <_isatty_r>
 800765a:	b128      	cbz	r0, 8007668 <__smakebuf_r+0x70>
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	f023 0303 	bic.w	r3, r3, #3
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	81a3      	strh	r3, [r4, #12]
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	431d      	orrs	r5, r3
 800766c:	81a5      	strh	r5, [r4, #12]
 800766e:	e7cf      	b.n	8007610 <__smakebuf_r+0x18>

08007670 <_fstat_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	@ (8007690 <_fstat_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7fa fc48 	bl	8001f12 <_fstat>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_fstat_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_fstat_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	200003b8 	.word	0x200003b8

08007694 <_isatty_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	@ (80076b0 <_isatty_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fa fc47 	bl	8001f32 <_isatty>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_isatty_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_isatty_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	200003b8 	.word	0x200003b8
 80076b4:	00000000 	.word	0x00000000

080076b8 <atan>:
 80076b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	ec55 4b10 	vmov	r4, r5, d0
 80076c0:	4bbf      	ldr	r3, [pc, #764]	@ (80079c0 <atan+0x308>)
 80076c2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80076c6:	429e      	cmp	r6, r3
 80076c8:	46ab      	mov	fp, r5
 80076ca:	d918      	bls.n	80076fe <atan+0x46>
 80076cc:	4bbd      	ldr	r3, [pc, #756]	@ (80079c4 <atan+0x30c>)
 80076ce:	429e      	cmp	r6, r3
 80076d0:	d801      	bhi.n	80076d6 <atan+0x1e>
 80076d2:	d109      	bne.n	80076e8 <atan+0x30>
 80076d4:	b144      	cbz	r4, 80076e8 <atan+0x30>
 80076d6:	4622      	mov	r2, r4
 80076d8:	462b      	mov	r3, r5
 80076da:	4620      	mov	r0, r4
 80076dc:	4629      	mov	r1, r5
 80076de:	f7f8 fded 	bl	80002bc <__adddf3>
 80076e2:	4604      	mov	r4, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	e006      	b.n	80076f6 <atan+0x3e>
 80076e8:	f1bb 0f00 	cmp.w	fp, #0
 80076ec:	f340 812b 	ble.w	8007946 <atan+0x28e>
 80076f0:	a597      	add	r5, pc, #604	@ (adr r5, 8007950 <atan+0x298>)
 80076f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076f6:	ec45 4b10 	vmov	d0, r4, r5
 80076fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	4bb2      	ldr	r3, [pc, #712]	@ (80079c8 <atan+0x310>)
 8007700:	429e      	cmp	r6, r3
 8007702:	d813      	bhi.n	800772c <atan+0x74>
 8007704:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007708:	429e      	cmp	r6, r3
 800770a:	d80c      	bhi.n	8007726 <atan+0x6e>
 800770c:	a392      	add	r3, pc, #584	@ (adr r3, 8007958 <atan+0x2a0>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	f7f8 fdd1 	bl	80002bc <__adddf3>
 800771a:	4bac      	ldr	r3, [pc, #688]	@ (80079cc <atan+0x314>)
 800771c:	2200      	movs	r2, #0
 800771e:	f7f9 fa13 	bl	8000b48 <__aeabi_dcmpgt>
 8007722:	2800      	cmp	r0, #0
 8007724:	d1e7      	bne.n	80076f6 <atan+0x3e>
 8007726:	f04f 3aff 	mov.w	sl, #4294967295
 800772a:	e029      	b.n	8007780 <atan+0xc8>
 800772c:	f000 f95c 	bl	80079e8 <fabs>
 8007730:	4ba7      	ldr	r3, [pc, #668]	@ (80079d0 <atan+0x318>)
 8007732:	429e      	cmp	r6, r3
 8007734:	ec55 4b10 	vmov	r4, r5, d0
 8007738:	f200 80bc 	bhi.w	80078b4 <atan+0x1fc>
 800773c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007740:	429e      	cmp	r6, r3
 8007742:	f200 809e 	bhi.w	8007882 <atan+0x1ca>
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f8 fdb5 	bl	80002bc <__adddf3>
 8007752:	4b9e      	ldr	r3, [pc, #632]	@ (80079cc <atan+0x314>)
 8007754:	2200      	movs	r2, #0
 8007756:	f7f8 fdaf 	bl	80002b8 <__aeabi_dsub>
 800775a:	2200      	movs	r2, #0
 800775c:	4606      	mov	r6, r0
 800775e:	460f      	mov	r7, r1
 8007760:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 fda8 	bl	80002bc <__adddf3>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 f882 	bl	800087c <__aeabi_ddiv>
 8007778:	f04f 0a00 	mov.w	sl, #0
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	4622      	mov	r2, r4
 8007782:	462b      	mov	r3, r5
 8007784:	4620      	mov	r0, r4
 8007786:	4629      	mov	r1, r5
 8007788:	f7f8 ff4e 	bl	8000628 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4680      	mov	r8, r0
 8007792:	4689      	mov	r9, r1
 8007794:	f7f8 ff48 	bl	8000628 <__aeabi_dmul>
 8007798:	a371      	add	r3, pc, #452	@ (adr r3, 8007960 <atan+0x2a8>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	4606      	mov	r6, r0
 80077a0:	460f      	mov	r7, r1
 80077a2:	f7f8 ff41 	bl	8000628 <__aeabi_dmul>
 80077a6:	a370      	add	r3, pc, #448	@ (adr r3, 8007968 <atan+0x2b0>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fd86 	bl	80002bc <__adddf3>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7f8 ff38 	bl	8000628 <__aeabi_dmul>
 80077b8:	a36d      	add	r3, pc, #436	@ (adr r3, 8007970 <atan+0x2b8>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd7d 	bl	80002bc <__adddf3>
 80077c2:	4632      	mov	r2, r6
 80077c4:	463b      	mov	r3, r7
 80077c6:	f7f8 ff2f 	bl	8000628 <__aeabi_dmul>
 80077ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8007978 <atan+0x2c0>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fd74 	bl	80002bc <__adddf3>
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f8 ff26 	bl	8000628 <__aeabi_dmul>
 80077dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007980 <atan+0x2c8>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fd6b 	bl	80002bc <__adddf3>
 80077e6:	4632      	mov	r2, r6
 80077e8:	463b      	mov	r3, r7
 80077ea:	f7f8 ff1d 	bl	8000628 <__aeabi_dmul>
 80077ee:	a366      	add	r3, pc, #408	@ (adr r3, 8007988 <atan+0x2d0>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fd62 	bl	80002bc <__adddf3>
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	f7f8 ff14 	bl	8000628 <__aeabi_dmul>
 8007800:	a363      	add	r3, pc, #396	@ (adr r3, 8007990 <atan+0x2d8>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	4680      	mov	r8, r0
 8007808:	4689      	mov	r9, r1
 800780a:	4630      	mov	r0, r6
 800780c:	4639      	mov	r1, r7
 800780e:	f7f8 ff0b 	bl	8000628 <__aeabi_dmul>
 8007812:	a361      	add	r3, pc, #388	@ (adr r3, 8007998 <atan+0x2e0>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fd4e 	bl	80002b8 <__aeabi_dsub>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f8 ff02 	bl	8000628 <__aeabi_dmul>
 8007824:	a35e      	add	r3, pc, #376	@ (adr r3, 80079a0 <atan+0x2e8>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd45 	bl	80002b8 <__aeabi_dsub>
 800782e:	4632      	mov	r2, r6
 8007830:	463b      	mov	r3, r7
 8007832:	f7f8 fef9 	bl	8000628 <__aeabi_dmul>
 8007836:	a35c      	add	r3, pc, #368	@ (adr r3, 80079a8 <atan+0x2f0>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fd3c 	bl	80002b8 <__aeabi_dsub>
 8007840:	4632      	mov	r2, r6
 8007842:	463b      	mov	r3, r7
 8007844:	f7f8 fef0 	bl	8000628 <__aeabi_dmul>
 8007848:	a359      	add	r3, pc, #356	@ (adr r3, 80079b0 <atan+0x2f8>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fd33 	bl	80002b8 <__aeabi_dsub>
 8007852:	4632      	mov	r2, r6
 8007854:	463b      	mov	r3, r7
 8007856:	f7f8 fee7 	bl	8000628 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4640      	mov	r0, r8
 8007860:	4649      	mov	r1, r9
 8007862:	f7f8 fd2b 	bl	80002bc <__adddf3>
 8007866:	4622      	mov	r2, r4
 8007868:	462b      	mov	r3, r5
 800786a:	f7f8 fedd 	bl	8000628 <__aeabi_dmul>
 800786e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	d148      	bne.n	800790a <atan+0x252>
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fd1c 	bl	80002b8 <__aeabi_dsub>
 8007880:	e72f      	b.n	80076e2 <atan+0x2a>
 8007882:	4b52      	ldr	r3, [pc, #328]	@ (80079cc <atan+0x314>)
 8007884:	2200      	movs	r2, #0
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f8 fd15 	bl	80002b8 <__aeabi_dsub>
 800788e:	4b4f      	ldr	r3, [pc, #316]	@ (80079cc <atan+0x314>)
 8007890:	4606      	mov	r6, r0
 8007892:	460f      	mov	r7, r1
 8007894:	2200      	movs	r2, #0
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f8 fd0f 	bl	80002bc <__adddf3>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4630      	mov	r0, r6
 80078a4:	4639      	mov	r1, r7
 80078a6:	f7f8 ffe9 	bl	800087c <__aeabi_ddiv>
 80078aa:	f04f 0a01 	mov.w	sl, #1
 80078ae:	4604      	mov	r4, r0
 80078b0:	460d      	mov	r5, r1
 80078b2:	e765      	b.n	8007780 <atan+0xc8>
 80078b4:	4b47      	ldr	r3, [pc, #284]	@ (80079d4 <atan+0x31c>)
 80078b6:	429e      	cmp	r6, r3
 80078b8:	d21c      	bcs.n	80078f4 <atan+0x23c>
 80078ba:	4b47      	ldr	r3, [pc, #284]	@ (80079d8 <atan+0x320>)
 80078bc:	2200      	movs	r2, #0
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 fcf9 	bl	80002b8 <__aeabi_dsub>
 80078c6:	4b44      	ldr	r3, [pc, #272]	@ (80079d8 <atan+0x320>)
 80078c8:	4606      	mov	r6, r0
 80078ca:	460f      	mov	r7, r1
 80078cc:	2200      	movs	r2, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 fea9 	bl	8000628 <__aeabi_dmul>
 80078d6:	4b3d      	ldr	r3, [pc, #244]	@ (80079cc <atan+0x314>)
 80078d8:	2200      	movs	r2, #0
 80078da:	f7f8 fcef 	bl	80002bc <__adddf3>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f8 ffc9 	bl	800087c <__aeabi_ddiv>
 80078ea:	f04f 0a02 	mov.w	sl, #2
 80078ee:	4604      	mov	r4, r0
 80078f0:	460d      	mov	r5, r1
 80078f2:	e745      	b.n	8007780 <atan+0xc8>
 80078f4:	4622      	mov	r2, r4
 80078f6:	462b      	mov	r3, r5
 80078f8:	4938      	ldr	r1, [pc, #224]	@ (80079dc <atan+0x324>)
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7f8 ffbe 	bl	800087c <__aeabi_ddiv>
 8007900:	f04f 0a03 	mov.w	sl, #3
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	e73a      	b.n	8007780 <atan+0xc8>
 800790a:	4b35      	ldr	r3, [pc, #212]	@ (80079e0 <atan+0x328>)
 800790c:	4e35      	ldr	r6, [pc, #212]	@ (80079e4 <atan+0x32c>)
 800790e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fccf 	bl	80002b8 <__aeabi_dsub>
 800791a:	4622      	mov	r2, r4
 800791c:	462b      	mov	r3, r5
 800791e:	f7f8 fccb 	bl	80002b8 <__aeabi_dsub>
 8007922:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800792e:	f7f8 fcc3 	bl	80002b8 <__aeabi_dsub>
 8007932:	f1bb 0f00 	cmp.w	fp, #0
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	f6bf aedc 	bge.w	80076f6 <atan+0x3e>
 800793e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007942:	461d      	mov	r5, r3
 8007944:	e6d7      	b.n	80076f6 <atan+0x3e>
 8007946:	a51c      	add	r5, pc, #112	@ (adr r5, 80079b8 <atan+0x300>)
 8007948:	e9d5 4500 	ldrd	r4, r5, [r5]
 800794c:	e6d3      	b.n	80076f6 <atan+0x3e>
 800794e:	bf00      	nop
 8007950:	54442d18 	.word	0x54442d18
 8007954:	3ff921fb 	.word	0x3ff921fb
 8007958:	8800759c 	.word	0x8800759c
 800795c:	7e37e43c 	.word	0x7e37e43c
 8007960:	e322da11 	.word	0xe322da11
 8007964:	3f90ad3a 	.word	0x3f90ad3a
 8007968:	24760deb 	.word	0x24760deb
 800796c:	3fa97b4b 	.word	0x3fa97b4b
 8007970:	a0d03d51 	.word	0xa0d03d51
 8007974:	3fb10d66 	.word	0x3fb10d66
 8007978:	c54c206e 	.word	0xc54c206e
 800797c:	3fb745cd 	.word	0x3fb745cd
 8007980:	920083ff 	.word	0x920083ff
 8007984:	3fc24924 	.word	0x3fc24924
 8007988:	5555550d 	.word	0x5555550d
 800798c:	3fd55555 	.word	0x3fd55555
 8007990:	2c6a6c2f 	.word	0x2c6a6c2f
 8007994:	bfa2b444 	.word	0xbfa2b444
 8007998:	52defd9a 	.word	0x52defd9a
 800799c:	3fadde2d 	.word	0x3fadde2d
 80079a0:	af749a6d 	.word	0xaf749a6d
 80079a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80079a8:	fe231671 	.word	0xfe231671
 80079ac:	3fbc71c6 	.word	0x3fbc71c6
 80079b0:	9998ebc4 	.word	0x9998ebc4
 80079b4:	3fc99999 	.word	0x3fc99999
 80079b8:	54442d18 	.word	0x54442d18
 80079bc:	bff921fb 	.word	0xbff921fb
 80079c0:	440fffff 	.word	0x440fffff
 80079c4:	7ff00000 	.word	0x7ff00000
 80079c8:	3fdbffff 	.word	0x3fdbffff
 80079cc:	3ff00000 	.word	0x3ff00000
 80079d0:	3ff2ffff 	.word	0x3ff2ffff
 80079d4:	40038000 	.word	0x40038000
 80079d8:	3ff80000 	.word	0x3ff80000
 80079dc:	bff00000 	.word	0xbff00000
 80079e0:	08007a68 	.word	0x08007a68
 80079e4:	08007a88 	.word	0x08007a88

080079e8 <fabs>:
 80079e8:	ec51 0b10 	vmov	r0, r1, d0
 80079ec:	4602      	mov	r2, r0
 80079ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80079f2:	ec43 2b10 	vmov	d0, r2, r3
 80079f6:	4770      	bx	lr

080079f8 <_init>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr

08007a04 <_fini>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr
